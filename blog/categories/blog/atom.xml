<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2015-01-18T15:31:16-05:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flag Your Features with Rollout and Degrade]]></title>
    <link href="http://amcaplan.ninja/blog/2015/01/13/flag-your-features-with-rollout-and-degrade/"/>
    <updated>2015-01-13T19:29:40-05:00</updated>
    <id>http://amcaplan.ninja/blog/2015/01/13/flag-your-features-with-rollout-and-degrade</id>
    <content type="html"><![CDATA[<p>[This post has been moved to the new <a href="/talks">Talks</a> section.]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closures and Callbacks: Running Arbitrary Task Sets Synchronously in JavaScript]]></title>
    <link href="http://amcaplan.ninja/blog/Programming/JavaScript/2014/08/24/closures-and-callbacks-running-arbitrary-task-sets-synchronously-in-javascript/"/>
    <updated>2014-08-24T16:25:29-04:00</updated>
    <id>http://amcaplan.ninja/blog/Programming/JavaScript/2014/08/24/closures-and-callbacks-running-arbitrary-task-sets-synchronously-in-javascript</id>
    <content type="html"><![CDATA[<p>On the Vitals Choice team, we have divided our product into a number of apps.
Each of those apps has one running instance per environment , and we have
several environments.  So as you might imagine, making sure updated code
gets propagated through all those places at the right time can be quite
the task.  Luckily, we have a Hubot instance which does most of the heavy
lifting, but even issuing all the Hubot commands for every single app makes you
wonder: shouldn&rsquo;t there be a way to automate this better?</p>

<p>Well, it turns out that an attempt had been made in the past, but we ran into
a problem: JavaScript&rsquo;s asynchronicity.  The server hosting Hubot was suddenly
told to update all the apps for a particular environment, and the simultaneous
processes overwhelmed the CPU and memory.</p>

<p>Considering the problem, I realized that callbacks were the way to go.  Hubot
comes with an evented system, which we could utilize to force Hubot to only
launch one app at a time.  Here&rsquo;s what I came up with, and what I learned along
the way.</p>

<!-- more -->


<p><em>[Note: code examples have been simplified for readability, and proprietary
secrets have been removed.]</em></p>

<h3>Step 1: Implement callbacks for the deploy script</h3>

<p>Initially, groundwork needed to be laid for post-deploy callbacks.  This was
relatively simple to implement (all examples in CoffeeScript):
``` coffeescript
deploy = (app, env, callback) &ndash;>
  # code to deploy the app, including spawning a Shell script, abstracted
  # in JavaScript by an object held in the variable &lsquo;script&rsquo;</p>

<p>  script.on &lsquo;close&rsquo;, &ndash;></p>

<pre><code>callback()
</code></pre>

<p>```</p>

<h3>Step 2: Create a function for each app</h3>

<p>After quickly setting up a <code>robot.respond</code> function (which is how Hubot
responds to a particular chat command), calling a <code>deployAll</code> function, I
turned to the hard problem of setting up a series of functions to deploy all
apps, one after the other.  I had a variable accessible as
<code>robot.brain.PROJECTS</code>, which was a collection of all the app names, so I
thought to iterate through all the apps, each time capturing the previous
function as a callback of the new function.  This would effectively create
a stack of functions that would be executed one by one, exactly as I described.</p>

<p>``` coffeescript
deployAll = (env, msg)&ndash;>
  callback = &ndash;></p>

<pre><code>msg.send "Finished deploying all the apps!"
</code></pre>

<p>  for app in robot.brain.PROJECTS</p>

<pre><code># Reassign `callback` to a new function...
callback = -&gt;
  # which passes the current `callback` as a callback to `deploy`
  deploy(app, env, callback)
</code></pre>

<p>  callback() # Start the chain!
```</p>

<p>It all seemed to make sense, until I actually tested it.  For some reason,
it just tried to deploy the last app again and again.  What gives?</p>

<h3>Step 2.5: Grokking Scope and Lazy Function Evaluation</h3>

<p>It turns out that in the loop, when I redefined <code>callback</code>, it associated the
<code>callback</code> variable with a new function, but within the function, it didn&rsquo;t
yet do anything with the line <code>deploy(app, env, callback)</code>.  This is because
functions exist within a particular closure; they will be evaluated as though
they were run in the place where they were defined, with access to all local
variables, but those variables are accessed when the function is actually run,
NOT when the function is defined.</p>

<p>Here&rsquo;s a simpler example:</p>

<p><code>coffeescript
i = 0
logger = -&gt;
  i++
  console.log(i)
logger() # =&gt; 1
logger() # =&gt; 2
console.log(i) =&gt; 2
</code></p>

<p>We can see that <code>i</code> is defined in the outer scope, modified in the inner scope,
and that change persists in the outer scope.</p>

<p>Let&rsquo;s now look at an example closer to our situation:</p>

<p><code>coffeescript
i = 0
logger = -&gt;
  console.log(i)
i = 7
logger() # =&gt; 7
</code></p>

<p>As we can see, the <code>i</code> inside the function is not fixed, but rather depends on
what happens in its closure at any point before the function is actually
called.</p>

<p>Here&rsquo;s one last example, with a nested function like we had:</p>

<p>``` coffeescript
callbackRunner = (callback) &ndash;>
  callback()
onePrinter = &ndash;>
  console.log(1)
callbackRunner(onePrinter) # => 1</p>

<p>cbRoP = &ndash;>
  callbackRunner(onePrinter)
cbRoP() # => 1</p>

<p>onePrinter = &ndash;>
  console.log(&ldquo;one&rdquo;)
cbRoP() # => &ldquo;one&rdquo;
```</p>

<p>By redefining <code>onePrinter</code> in the outer scope, we changed what <code>cbRoP</code> does.
This is because inside <code>cbRoP</code>, where <code>onePrinter</code> is referenced, that variable
is evaluated only when <code>cbRoP</code> is actually called.  The first time, <code>onePrinter</code>
prints out 1, but the second time, it prints out &ldquo;one&rdquo;.  Even within <code>cbRoP</code>,
<code>onePrinter</code> has been redefined.</p>

<h3>Step 3: Create a Custom Scope</h3>

<p>The solution to our problem was to create a scope where the callback wouldn&rsquo;t
change.  Here&rsquo;s the code:</p>

<p>``` coffeescript
deployAll = (env, msg)&ndash;>
  callback = &ndash;></p>

<pre><code>msg.send "Finished deploying all the apps!"
</code></pre>

<p>  deployFunctionFactory = (app, callback) &ndash;></p>

<pre><code>-&gt;
  deploy(app, env, callback)
</code></pre>

<p>  for app in robot.brain.PROJECTS</p>

<pre><code>callback = deployFunctionFactory(app, callback)
</code></pre>

<p>  callback()
```</p>

<p>This is a bit of a mind-bender, so let&rsquo;s explain piece by piece.</p>

<ul>
<li><p><code>deployFunctionFactory</code> takes in a reference to an app and a function to
use as a callback.  It returns a function which, when called, will deploy
the app passed in, and use the callback that is passed in.  Since <code>callback</code>
is one of <code>deployFunctionFactory</code>&rsquo;s arguments, it has been captured in the
scope of the function, and nothing outside can change it in the future.</p></li>
<li><p>The <code>for</code> loop reassigns <code>callback</code> each time to a new function which is
produced on the spot by <code>deployFunctionFactory</code>.  The right side of the equals
sign is evaluated immediately, so <code>callback</code> is passed into
<code>deployFunctionFactory</code>, a new function is returned, and that new function is
assigned to <code>callback</code>.</p></li>
<li><p>The cycle repeats for each app, ultimately generating what is effectively
a stack of functions to be called, one after the other.</p></li>
<li><p>When the stack of functions is resolved on the last line, it starts by
running the anonymous function returned by <code>deployFunctionFactory</code> for the last
app in <code>robot.brain.PROJECTS</code>, since that&rsquo;s the last function that has been
added to the virtual stack.  That function calls <code>deploy</code> with the second-to-last
function (which deploys the second-to-last app) as a callback.  When the first
app deployed is done deploying, this callback is run, deploying the next app
in line.</p></li>
</ul>


<p>The logic is pretty complex, so here&rsquo;s a visual representation of what all this
code is accomplishing.  We will consider a case of 3 apps to keep it simple.
First, we build the function inside out:</p>

<p>``` coffeescript
1.  callback = &ndash;></p>

<pre><code>  msg.send "Finished deploying all the apps!"
</code></pre>

<ol>
<li><p>callback = &ndash;>
  deploy &ldquo;app1&rdquo;, env, &ndash;>
    msg.send &ldquo;Finished deploying all the apps!&rdquo;</p></li>
<li><p>callback = &ndash;>
  deploy &ldquo;app2&rdquo;, env, &ndash;>
    deploy &ldquo;app1&rdquo;, env, &ndash;>
      msg.send &ldquo;Finished deploying all the apps!&rdquo;</p></li>
<li><p>callback = &ndash;>
  deploy &ldquo;app3&rdquo;, env, &ndash;>
    deploy &ldquo;app2&rdquo;, env, &ndash;>
      deploy &ldquo;app1&rdquo;, env, &ndash;>
        msg.send &ldquo;Finished deploying all the apps!&rdquo;
```</p></li>
</ol>


<p>Now, when we call <code>callback</code>, the functions will be run outside in.  First,
app3 will be deployed.  When that&rsquo;s done, our <code>deploy</code> function knows to call
the callback, i.e. the next function, deploying app2.  When app2 finishes being
deployed, app1 will be deployed.  At the end, a message will be sent letting
you know all the apps have been deployed.</p>

<h3>Concluding Thoughts</h3>

<p>Using closures and callbacks properly can be a mentally exhausting endeavor.
However, when these factors are properly considered and utilized, you can
accomplish some pretty powerful stuff.</p>

<p>I personally had to try a few iterations before I came up with a workable
solution in this case, but the results were quite satisfying, and it got the
job done.  In the future, if we add apps to <code>robot.brain.PROJECTS</code>, the
<code>deployAll</code> function won&rsquo;t have to be changed; it will just add more layers
to the nested function we&rsquo;ve built.</p>

<p>Using closures and callbacks, we&rsquo;ve managed to build a function that will run
an arbitrary number of tasks synchronously.  Sweet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous JavaScript - Without Failing Capybara Tests]]></title>
    <link href="http://amcaplan.ninja/blog/2014/07/17/asynchronous-javascript-without-failing-capybara-tests/"/>
    <updated>2014-07-17T13:04:57-04:00</updated>
    <id>http://amcaplan.ninja/blog/2014/07/17/asynchronous-javascript-without-failing-capybara-tests</id>
    <content type="html"><![CDATA[<p>Recently at work, I spent over a day trying to get one failing test to pass.  I tried everything in the code, but no dice.  Finally, I realized that the problem wasn&rsquo;t with my code &ndash; it was with the way Capybara works.  I want to save you the time I lost, so let&rsquo;s get to it.</p>

<p>Capybara, to quote its creator <a href="https://github.com/jnicklas">Jonas Nicklas</a>, &ldquo;is ridiculously good at waiting for content.&rdquo;  It knows that when it&rsquo;s told to find something on the page, or click a link, and it&rsquo;s not there, don&rsquo;t sweat it &ndash; just keep trying until a default timeout (<code>Capybara.default_wait_time</code>) is hit.  When, and only when, that timeout is hit, Capybara will give you an <code>ElementNotFound</code> error.</p>

<p>This works great for most use cases.  However, sometimes it just isn&rsquo;t enough.  Let&rsquo;s illustrate with a real-world example.</p>

<!-- More -->


<h3>The Case</h3>

<p>In my situation, we were working with <a href="https://github.com/bernat/best_in_place">the <code>best_in_place</code> gem</a>, a jQuery library which allows in-place editing of a model&rsquo;s attributes.  We were providing users with an Edit button which would turn the text into a textarea, and a Save button to save changes.</p>

<p>So we wrote a test where the text is edited once, saved, and then edited again.  The first time, no problems.  The second time, though, Capybara failed every time with an <code>ElementNotFound</code> error.  The textarea just wasn&rsquo;t there.  After lots of code changes, fancy debugging techniques, etc., the problem wasn&rsquo;t presenting itself.</p>

<p>Here&rsquo;s the issue, when we finally figured it out: We were replacing the element on the page after the AJAX call to update the model on the server successfully completed.  It turns out that <code>best_in_place</code> has a <code>data-activator</code> attribute, defining a DOM selector for the activator element (in this case, the Edit Button), which is used only once, when <code>$(editableElement).best_in_place()</code> is called.  This adds an event listener for a click on the activator.</p>

<p>When the element is replaced, then, we need to call <code>$(editableElement).best_in_place()</code> again to activate the activator (since the editable element, and the activator itself, have been replaced).  Failing to do so would mean that the item could be edited once, and never edited again!  There&rsquo;s our problem!</p>

<p>But wait &ndash; we <em>were</em> calling <code>$(editableElement).best_in_place()</code> again, and spinning up a Rails server showed that when I tried it in the browser, it all worked!  So what gives?</p>

<p>TL;DR (on the last few paragraphs) &ndash; everything was being done right, and Capybara was still failing.</p>

<h3>The Explanation</h3>

<p>It turns out that Capybara is really good at waiting for an element to appear, but doesn&rsquo;t wait for elements to change.  So while <code>$(editableElement).best_in_place()</code> was still running, Capybara already clicked the element and moved on.  Not surprisingly, the element hadn&rsquo;t had the click handler bound to it yet, so the textarea never appeared.</p>

<p>The fix was a method introduced in Capybara 2 called <code>#synchronize</code>.  It&rsquo;s documented <a href="http://rubydoc.info/github/jnicklas/capybara/Capybara/Node/Base:synchronize">here</a>.  This is how I used it:
<code>ruby
page.document.synchronize do
  element.find("a.edit-link").click
  textarea = element.find "textarea"
end
</code>
The call to <code>#synchronize</code> tells Capybara to run the block but catch certain errors, including an <code>ElementNotFound</code> error.  If there is an error, it will run the block again from the top.  So in this case when it fails to find the textarea, it will click the link again and see if the textarea appears this time.  This cycle will continue until the block completes without errors, or the global Capybara timeout is reached.</p>

<p>When I added the block, the test passed.  Presto!</p>

<h3>A Word of Caution</h3>

<p>Before you go out and start using <code>#synchronize</code> all over your code, however, a warning is in order.  Capybara is really good at waiting for elements to appear, and waiting for AJAX has better solutions than <code>#synchronize</code>.  (See <a href="https://github.com/jnicklas/capybara#asynchronous-javascript-ajax-and-friends">the official Capybara documentation</a> for built-in functionality, and <a href="http://robots.thoughtbot.com/automatically-wait-for-ajax-with-capybara">this helpful Thoughtbot post</a> for how to avoid race conditions.)  So <code>#synchronize</code> is really for situations like this, where you have an element on the page which Capybara can find, but it takes a moment for it to gain the functionality you need &ndash; and, since Capybara browses way faster than you can, it interacts with that element just a bit too early.</p>

<p>The downside to <code>#synchronize</code> is that it introduces another point where Capybara tests can stall before failing, and it can mask a bad UX where JS that enables elements takes too long to work.  I&rsquo;d generally recommend avoiding the use of <code>#synchronize</code> until you hit a wall and the existing Capybara magic doesn&rsquo;t quite cut it.  And if you do use <code>#synchronize</code>, open up the browser, and make sure the real-life UX is fast enough that your users don&rsquo;t hit some kind of unexpected behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Stay Classy With Ruby Variables]]></title>
    <link href="http://amcaplan.ninja/blog/2014/05/29/how-to-stay-classy-with-ruby-variables/"/>
    <updated>2014-05-29T18:09:56-04:00</updated>
    <id>http://amcaplan.ninja/blog/2014/05/29/how-to-stay-classy-with-ruby-variables</id>
    <content type="html"><![CDATA[<p>Ruby provides a number of options for non-instance-specific variables &ndash; class variables (of the form: <code>@@var</code>), constants (in all caps: <code>VAR</code>), and class instance variables (<code>@var</code>).  Which one to use depends on the use case, and to some degree on personal preference.  Let&rsquo;s explore this a bit.</p>

<p>Constants are meant to be &ndash; well, constant.  This is not technically enforced in Ruby; if you redefine a constant during program execution, it will display a warning, but not actually raise an error.  However, the semantic idea of a constant is that it should be defined once and not touched again. Variables, on the other hand, are variable.  They record a particular state that is likely to be redefined at some future point in time.</p>

<p>Now let's examine some use cases and see where things start to get tricky.  To make things fun, let&rsquo;s go to the zoo!</p>

<!-- more -->


<p>In this case, I have an <code>Animal</code> class, which will be at the top of the hierarchy and have animal classes that descend from it.  Here are my requirements:</p>

<p>1) Since most of my animals are quadrupeds, I decide it makes sense for the class&rsquo;s instances to default to 4 legs, and any subclass (let&rsquo;s say <code>Octopus</code>) with a difference number of legs should change the default.</p>

<p>2) Both the <code>Animal</code> class and the individual animal-type classes should keep track of how many of each type of animal exists, so I can check <code>Animal.all</code> or <code>Octopus.all</code>.</p>

<p>Let&rsquo;s get to work.  Following Sandi Metz&rsquo;s recommendation, we&rsquo;re going to build an <code>Animal</code> parent class with a post-initialization hook.  Hence, the <code>Animal</code> class&rsquo;s initialize method will append the new item to an animals array, and then call an <code>after_initialize</code> method which will be accessible to the child classes.  We&rsquo;ll start with just 2 animal types, octopus and llama:</p>

<p>``` ruby
class Animal
  @@animals = []
  @@legs = 4</p>

<p>  def initialize(args={})</p>

<pre><code>@@animals &lt;&lt; self
after_initialize(args)
</code></pre>

<p>  end</p>

<p>  def after_initialize(args)
  end</p>

<p>  def legs</p>

<pre><code>@@legs
</code></pre>

<p>  end</p>

<p>  def self.all</p>

<pre><code>@@animals
</code></pre>

<p>  end
end</p>

<p>class Octopus &lt; Animal
  @@octopi = []
  @@legs = 8</p>

<p>  def after_initialize(args={})</p>

<pre><code>@@octopi &lt;&lt; self
</code></pre>

<p>  end</p>

<p>  def self.all</p>

<pre><code>@@octopi
</code></pre>

<p>  end
end</p>

<p>class Llama &lt; Animal
  @@llamas = []</p>

<p>  def after_initialize(args={})</p>

<pre><code>@@llamas &lt;&lt; self
</code></pre>

<p>  end</p>

<p>  def self.all</p>

<pre><code>@@llamas
</code></pre>

<p>  end
end</p>

<p>Llama.new.legs # => 8
```</p>

<p>Hmmmmmm, not exactly what we wanted.  How did we end up with an 8-legged llama?</p>

<p><a href="https://amcaplan.files.wordpress.com/2014/05/8legllamab.jpg"><img src="http://amcaplan.files.wordpress.com/2014/05/8legllamab.jpg?w=245" alt="8-legged llama" /></a></p>

<p>Well, it turns out that Ruby class variables don&rsquo;t play very nicely with inheritance.  Essentially, they are shared by any class in an inheritance chain.  So when we defined <code>@@legs</code> in <code>Octopus</code>, it changed <code>@@legs</code> in <code>Animal</code> and, by extension, <code>@@legs</code> in <code>Llama</code>.  (Technically, if <code>Animal</code> doesn&rsquo;t define a class variable, <code>Llama</code> and <code>Octopus</code> won&rsquo;t share that variable.  But going down that path is just begging for trouble, because you never know when someone down the road will add <code>@@legs</code> to Animal and open up a huge can of worms.)  I have heard this described as &ldquo;leaky inheritance,&rdquo; though I have yet to see it in writing.</p>

<p>Class variables, it seems, are really best for situations when you want to have each member of an inheritance hierarchy to be able to access the same variable.  That might be useful for configuration.  For example, let&rsquo;s say each animal has a speak method which it defines, and it can speak verbosely or concisely (for a <code>Dog</code>, &ldquo;WOOF!  WOOF WOOF WOOF!&rdquo; vs &ldquo;WOOF!&rdquo;).  Perhaps we want to change one setting in <code>Animal</code> and have that apply to all animals.  In that case, we would do something like this (irrelevant code removed for now):</p>

<p>``` ruby
class Animal
  @@config = {}</p>

<p>  def self.config</p>

<pre><code>@@config
</code></pre>

<p>  end</p>

<p>  def speak</p>

<pre><code>if self.class.config[:verbose] == true
  verbose_speech
else
  brief_speech
end
</code></pre>

<p>  end</p>

<p>  def verbose_speech</p>

<pre><code>''
</code></pre>

<p>  end</p>

<p>  def brief_speech</p>

<pre><code>''
</code></pre>

<p>  end
end</p>

<p>class Dog &lt; Animal
  def verbose_speech</p>

<pre><code>"WOOF! WOOF WOOF WOOF!"
</code></pre>

<p>  end</p>

<p>  def brief_speech</p>

<pre><code>"WOOF!"
</code></pre>

<p>  end
end</p>

<p>Dog.new.speak # => &ldquo;WOOF!&rdquo;
Animal.config[:verbose] = true
Dog.new.speak # => &ldquo;WOOF! WOOF WOOF WOOF!&rdquo;
```</p>

<p>So that works great.  But we need to do something about <code>@@legs</code>.  So here&rsquo;s the next option, which works well.  Let&rsquo;s change <code>@@legs</code> to a constant, <code>LEGS</code>:</p>

<p>``` ruby</p>

<h1>IRRELEVANT CODE FOR THIS EXAMPLE HAS BEEN REMOVED</h1>

<p>class Animal
  LEGS = 4</p>

<p>  def legs</p>

<pre><code>self.class::LEGS
</code></pre>

<p>  end
end</p>

<p>class Octopus &lt; Animal
  LEGS = 8
end</p>

<p>class Llama &lt; Animal
end</p>

<p>Octopus.new.legs # => 8
Llama.new.legs # => 4
```</p>

<p><em>Note how we now access <code>LEGS</code> as <code>self.class::LEGS</code>.  This is critical.  If we accessed it as <code>LEGS</code> without adding <code>self.class::</code>, we would be referencing the <code>LEGS</code> variable in the scope where the method was defined, i.e. <code>Animal</code>.  Instead, we tell the method to reference <code>LEGS</code> as it is defined within the scope of the current class.</em></p>

<p>Alright, we&rsquo;ve taken care of legs, but let&rsquo;s consider another issue.  What about our tallying object?  Right now, <code>Animal</code> has an <code>@@animals</code> variable which contains all the animals in our zoo.  This presents 2 problems:</p>

<p>1) What if a later programmer decides to call the container <code>@@animals</code> in the <code>Elephant</code> class?  Suddenly we&rsquo;ve entered a world of hurt.</p>

<p>2) On a more fundamental level &ndash; does it make sense for <code>Octopus</code> to have access to <code>@@animals</code>, even theoretically?  It should be blissfully unaware of the <code>Lion</code>s and <code>Tiger</code>s and <code>Bear</code>s throughout the zoo, and just know about the 8-legged ocean critters.  How can we make this happen?</p>

<p>We can solve problem 1 by simply replacing the array <code>@@animals</code> with a constant, <code>ANIMALS</code>.  Hence, subclasses that define their own array of animals won&rsquo;t generate a conflict.  However, despite seeing others advocate for it, I don&rsquo;t like that solution either, for 3 reasons:</p>

<p>1) Now we have a different problem.  If the designer of the <code>Elephant</code> class neglects to define an <code>ANIMALS</code> constant but still adds to the <code>ANIMALS</code> array, the parent class&rsquo;s array will be affected.  This may be difficult to debug.</p>

<p>2) It&rsquo;s true that Ruby doesn&rsquo;t complain about changing the contents of a constant array, because the object hasn&rsquo;t been fundamentally redefined.  That doesn&rsquo;t mean it&rsquo;s the right thing to do.  Others will disagree (and in fact Rails apparently does this all the time), but I maintain that constants should be constant and predictable.</p>

<p>3) Constants are easily accessible from outside the class.  Now, I know that everything in Ruby, even private methods, is accessible, but there&rsquo;s a semantic point here.  Where in the Ruby core classes do you find constants?  My first thought is in the <code>Math</code> module, which contains the constants <code>PI</code> and <code>E</code>.  In other words, constants are meant to be values which are definitional to the class and/or should never change once defined.  <code>PI</code> and <code>E</code> are not going anywhere.  Similarly, it makes sense to say that <code>Llama::LEGS</code> is 4 and <code>Octopus::LEGS</code> is 8, since those are attributes that should apply in all but the most exceptional cases.  (My apologies to Larry the 3-legged llama.)</p>

<p>The animals array, on the other hand, is not at all fundamental.  It&rsquo;s a variable that is changed frequently, and should be associated with the class, but not easily accessible from outside, and not shared with subclasses.</p>

<p>So what&rsquo;s the right answer?  Well, let&rsquo;s remind ourselves for a moment that everything in Ruby is an object.  It turns out that even classes are objects &ndash; instances of the <code>Class</code> class.  (Sidebar: if you want to really warp your brain, enter <code>Class.class</code> into IRB.  Yep, <code>Class</code> is an instance of itself!  Mind blown.)  So if classes are instances, surely they have instance variables, right?  Yes, they do.  And we can use them to implement a safe working version of our animals array!</p>

<p>``` ruby</p>

<h1>IRRELEVANT CODE EXCISED</h1>

<p>class Animal
  @animals = []
  def self.animals</p>

<pre><code>@animals
</code></pre>

<p>  end</p>

<p>  def initialize(args={})</p>

<pre><code>Animal.animals &lt;&lt; self
after_initialize(args)
</code></pre>

<p>  end</p>

<p>  def after_initialize(args)
  end</p>

<p>  def self.all</p>

<pre><code>self.animals
</code></pre>

<p>  end
end</p>

<p>class Lion &lt; Animal
  @animals = []</p>

<p>  def after_initialize(args)</p>

<pre><code>self.class.animals &lt;&lt; self
</code></pre>

<p>  end
end</p>

<p>Lion.new
Animal.all # => [#&lt;Lion:0x0000010187de60>]
Animal.all.object_id # => 2160486800
Lion.all # [#&lt;Lion:0x0000010187de60>]
Lion.all.object_id # => 2160342160
```</p>

<p>Note that this was a bit tricky.  We had to define a getter method for the animals array.  If we have a number of such variables, we would probably be best off using <code>attr_accessor</code>, but the call to <code>attr_accessor</code> has to be within the context of a <code>class &lt;&lt; self ... end</code> (singleton class) block.</p>

<p>On the other hand, we&rsquo;ve essentially established the animal-tracking system in the parent class, and we can take advantage of it in children by giving each its own <code>@animals</code> array as a class instance variable.</p>

<p>Alright, dear readers.  The time has come to leave you with the final, comprehensive version of our zoo.  Just don&rsquo;t feed the animals!</p>

<p>``` ruby
class Animal
  @animals = []
  LEGS = 4</p>

<p>  class &lt;&lt; self</p>

<pre><code>attr_reader :animals
alias :all :animals
</code></pre>

<p>  end</p>

<p>  def initialize(args={})</p>

<pre><code>Animal.animals &lt;&lt; self
after_initialize(args)
</code></pre>

<p>  end</p>

<p>  def after_initialize(args)
  end</p>

<p>  def legs</p>

<pre><code>self.class::LEGS
</code></pre>

<p>  end
end</p>

<p>class Octopus &lt; Animal
  @animals = []
  LEGS = 8</p>

<p>  def after_initialize(args={})</p>

<pre><code>self.class.animals &lt;&lt; self
</code></pre>

<p>  end
end</p>

<p>class Llama &lt; Animal
  @animals = []</p>

<p>  def after_initialize(args={})</p>

<pre><code>self.class.animals &lt;&lt; self
</code></pre>

<p>  end
end</p>

<p>Octopus.new.legs # => 8
Llama.new.legs # => 4
Animal.all # => [#&lt;Octopus:0x000001010ef220>,#&lt;Llama:0x000001010a6868>]
Octopus.all # => [#&lt;Octopus:0x000001010ef220>]
Llama.all # => [#&lt;Llama:0x000001010a6868>]
```</p>

<p>As always, comments and thoughts are most welcome.  Stay classy, Rubyists!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript 101]]></title>
    <link href="http://amcaplan.ninja/blog/2014/05/01/coffeescript-101/"/>
    <updated>2014-05-01T19:40:43-04:00</updated>
    <id>http://amcaplan.ninja/blog/2014/05/01/coffeescript-101</id>
    <content type="html"><![CDATA[<p>&ldquo;CoffeeScript, c'mon and/ take a sip, they call it/ CoffeeScript, Coff-&rdquo;</p>

<p>- oh, sorry, didn&rsquo;t see you there! I was just humming the jingle from <a href="https://www.codeschool.com/courses/coffeescript">CodeSchool&rsquo;s CoffeeScript course</a>. Been working on it for a few days. I&rsquo;ve never been a huge fan of the brown caffeinated stuff, but CoffeeScript? I&rsquo;m addicted.</p>

<p>CoffeeScript is described by its creator, Jeremy Ashkenas, as &ldquo;a little language that compiles into JavaScript.&rdquo; Here&rsquo;s how I would describe it: &ldquo;JavaScript is written to give you a brain hemorrhage. CoffeeScript is more like a mild migraine.&rdquo;</p>

<!-- more -->


<p>Essentially, CoffeeScript is a language that compiles 1-to-1 to JavaScript, but is more clear and less error-prone. Forget the dreaded <code>var</code> keyword; it has no place in the wonderful world of CoffeeScript, because it&rsquo;s added automatically.  I like semicolons in English sentences; however, in the world of JavaScript, it&rsquo;s difficult to remember every semicolon.  Thankfully, Automatic Semicolon Insertion will usually take care of it, but it can lead to unexpected results.  With CoffeeScript, no more semicolons!  And those pesky braces (<code>{}</code>) appearing all over the place?  Gone!</p>

<p>Now, some would say, &ldquo;Hey, what are you doing with my beautiful JavaScript?  It was so precise, so explicit!&rdquo;  I would tell them to go try Ruby and understand that <code>extraBoilerplate !== greaterPrecision</code> (I wrote that in JS so they would understand).  Or, as you would write it in CoffeeScript, <code>extraBoilerplate isnt greaterPrecision</code>.  (Yes, the &lsquo; was left out of isnt on purpose &ndash; that&rsquo;s how it&rsquo;s spelled in CoffeeScript.)</p>

<p>Just to demonstrate how awesome CoffeeScript is, I&rsquo;m going to write the rest of this post in CoffeeScript to show that it&rsquo;s really much simpler.</p>

<p>``` coffeescript coffeescript_demo.js.coffee
class Reader
  inAttendance: yes
  payAttention: &ndash;></p>

<pre><code>alert 'Wake up and pay attention!'
</code></pre>

<p>you = new Reader
you.payAttention()</p>

<p>class DemoOfCoolThingsAboutCoffeeScript</p>

<p>  functions: &ndash;></p>

<pre><code>console.log 'As you can see, functions are defined without ' +
'"function()" or "{}"s. Just a simple "-&gt;" - but make sure' +
' to keep track of your indentations!'
</code></pre>

<p>  classes: &ndash;></p>

<pre><code>console.log 'It has classes. No more awkward JS inheritance!'
</code></pre>

<p>  punctuation: &ndash;></p>

<pre><code>console.log "Have you noticed that I've been leaving out commas" +
" and semicolons and braces? Indentation is way more natural..." +
"\nAlso, see how parentheses are unnecessary on the " +
"outermost function call?"
</code></pre>

<p>  splats: (params&hellip;)&ndash;></p>

<pre><code>console.log "I can splat arguments, in both function definitions " +
"and function calls. In this case, I used #{params.length} params." +
" Oh, did we mention string interpolation?"
</code></pre>

<p>  conditionals: &ndash;></p>

<pre><code>switchVar = on
if switchVar
  @showHowThisWorks(yes)
else
  console.log 'The switch is off!'
</code></pre>

<p>  showHowThisWorks: (comingFromSwitch&hellip;)&ndash;></p>

<pre><code>if comingFromSwitch[0]
  console.log 'This function was called from switch using "@", ' +
  'which is a handy substitute for "this"'
</code></pre>

<p>  makingObjects: &ndash;></p>

<pre><code>aboutMe =
  name: "Ariel Caplan"
  twitter: "@amcaplan"
  field: "software development"
  enjoysLongWalksOnTheBeach: yes
if aboutMe.enjoysLongWalksOnTheBeach
  console.log "#{aboutMe.name}, what is this, a personals ad?"
else
  console.log "#{aboutMe.name}, do you have no heart?"
</code></pre>

<p>  implicitReturns: &ndash;></p>

<pre><code>returningFunction = -&gt;
  "Hey, I never explicitly returned anything! How did you get this string?"
console.log returningFunction()
</code></pre>

<p>  runEverything: &ndash;></p>

<pre><code>@[propName]() for propName of this when propName isnt 'runEverything'
</code></pre>

<p>d = new DemoOfCoolThingsAboutCoffeeScript
d.runEverything()
```</p>

<p>Still JS-y syntax (it&rsquo;s just impossible to escape), but isn&rsquo;t it at least a bit clearer?</p>

<p>Hopefully this has been a pleasant little introduction to CoffeeScript.  You can run the code <a href="http://goo.gl/ixtsO7">on CoffeeScript&rsquo;s website here</a>.  (Click &ldquo;run&rdquo; on the top-right, and watch what happens in your console!)  And while you&rsquo;re there, read up on the language and all its features, try writing some of your own in the &ldquo;Try CoffeeScript&rdquo; modal, and maybe even take <a href="https://www.codeschool.com/courses/coffeescript">the CodeSchool course</a>.  You won&rsquo;t regret it!</p>

<p>P.S. Bonus extra life!!! Check out some real-life jQuery/CoffeeScript action in the code for the Flatiron Showcase website.  I have some simple DOM manipulation stuff that I just converted to CoffeeScript yesterday.  <a href="https://github.com/amcaplan/flatiron_showcase/blob/d952882068f13231cd3272a71f992ffcf3e25076/app/assets/javascripts/images.js.coffee">Check it out on Github!</a></p>
]]></content>
  </entry>
  
</feed>
