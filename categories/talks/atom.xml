<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: talks | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/talks/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2016-01-04T23:48:24+02:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Threads and Processes]]></title>
    <link href="http://amcaplan.ninja/Ruby/talks/2015/11/24/threads-and-processes/"/>
    <updated>2015-11-24T23:40:44+02:00</updated>
    <id>http://amcaplan.ninja/Ruby/talks/2015/11/24/threads-and-processes</id>
    <content type="html"><![CDATA[<p>This talk was given at RailsIsrael 2015.</p>

<p>Video from the conference will be posted after it is published.  In the
meantime, here are the slides:</p>

<script async class="speakerdeck-embed" data-id="9078d225f907475faf2c13bc3a41ea94" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<h4>Talk Description:</h4>

<p>Many of us use threads and/or processes in our code, whether explicitly or implicitly. But do we really understand what threads and processes are? Can we clearly evaluate the pros and cons of each? We will attempt to clarify these concepts in a simple, concise fashion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Your (Rails) Engines!]]></title>
    <link href="http://amcaplan.ninja/talks/2015/11/06/start-your-rails-engines/"/>
    <updated>2015-11-06T00:01:36+02:00</updated>
    <id>http://amcaplan.ninja/talks/2015/11/06/start-your-rails-engines</id>
    <content type="html"><![CDATA[<h3>The Talk</h3>

<p>This talk was given at RailsRemoteConf 2015.</p>

<p>Check out the <a href="https://speakerdeck.com/amcaplan/start-your-rails-engines-railsremoteconf-2015">SpeakerDeck</a>!  Video coming soon!</p>

<script async class="speakerdeck-embed" data-id="f1a29cab92da437284c27653a1525131" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>Want to split up your Rails app into pieces but not sure where to begin? Wish
you could share controller code among microservices but don&rsquo;t know how? Do you
work on lots of projects and have boilerplate Rails code repeated in each?</p>

<p>Rails Engines may be your answer.</p>

<p>We will build a simple Rails engine and understand how this app-within-an-app
architecture can help you write more modular code which can be gemified and
reused across multiple projects.</p>

<br /><br />


<h3>Following Along</h3>

<p>The video will be made public&hellip; eventually.</p>

<p>In the meantime, you can check out the code from the &ldquo;live code&rdquo; portion at
<a href="https://github.com/amcaplan/forget">https://github.com/amcaplan/forget</a> and
<a href="https://github.com/amcaplan/cacher">https://github.com/amcaplan/cacher</a>. I also
edited my notes from the live code portion, and published them at
<a href="https://gist.github.com/amcaplan/0841065fdb69966b860f">https://gist.github.com/amcaplan/0841065fdb69966b860f</a>.</p>

<p>For your convenience, here are the links from the talk.</p>

<br />


<h4>Links Throughout the Presentation</h4>

<p><a href="http://guides.rubyonrails.org/engines.html">http://guides.rubyonrails.org/engines.html</a></p>

<p><a href="https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L79">https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L79</a></p>

<p><a href="http://weblog.rubyonrails.org/2005/11/11/why-engines-and-components-are-not-evil-but-distracting/">http://weblog.rubyonrails.org/2005/11/11/why-engines-and-components-are-not-evil-but-distracting/</a></p>

<p><a href="http://article.gmane.org/gmane.comp.lang.ruby.rails/29166">http://article.gmane.org/gmane.comp.lang.ruby.rails/29166</a></p>

<p><a href="https://techblog.livingsocial.com/blog/2014/01/24/open-sourcing-with-rails-engines/">https://techblog.livingsocial.com/blog/2014/01/24/open-sourcing-with-rails-engines/</a></p>

<br />


<h4>Further information links</h4>

<p><a href="https://www.youtube.com/watch?v=MsRPxS7Cu_Q">GoGaRuCo 2012, Erik Michaels-Ober &ndash; “Writing a Rails Engine”</a></p>

<p><a href="http://blog.pivotal.io/labs/labs/leave-your-migrations-in-your-rails-engines">Ben Smith &ndash; “Leave your migrations in your Rails engines”</a></p>

<p><a href="https://www.youtube.com/watch?v=MsRPxS7Cu_Q">RailsConf 2015, Stephan Hagemann &ndash; “Get started with Component-based Rails applications!”</a></p>

<p><a href="http://tech.taskrabbit.com/blog/2014/02/11/rails-4-engines/">Brian Leonard, “Rails 4 Engines” (Blog post about splitting up an application)</a></p>

<p><a href="https://www.youtube.com/watch?v=uDaBtqEYNBo">Rocky Mountain Ruby 2013, Ben Smith &ndash; “How I architected my big Rails app for success!”</a></p>

<p><a href="http://blog.pivotal.io/labs/labs/migrating-from-a-single-rails-app-to-a-suite-of-rails-engines">Stephan Hagemann, “Migrating from a single Rails app to a suite of Rails engines”</a></p>

<p><a href="http://blog.pivotal.io/labs/labs/experience-report-engine-usage-that-didn-t-work">Will Read, “Experience Report: Engine Usage That Didn&rsquo;t Work”</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flag Your Features with Rollout and Degrade]]></title>
    <link href="http://amcaplan.ninja/talks/2015/01/14/flag-your-features-with-rollout-and-degrade/"/>
    <updated>2015-01-14T20:05:10+02:00</updated>
    <id>http://amcaplan.ninja/talks/2015/01/14/flag-your-features-with-rollout-and-degrade</id>
    <content type="html"><![CDATA[<p>Check out the <a href="https://speakerdeck.com/amcaplan/flag-your-features-with-rollout-and-degrade">SpeakerDeck</a>!  You can also read the
<a href="/blog/2015/01/18/feature-flags-in-ruby-part-i-what-and-why/">three</a> <a href="/blog/2015/01/18/feature-flags-in-ruby-part-ii-how-and-where/">blog</a>
<a href="/blog/2015/01/19/feature-flags-in-ruby-part-iii-who-automate-feature-flipping/">posts</a> I wrote about feature flags.</p>

<script async class="speakerdeck-embed" data-id="de78df307d8c0132f67712a273297520" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>In light of James Golick&rsquo;s recent untimely passing, here&rsquo;s a brief overview of <a href="https://github.com/FetLife/rollout">rollout</a> and <a href="https://github.com/jamesgolick/degrade">degrade</a>, 2 gems which provide a simple interface for dynamic activation and deactivation of your app&rsquo;s features. We&rsquo;ll discuss why we might want to use feature flags and how to implement them using James' gems.</p>

<p>Links:</p>

<!-- more -->


<p><a href="https://github.com/jamesgolick/degrade/blob/master/lib/degrade.rb#L12-L20">https://github.com/jamesgolick/degrade/blob/master/lib/degrade.rb#L12-L20</a>
<a href="https://news.ycombinator.com/item?id=8804624">https://news.ycombinator.com/item?id=8804624</a>
<a href="https://medium.com/@benkaufman/remembering-james-golick-23c1dc3ab920">https://medium.com/@benkaufman/remembering-james-golick-23c1dc3ab920</a>
<a href="https://medium.com/@jill380/the-adventurous-life-of-james-golick-bda4a33137b6">https://medium.com/@jill380/the-adventurous-life-of-james-golick-bda4a33137b6</a></p>
]]></content>
  </entry>
  
</feed>
