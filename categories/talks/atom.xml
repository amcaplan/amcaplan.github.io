<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: talks | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/talks/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2016-12-26T00:54:44+02:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Better OpenStruct - RubyConf 2016]]></title>
    <link href="http://amcaplan.ninja/talks/2016/11/10/building-a-better-openstruct-rubyconf-2016/"/>
    <updated>2016-11-10T21:01:52+02:00</updated>
    <id>http://amcaplan.ninja/talks/2016/11/10/building-a-better-openstruct-rubyconf-2016</id>
    <content type="html"><![CDATA[<p>This talk was given at RubyConf 2016. It&rsquo;s an updated version of <a href="/talks/2016/09/16/building-a-better-openstruct/">the same talk from WindyCityRails 2016.</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2IbJFCbBnQk" frameborder="0" allowfullscreen></iframe>


<p>Here are the slides:</p>

<script async class="speakerdeck-embed" data-id="7ed494d4b4244f26a453c97aa9efc75d" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>




<br/>


<h4>Talk Description:</h4>

<p>OpenStruct, part of Ruby&rsquo;s standard library, is prized for its beautiful API. It provides dynamic data objects with automatically generated getters and setters. Unfortunately, OpenStruct also carries a hefty performance penalty.</p>

<p>Luckily, Rubyists have recently improved OpenStruct performance and provided some alternatives. We&rsquo;ll study their approaches, learning to take advantage of the tools in our ecosystem while advancing the state our community.</p>

<p>Sometimes, we can have our cake and eat it too. But it takes creativity, hard work, and willingness to question why things are the way they are.</p>

<h4>Link from the talk:</h4>

<p><a href="http://jamesgolick.com/2013/4/14/mris-method-caches.html">http://jamesgolick.com/2013/4/14/mris-method-caches.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Better OpenStruct - WindyCityRails 2016]]></title>
    <link href="http://amcaplan.ninja/talks/2016/09/16/building-a-better-openstruct/"/>
    <updated>2016-09-16T19:25:09+03:00</updated>
    <id>http://amcaplan.ninja/talks/2016/09/16/building-a-better-openstruct</id>
    <content type="html"><![CDATA[<p>This talk was given at WindyCityRails 2016.</p>

<p>Here&rsquo;s the official video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/Te4Q3Os5QUA" frameborder="0" allowfullscreen></iframe>


<p>And the slides:</p>

<script async class="speakerdeck-embed" data-id="a58b363d2b76458ea09bee059d5e34e5" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>




<br/>


<h4>Talk Description:</h4>

<p>OpenStruct, part of Rubyâ€™s standard library, is prized for its beautiful API. It provides dynamic data objects with automatically generated getters and setters. Unfortunately, OpenStruct also carries a hefty performance penalty.</p>

<p>Recently, Rubyists have tried various approaches to speed up OpenStruct or provide alternatives. We will study these attempts, learning how to take advantage of the tools in our ecosystem while advancing the state of the Ruby community.</p>

<p>Sometimes, we can have our cake and eat it too. But it takes creativity, hard work, and willingness to question why things are the way they are.</p>

<h4>Link from the talk:</h4>

<p><a href="http://jamesgolick.com/2013/4/14/mris-method-caches.html">http://jamesgolick.com/2013/4/14/mris-method-caches.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Is Your Brain on Ruby]]></title>
    <link href="http://amcaplan.ninja/talks/2016/05/05/this-is-your-brain-on-ruby/"/>
    <updated>2016-05-05T17:32:24+03:00</updated>
    <id>http://amcaplan.ninja/talks/2016/05/05/this-is-your-brain-on-ruby</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t technically a conference talk, just something I prepared for a lightning talk at RailsConf 2016.  Didn&rsquo;t end up giving the talk (they always sign up more people than they have time for), but this was so much fun I decided to make a 5-minute video and put it up online.  Enjoy!</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/hVrNnc26oTs" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding, Building, and Integrating Rails Engines]]></title>
    <link href="http://amcaplan.ninja/talks/2016/05/04/understanding-building-and-integrating-rails-engines/"/>
    <updated>2016-05-04T17:20:43+03:00</updated>
    <id>http://amcaplan.ninja/talks/2016/05/04/understanding-building-and-integrating-rails-engines</id>
    <content type="html"><![CDATA[<p>This workshop was given at RailsConf 2016.  The conference did not record workshops, so there&rsquo;s no video (though I intend to record one), but in the meantime, here are slides:</p>

<script async class="speakerdeck-embed" data-id="a3cf8b8781614ebda2ba10ec2186dc1f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<h4>Talk Description:</h4>

<p>Want to split up your Rails app into pieces but not sure where to begin? Wish you could share controller code among microservices but don&rsquo;t know how? Do you work on lots of projects and have boilerplate Rails code repeated in each?</p>

<p>Rails Engines may be your answer.</p>

<p>By building a simple Rails engine together, we will better understand how this app-within-an-app architecture can help you write more modular code, which can be gemified and reused across multiple projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Threads and Processes]]></title>
    <link href="http://amcaplan.ninja/talks/2015/11/24/threads-and-processes/"/>
    <updated>2015-11-24T23:40:44+02:00</updated>
    <id>http://amcaplan.ninja/talks/2015/11/24/threads-and-processes</id>
    <content type="html"><![CDATA[<p>This talk was given at RailsIsrael 2015.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/oDY-NDfzsxc" frameborder="0" allowfullscreen></iframe>


<p>And in case you don&rsquo;t have 5 minutes, here are the slides:</p>

<script async class="speakerdeck-embed" data-id="9078d225f907475faf2c13bc3a41ea94" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<h4>Talk Description:</h4>

<p>Many of us use threads and/or processes in our code, whether explicitly or implicitly. But do we really understand what threads and processes are? Can we clearly evaluate the pros and cons of each? We will attempt to clarify these concepts in a simple, concise fashion.</p>
]]></content>
  </entry>
  
</feed>
