<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: talks | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/talks/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2020-11-17T23:04:33+02:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Humble Hash]]></title>
    <link href="http://amcaplan.ninja/talks/2020/11/17/the-humble-hash/"/>
    <updated>2020-11-17T21:50:00+02:00</updated>
    <id>http://amcaplan.ninja/talks/2020/11/17/the-humble-hash</id>
    <content type="html"><![CDATA[<p>This talk was given at RubyConf 2020. Video coming soon&hellip;</p>

<p>Here are the slides:</p>

<script async class="speakerdeck-embed" data-id="01beebb4b73b41e7bbb6ceec645ec9d4" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>




<br />


<h4>Talk Description:</h4>

<p>Hashes seem simple. Set a key to a corresponding value, retrieve the value by key. What else is there to know?</p>

<p>A whole lot, it turns out! Ruby makes several surprising choices about how hashes work, which turn hashes into dynamic powerhouses of functionality.</p>

<p>We&rsquo;ll dive into how hashes work, understand how they form the groundwork for some extremely useful standard library utilities, and learn patterns to leverage the unparalleled versatility of the humble hash to write concise, performant, beautiful code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Stories We Tell Our Children]]></title>
    <link href="http://amcaplan.ninja/talks/2019/05/01/the-stories-we-tell-our-children/"/>
    <updated>2019-05-01T20:00:00+03:00</updated>
    <id>http://amcaplan.ninja/talks/2019/05/01/the-stories-we-tell-our-children</id>
    <content type="html"><![CDATA[<p>This talk was given as a keynote at RailsConf 2019. Here&rsquo;s the video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/XKqvtAxGQOs" frameborder="0" allowfullscreen></iframe>


<p>And the slides:</p>

<script async class="speakerdeck-embed" data-id="4bcfdb16ac3840cb96c8844050d11a68" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>




<br/>


<h4>Talk Description:</h4>

<p>Every society has its own stories, which draw on the specific characteristics of
that group of people and speak to their emotional underpinnings. We might not
even notice it in our own surroundings, but it becomes quite apparent when
studying the literature of other cultures.</p>

<p>In that vein, we&rsquo;ll examine several Israeli children&rsquo;s classics, seeing how they
reflect the unique history and culture of the country. Reflecting upon that
example, we&rsquo;ll think about what aspects of the Ruby community are reflected in
the stories we tell the next generation, and which missing stories need to be told.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Empathy: Test Your Docs with Swagger and Apivore]]></title>
    <link href="http://amcaplan.ninja/talks/2018/04/19/automating-empathy-test-your-docs-with-swagger-and-apivore/"/>
    <updated>2018-04-19T22:40:00+03:00</updated>
    <id>http://amcaplan.ninja/talks/2018/04/19/automating-empathy-test-your-docs-with-swagger-and-apivore</id>
    <content type="html"><![CDATA[<p>This talk was given at RailsConf 2018.  For a pared-down text version of the
talk, see <a href="/blog/2016/12/27/automating-empathy-test-your-documentation-with-swagger-and-apivore/">this post</a>.
For the real thing, here&rsquo;s the video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/lqPZdvg49GU" frameborder="0" allowfullscreen></iframe>


<p>And the slides:</p>

<script async class="speakerdeck-embed" data-id="444eff9d3022491589ff0eebdb141ffd" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>




<br/>


<p>P.S. If you happen to subscribe to RubyTapas, you can also check out a brief,
more technical take on the same material in my
<a href="https://www.rubytapas.com/2018/05/21/automating-empathy-ariel-caplan/">guest episode</a>!</p>

<h4>Talk Description:</h4>

<p>Ugh, documentation.</p>

<p>It&rsquo;s the afterthought of every system, scrambled together in the final days
before launch, updated sparingly, generally out of date.</p>

<p>What if we could programmatically verify that our API documentation was
accurate? What if this helped us build more intuitive APIs by putting our users
first? What if documentation came first, and helped us write our code?</p>

<p>With Swagger and Apivore as our weapons of choice, we&rsquo;ll write documentation
that will make your APIs better, your clients more satisfied, and you happier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Comes After SOLID? Seeking Holistic Software Quality]]></title>
    <link href="http://amcaplan.ninja/talks/2017/04/25/what-comes-after-solid-seeking-holistic-software-quality/"/>
    <updated>2017-04-25T22:40:00+03:00</updated>
    <id>http://amcaplan.ninja/talks/2017/04/25/what-comes-after-solid-seeking-holistic-software-quality</id>
    <content type="html"><![CDATA[<p>This talk was given at RailsConf 2017.  For a pared-down text version of the
talk, see <a href="/blog/2017/05/17/the-3-keys-to-software-quality/">this post</a>.  For
the real thing, here&rsquo;s the video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/5wYcD1nfnWw" frameborder="0" allowfullscreen></iframe>


<p>And the slides:</p>

<script async class="speakerdeck-embed" data-id="13c5b841f7114d6ca8155dfabb1a9f93" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>




<br/>


<h4>Talk Description:</h4>

<p>You care deeply about code quality and constantly strive to learn more. You
devour books and blogs, watch conference talks, and practice code katas.</p>

<p>That&rsquo;s excellent! But immaculately factored code and clean architecture alone
won&rsquo;t guarantee quality software.</p>

<p>As a developer, your job isn&rsquo;t to write Good Code. It&rsquo;s to deliver value for
people. In that light, we&rsquo;ll examine the effects of a host of popular coding
practices. What do they accomplish? Where do they fall short?</p>

<p>We&rsquo;ll set meaningful goals for well-rounded, high-quality software that solves
important problems for real people.</p>

<h4>Exercise from the talk:</h4>

<p>Download the exercise as a <a href="/assets/railsconf-2017/exercise.pdf">PDF</a>,
<a href="/assets/railsconf-2017/exercise.key">Keynote</a>, or
<a href="/assets/railsconf-2017/exercise.pptx">PowerPoint</a> file.</p>

<h4>Talk Errata:</h4>

<p>Reflecting afterwards, I noticed a few mistakes I made in the presentation, and
would like to note them here:</p>

<ol>
<li>I confused <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic Complexity</a>
with the <a href="https://en.wikipedia.org/wiki/ABC_score">ABC (Assignments, Branching, and Conditionals)</a>
metric.  Branching is very similar to cyclomatic complexity, but technically
<a href="http://wiki.c2.com/?AbcMetric">ABC is a software size metric, not a complexity metric</a>,
and it encompasses more than cyclomatic complexity.</li>
<li>I mentioned <a href="http://ruby.sadi.st/Flay.html">Flay</a> when I had intended to
reference <a href="http://ruby.sadi.st/Flog.html">Flog</a>; the former is a tool for
locating duplication, while the latter is actually a measure of ABC in Ruby.</li>
<li>Code Review is generally done after checking code into source control; the
intention was that it&rsquo;s done before code is moved into the main (master) branch
of a central repository.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Better OpenStruct - RubyConf 2016]]></title>
    <link href="http://amcaplan.ninja/talks/2016/11/10/building-a-better-openstruct-rubyconf-2016/"/>
    <updated>2016-11-10T21:01:52+02:00</updated>
    <id>http://amcaplan.ninja/talks/2016/11/10/building-a-better-openstruct-rubyconf-2016</id>
    <content type="html"><![CDATA[<p>This talk was given at RubyConf 2016. It&rsquo;s an updated version of <a href="/talks/2016/09/16/building-a-better-openstruct/">the same talk from WindyCityRails 2016.</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2IbJFCbBnQk" frameborder="0" allowfullscreen></iframe>


<p>Here are the slides:</p>

<script async class="speakerdeck-embed" data-id="7ed494d4b4244f26a453c97aa9efc75d" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>




<br/>


<h4>Talk Description:</h4>

<p>OpenStruct, part of Ruby&rsquo;s standard library, is prized for its beautiful API. It provides dynamic data objects with automatically generated getters and setters. Unfortunately, OpenStruct also carries a hefty performance penalty.</p>

<p>Luckily, Rubyists have recently improved OpenStruct performance and provided some alternatives. We&rsquo;ll study their approaches, learning to take advantage of the tools in our ecosystem while advancing the state our community.</p>

<p>Sometimes, we can have our cake and eat it too. But it takes creativity, hard work, and willingness to question why things are the way they are.</p>

<h4>Link from the talk:</h4>

<p><a href="http://jamesgolick.com/2013/4/14/mris-method-caches.html">http://jamesgolick.com/2013/4/14/mris-method-caches.html</a></p>
]]></content>
  </entry>
  
</feed>
