<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/blog/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2018-04-20T16:52:45-04:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I Created Dev Empathy Book Club]]></title>
    <link href="http://amcaplan.ninja/blog/2017/09/14/why-i-created-dev-empathy-book-club/"/>
    <updated>2017-09-14T18:54:50-04:00</updated>
    <id>http://amcaplan.ninja/blog/2017/09/14/why-i-created-dev-empathy-book-club</id>
    <content type="html"><![CDATA[<p>I was just a few months out of the Flatiron School, had gotten my bearings in
the codebase at my first job, and was starting to take on more responsibility. I
was sitting with a product manager&mdash;let&rsquo;s call her Sierra&mdash;trying to
explain the technical impact of a product idea she had proposed. And I was
<em>frustrated</em>.</p>

<p>No matter which way I explained it, she just kept getting confused. Why couldn&rsquo;t
she understand that making these changes would drastically increase response
time on a critical endpoint? It was a simple workflow involving 2 microservices
and a NoSQL database, and she didn&rsquo;t even have to understand the details, just
how they were connected together on a high level.</p>

<p>At some point, I realized: No one had ever given Sierra any level of technical
explanation of the system whose development she was supposed to guide every day.
Instead of going further with the conversation, I asked, &ldquo;Why don&rsquo;t we set up a
meeting just to describe the basic outline of the system? Nothing overly
detailed, just enough to allow us to have a conversation about how product
concepts will impact the real-life product when they&rsquo;re translated into code.&rdquo;</p>

<p>To my surprise, she agreed. To my further astonishment, I actually enjoyed the
meeting more than any other I&rsquo;d had since beginning my software development
career. We slowly built up a diagram of the parts of the system relevant to her
job, clarified confusing points, and made sure every bit of explanation was
clear to her.</p>

<p>At the end of the meeting, Sierra thanked me and said, &ldquo;You know, no one&rsquo;s ever
done this for me. This is going to significantly improve my ability to come up
with ideas and communicate with developers. I&rsquo;d really like to understand more
about the technical elements of the project, but there never seem to be
opportunities for me to learn.&rdquo;</p>

<p>At that moment, I realized something that has become a theme in my career: The
most significant impact you can make on a product isn&rsquo;t through design, code,
marketing, sales, or customer support. It&rsquo;s building bridges, enabling people of
varied backgrounds and skills, each with their own perspectives and spheres of
understanding, to work together through effective communication.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 3 Keys to Software Quality]]></title>
    <link href="http://amcaplan.ninja/blog/2017/05/17/the-3-keys-to-software-quality/"/>
    <updated>2017-05-17T12:02:22-04:00</updated>
    <id>http://amcaplan.ninja/blog/2017/05/17/the-3-keys-to-software-quality</id>
    <content type="html"><![CDATA[<p>Why do software projects fail?</p>

<p>This question is difficult to answer precisely because there isn&rsquo;t a single
answer.  Sometimes the blame falls to technical debt which hamstrings
scalability, the ability to ship new features, or the ability to respond to
market demands.  Other times it&rsquo;s the lack of business model, which sinks the
entire company.  In certain situations, various parts of the organization not
seeing eye-to-eye is the culprit; the lack of shared vision causes sales to
over-promise, engineering to develop the wrong things, or marketing to pursue
the wrong strategy.</p>

<p>The causes are many and varied, yet somehow as engineers we focus a lot on &ldquo;Good
Code&rdquo; (however we choose to define it), which fails to address most of these
problems.  Why?</p>

<!-- more -->


<p>If I were to hazard a guess, I&rsquo;d say it&rsquo;s because we as technical people are
trained (or believe we are trained) to understand issues of Good Code more
easily than we can solve business challenges or organizational dysfunction.  As
humans, we tend to favor investing time in the problems we know how to solve
rather than the problems that most need careful solving (<a href="https://en.wikipedia.org/wiki/Law_of_triviality">Parkinson&rsquo;s Law of Triviality</a>).
Good Code is a problem we think we know how to solve, so we try to solve it and
forget about the larger questions that determine the success or failure of our
endeavors.</p>

<h3>What is Software Quality?</h3>

<p>Traditionally, we see the role of engineers as outputting high-quality software
that meets a particular need.  We then define &ldquo;high-quality&rdquo; in purely technical
terms.  This has to end.</p>

<p>The only point of writing software is to solve problems.  In the context of a
business, every bit of software writing should be meant to target one of three
fundamental problems every business faces:</p>

<ul>
<li>Generating Revenue (or, for a non-profit, doing good)</li>
<li>Lowering Costs</li>
<li>Reducing Risk</li>
</ul>


<p>For the remainder of this post, I&rsquo;ll include those 3 elements in the (badly
defined) term &ldquo;business value.&rdquo;  Other places on the internet may define
business value otherwise; that&rsquo;s fine, it&rsquo;s just for this post.</p>

<p>If the purpose of software is to generate business value, it stands to reason
that the quality of software is simply a matter of how much business value it
generates.  &ldquo;Is it high-quality?&rdquo; becomes a question of &ldquo;How fit is it for
purpose?&rdquo;</p>

<p>That definition will probably make a lot of engineers uncomfortable.  Isn&rsquo;t my
job to write code, and someone else can think about the business impact?</p>

<p>Sure, you could look at it that way.  But that means that the fundamental
question of whether your software is valuable&mdash;and, as I define it,
high-quality&mdash;rests in the hands of other people without your input.</p>

<p>So think of it this way: The more you involve yourself in understanding, and
maybe even influencing, the business elements of your project, the more
effective you&rsquo;ll be at creating the software your business/clients really need.</p>

<h3>A New Framework</h3>

<p>We do many things as engineers and as organizations to improve the quality of
our software.  I believe all these practices really target one or more of 3
primary objectives, which I term Usefulness, Sustainability, and Accuracy.
(You&rsquo;ll note that the acronym is USA.  No, I didn&rsquo;t choose the words for the
acronym, it sort of just happened.)  Let&rsquo;s define these terms a bit better:</p>

<ul>
<li><strong>Usefulness</strong> asks the question: &ldquo;Does the software solve the problem
effectively?&rdquo;  It requires verifying both that the problem we imagine actually
exists, and that our product solves the problem in the way that works best for
the users.</li>
<li><strong>Sustainability</strong> asks the question: &ldquo;Can we keep building without
unnecessary obstacles?&rdquo;  Certainly, we need to think about the software itself.
Is it written in a flexible way that will allow us to come back later and make
the changes we need?  We also need to think about the development team, which
likely undergoes far less churn than the code, and hence is even <em>more</em>
important to the sustainability of your product than the software itself.  Are
you building up the team to support constant improvement and open lines of
communication?  Does the team have any instability that threatens future
progress?</li>
<li><strong>Accuracy</strong> asks the question: &ldquo;Does our software work the way we think it
does?&rdquo;  It focuses on the relationship between ourselves and our code.  We must
make sure that we&rsquo;ve accurately understood the problem and the codebase, and as
new information comes in we must always ensure the state of the codebase
reflects the current state of our understanding.</li>
</ul>


<p>With these 3 major objectives in mind, let&rsquo;s get into the weeds a bit and think
about how they impact our day-to-day work.</p>

<h3>Making it Concrete</h3>

<p>Every team, project, and situation will have its own way of defining how various
practices support (or don&rsquo;t) the 3 objectives.  I&rsquo;ll just give a few examples of
practices that I&rsquo;ve found to be impactful on the teams where I&rsquo;ve worked.  Let&rsquo;s
start with a visual map of how I see things:</p>

<p><a href="http://amcaplan.ninja/images/USA_map_large.png" target="_blank"><img src="/images/USA_map.png" alt="Map of USA practices" /></a></p>

<p>Without getting into the gory details (though I did give <a href="/railsconf2017">a talk</a>
about that), here&rsquo;s a guide to interpreting that picture.</p>

<p>The blue circle on the bottom is probably easiest to understand.  It includes a
variety of practices designed to increase confidence that what&rsquo;s in your head
matches what&rsquo;s in the code.  This includes testing practices, programming
language features, tools and techniques for reducing complexity, and increasing
the number of programmers who see and interact with code before it&rsquo;s committed
and deployed.</p>

<p>The green circle on the top-right is about maintaining flexibility while
avoiding elements of instability.  Anything that makes it easier to build
without breaking things, creating a tangled mess, or backing yourself into a
corner (from a perspective of product development) goes there.  Also included
are practices that build the team, improve the skills of developers, and make it
easy (in the context of a larger organization) to interoperate with other teams
and/or move people across team boundaries.</p>

<p>The top-left red circle is about connecting our applications to their purpose.
Probably the most important piece is &ldquo;Focus on Delivering Value&rdquo;; all else can
be derived from it.  The red circle is populated by practices that help you
understand your users more effectively, keep their needs in mind as you code,
and do the most important work first.  There are elements of both making the
solution that works for them (researching their needs, making it performant) and
making the solution work for them (providing it when they need it, with
appropriate documentation, and the ability to find what they need).</p>

<p>One non-obvious (and likely controversial) thing is the fact that I&rsquo;ve put a
number of technical practices into the red circle.  I believe that when we have
multiple people working on code, or we explicitly document how a system is to be
used via integration testing, that helps us focus on the end value provided to
the user, at least opening up space for having conversations about the business
value created by our software.  I don&rsquo;t think we&rsquo;ve fulfilled our obligation to
the Usefulness objective just by doing those things, but they&rsquo;re a good start.</p>

<p>I&rsquo;ve also mentioned a few central practices, which are just my opinion (as is
the rest of this map):</p>

<ul>
<li>I believe having a broad-based <strong>testing</strong> strategy provides meaningful signal on
all 3, since it allows you to write correct code the first time, avoid breaking
it later, and&mdash;if you write proper integration tests&mdash;helps you to
keep user needs in mind.</li>
<li><strong>Pairing</strong> and <strong>mobbing</strong> help you write code with fewer mistakes, build the
team going forward, and provide space for conversations about the purpose of the
current task and how to best accomplish it.</li>
<li>The Single Responsibility Principle (<strong>SRP</strong>) is about making sure each part
of your system does one thing, and does it well.  This makes it easier to write
accurate code the first time; if the purpose is clearly defined, it&rsquo;s much
easier to test whether the code actually achieves it.  It&rsquo;s also easier to come
back later and make a change, since you know exactly what to change.  Finally,
focusing on the purpose of your code helps keep in mind the big picture of why
you&rsquo;re writing the code in the first place.</li>
<li><strong>Frequent releases</strong> allow you to deliver value more quickly to the user.  If
you think of value creation as represented by (<em>value created per time</em> ⨉ <em>time
software is in use</em>), it&rsquo;s clear that shipping value earlier beats later.
Frequent releases also allow you to find bugs more quickly (users are really
good at figuring out when your software is broken!) and avoid building castles
on top of flawed ideas you only find out are flawed months later (hence helping
Sustainability).</li>
</ul>


<p>Again, these are just my own opinions, based on my experiences with these
practices and how I&rsquo;ve seen them utilized on the teams I&rsquo;ve been part of.  Your
team will derive more or less, and different, benefit(s) from these same
practices, and that&rsquo;s normal and expected.</p>

<p>As an exercise, I&rsquo;ve made a blank version of the map available in
<a href="/assets/railsconf-2017/exercise.pdf">PDF</a>,
<a href="/assets/railsconf-2017/exercise.key">Keynote</a>, or
<a href="/assets/railsconf-2017/exercise.pptx">PowerPoint</a> form for you to fill out with
your own teams.  I&rsquo;d love to see how your maps stack up against mine!</p>

<h3>Bridging the Gap</h3>

<p>Bob Martin, citing Kent Beck, <a href="https://8thlight.com/blog/uncle-bob/2014/03/28/The-Corruption-of-Agile.html">wrote</a>
that the Agile Manifesto was intended &ldquo;to heal the divide between development
and business.&rdquo;  Unfortunately, 16 years later, that&rsquo;s nowhere near a solved
problem.</p>

<p>I believe that divide can be healed if we learn to speak a common language,
relating elements of technical excellence to meeting business needs, showing how
the things we care about as engineers are things everyone should care about.
That means going beyond our technical peers to understand the needs of other
parts of our organizations, and figuring out our role in meeting those needs.</p>

<p>If we learn to speak the language of business, just a little bit, we can expect
to see a lot more understanding and respect coming in the opposite direction,
from businesspeople to developers.  Maybe we&rsquo;ll even develop psychological
safety and trust.  Wouldn&rsquo;t that be great!</p>

<p>We&rsquo;re all in this together.  Let&rsquo;s start acting like it.</p>

<p><em>Note: Based on a talk given at RailsConf 2017. Check out the original
talk <a href="/railsconf2017">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on 8 Days of Blog Posts]]></title>
    <link href="http://amcaplan.ninja/blog/2017/01/01/reflections-on-8-days-of-blog-posts/"/>
    <updated>2017-01-01T05:09:02-05:00</updated>
    <id>http://amcaplan.ninja/blog/2017/01/01/reflections-on-8-days-of-blog-posts</id>
    <content type="html"><![CDATA[<p>I started the <a href="/blog/2016/12/25/8-crazy-blog-posts">8 Crazy Blog Posts Challenge</a>
as a way to stretch myself and get back in the habit of writing.  As in writing
software, blogging regularly is difficult when there&rsquo;s no pressure to ship.</p>

<p>It certainly got me to release more material than has been my recent practice,
but it&rsquo;s worth analyzing the process, the outcomes, and the cost.</p>

<!-- more -->


<h3>The Creative Process</h3>

<p>My usual blogging workflow (if such a thing can exist) looks something like
this:</p>

<ol>
<li>Wait for something to really interest or bother me</li>
<li>Let it simmer for a while as more complex ideas develop</li>
<li>Figure out what I want to say about it</li>
<li>When I have time, develop the ideas into the beginnings of a post</li>
<li>Sit on it some more</li>
<li>Come back to it eventually and finish the post</li>
<li>Edit heavily</li>
<li>Ship It</li>
</ol>


<p>This leads to a smaller number of (hopefully) high-quality writings worth
sharing.  In contrast, my workflow this week looked more like this:</p>

<ol>
<li>Freak out about an impending self-imposed deadline</li>
<li>Frantically brainstorm until coming up with an idea that seems worthwhile</li>
<li>Flesh out the idea as I write</li>
<li>Edit lightly</li>
<li>Ship It</li>
</ol>


<p>The result was a lot more content, but on occasion I wondered whether the stuff
I was publishing was worth reading.  Trying to be faithful to my arbitrary
commitment, I may have pushed through an idea that wasn&rsquo;t perfect, or wasn&rsquo;t
fully developed in my head yet.</p>

<p>Interestingly, though, I found that the very act of writing was less capturing
thoughts and more creating them.  Starting with just the nugget of a thought,
the experience of writing allowed the thought to develop into a full-blown
argument or hypothesis.</p>

<p>I know everyone writes differently.  Some people start with an outline, then
fill it in with details as they go.  I have never worked that way as long as I
can remember.  In elementary school, when teachers would ask for an outline as
the first step of an essay, I would hand in my outline, get it graded, then
throw it out and actually begin writing.  To me, the written word is a river; I
go where it flows.  My words and myself are partners in creativity, building
crude thoughts into concrete concepts and coherent frameworks.</p>

<p>Incidentally, this is also how I write poetry.  I don&rsquo;t have a destination in
mind; I write the first line, then the second, and let the words guide me
wherever they may.  Of course, in poetry and prose, there are editorial steps as
well, but those merely optimize the core of the idea as it stands when first
composed.</p>

<p>In truth, the artificial time pressure made room for a workflow more suited to
how I naturally write.  I&rsquo;m not in a place to judge the end product, of course.
I leave that as an exercise for you, dear reader.</p>

<h3>Outcomes</h3>

<p>I can&rsquo;t say whether or not my (small) audience did or didn&rsquo;t enjoy my posts.  I
can, however, comment on their more objective elements.</p>

<p>One easily quantifiable measure is the ratio of technical to non-technical
posts.  We can knock out the first, introductory post, as well as this one,
leaving us with 6 posts to analyze.</p>

<p><a href="/blog/2016/12/28/this-is-your-brain-on-ruby/">This Is Your Brain on Ruby</a> was
decidedly technical. <a href="/blog/2016/12/29/diversify-your-learning/">Diversify Your Learning</a>
and <a href="/blog/2016/12/31/how-to-give-a-great-tech-conference-talk/">How to Give a Great Tech Conference Talk</a>
were decidedly not.  The remaining 3 posts focused on the area where I&rsquo;m most
comfortable and (I think) most effective, namely the human side of technology.</p>

<p>Comparing this to the past, through mid-2015 I only wrote technical posts, then
I abruptly released 5 straight completely non-technical posts.  In that light,
this exercise was a recalibration for me, centering me between the purely human
and purely technical.</p>

<p>Another significant outcome for me was the ability to flesh out some back-burner
thoughts into ideas that I may now use to submit to conference CFPs.  Some of
the stuff I wrote about was never fully developed, and having this obligation
helped me to realize that there was significant depth where I hadn&rsquo;t perceived
any in the past.</p>

<p>One final note is in order.  I&rsquo;ll readily admit to being an attention seeker,
and this exercise brought out the worst in me in that regard.  I tweeted daily
about the experiment, and watched my Twitter notifications and Google analytics
to see if anyone noticed.</p>

<p>No one did. (Well, except for this
<a href="https://twitter.com/peterc/status/813033579982753793">really nice comment</a>
from Peter Cooper.)  And honestly, it kind of hurt.</p>

<p>Yes, I know it&rsquo;s a really busy time for the world.  People are with family, or
taking vacations, or whatever.  Somehow the logic part of my brain resented it
anyway.</p>

<p>So it became an opportunity to exercise discipline, and accept that I write all
this not because other people read it, but because it&rsquo;s worthwhile in itself.
Expressing my ideas, and staying accountable by doing so in public, allows me to
form a more concrete perception of who I am, and why I do what I do.  It also
allows me to turn on myself with a critial eye, and figure out whether I&rsquo;m
fooling myself into doing things that counter my self-interest or harm others.</p>

<p>It&rsquo;s not an easy lesson to learn, but maybe it was more valuable to me to have
my blog ignored than it would have been to have people reading and talking about
it.</p>

<h3>The Cost</h3>

<p>Wowee.  It&rsquo;s been a long week.</p>

<p>I started the challenge with 2 blog posts already written, 1 good idea, and the
knowledge that the final post would be a &ldquo;lessons learned&rdquo; exercise.  That left
6 posts to write, 4 of which needed ideas.  This is actually a pretty tall order
for someone like me, who tries to keep the content high-quality and valuable to
others.</p>

<p>Coming up with post ideas mostly happened while walking around, or otherwise
going about my daily business.  There was some dedicated brainstorming time, but
that wasn&rsquo;t too significant.</p>

<p>The real time sink was the writing process itself.  Writing and editing posts
could easily take 3-4 hours apiece, more if I needed to add some custom
JavaScript (as I did for the censoring functionality
<a href="/2016/12/28/this-is-your-brain-on-ruby/">here</a> to make blog readers, and
myself, more comfortable).  Those 3-4 hours needed to be highly focused, and I
would walk away feeling drained and needing a break.</p>

<p>It helped to have a lot of vacation time, and even working hours were pretty
relaxed since lots of people take vacation in the last week of December.  That
meant I had time even during work hours to be cranking out posts, though mostly
they were done during personal time.</p>

<p>Also not helpful: My 18-month-old got sick this week, sicker than she&rsquo;s ever
been.  Seeing your child with a temperature of 40℃ (that&rsquo;s 104℉ for you
imperialist Americans) is terrifying, and practically it forces you to drop
everything.  The worst of it lasted about 2 days, during which time I didn&rsquo;t get
much done in general.</p>

<p>I had hoped to stay ahead of the curve throughout the 8 days, always at least
one post ahead, but reality hit hard, and I ran out of headway by Friday.  I had
to crank out one post on Friday morning, and another on Saturday night.
(Anything computer-related is off-limits to me Friday evening through Saturday
evening, since that&rsquo;s the Jewish Sabbath.)  So I made it, I guess, but it was
down to the wire and quite stressful.</p>

<p>Even when I was ahead of the curve, I found myself staying up hours later than
usual just to get things done in time.  This made it much more difficult for me
to function throughout the day.</p>

<p>If I do something like this again, I realize I can&rsquo;t push myself this hard.
It&rsquo;s just not worth it.  Releasing a post a day could be fun in the future, but
I&rsquo;d want to have all, or nearly all, the posts ready well in advance.</p>

<h3>Concluding the Conclusion</h3>

<p>In the final calculus, I think it was a worthwhile experiment.  I paid a heavy
price in terms of stress, but it helped me to think of blogging as part of what
I normally do, and to find a more balanced voice with regard to the content of
my posts.</p>

<p>I hope this experiment will inspire me to keep growing as a writer, to keep
developing interesting ideas, and to share them with you, my readers.</p>

<p>Whenever you read this post, whether it be a day or a decade after I wrote it,
I hope you find its contents, and the products of this week&rsquo;s efforts, valuable
and interesting.  And I hope this week turns out to be the beginning of a very
productive 2017!</p>

<p><strong><em>Written as part of the 2016 <a href="/blog/2016/12/25/8-crazy-blog-posts">8 Crazy Blog Posts Challenge</a>.</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Give a Great Tech Conference Talk]]></title>
    <link href="http://amcaplan.ninja/blog/2016/12/31/how-to-give-a-great-tech-conference-talk/"/>
    <updated>2016-12-31T13:50:21-05:00</updated>
    <id>http://amcaplan.ninja/blog/2016/12/31/how-to-give-a-great-tech-conference-talk</id>
    <content type="html"><![CDATA[<p>People come to tech conferences for many reasons.  They want to hear about new
ideas and technologies, to be inspired with the latest and greatest of what the
programming community has to offer.</p>

<p>But once people are actually at a conference, especially a larger conference,
the number of things to do and to absorb can be overwhelming.  There are talks,
maybe even multiple talks at once, there&rsquo;s the hallway track, vendor booths, and
of course the great big world outside where people escape when they want a
break.  Everyone competes for attention, offering excitement, swag, fun hacking
activities, and/or the alluring prospect of job opportunities.</p>

<p>Then there&rsquo;s the new practice of posting talks online.  This opens up talks to
new audiences who couldn&rsquo;t make it, which is fantastic.  It also means that if
the community loves a talk, it could be see by thousands more people than were
at the conference!  The downside is that conference attendees may be more likely
to skip talks because they&rsquo;re all online later anyway, meaning that speakers
lose the opportunity to build off the speaker-audience interaction.</p>

<p>What&rsquo;s a speaker to do?</p>

<!-- more -->


<h3>One Core Principle</h3>

<p>I have to admit something upfront.  This post isn&rsquo;t really about how to give a
great conference talk per se.  It&rsquo;s about how to give a conference talk I&rsquo;m
going to want to watch.  And as a conference-goer, I want to watch a talk that
tells a coherent, interesting story.</p>

<p>The good news is that, according to science, the other attendees think the same
way.  Stories impact the brain in a truly wild fashion.</p>

<ul>
<li><a href="https://blogs.scientificamerican.com/guest-blog/it-is-in-our-nature-to-need-stories/">Stories match the way our not-always-logical brains think about the world</a>.</li>
<li><a href="https://blog.bufferapp.com/science-of-storytelling-why-telling-a-story-is-the-most-powerful-way-to-activate-our-brains">Stories activate many parts of the brain, involving our entire brain rather than just language centers.</a></li>
<li><a href="http://greatergood.berkeley.edu/article/item/how_stories_change_brain">We feel empathy for storytellers.</a></li>
<li><a href="https://www.theguardian.com/media-network/media-network-blog/2014/aug/28/science-storytelling-digital-marketing">We remember stories better than we remember facts.</a></li>
</ul>


<p>Of course, much of this makes sense if we reflect on our own lives.  When you
watch a movie, you worry about what will happen to the characters, even though
you know they&rsquo;re not real.  When a character is maimed or killed, you feel pain,
even though no one has hurt you.</p>

<p>When you read dry statistics about suffering, it probably doesn&rsquo;t motivate you
to action.  When you see a video with a tearful person describing some horror
they suffered&mdash;well, that&rsquo;s another matter entirely.  This is why charities
seeking donations rely mostly on monologue videos, stories, and even handwritten
thank-you letters, rather than facts and figures.
<a href="http://greatergood.berkeley.edu/article/item/how_stories_change_brain">Stories motivate people to act.</a></p>

<p>Think about how many religions don&rsquo;t have founding myths.  Can you think of any?
Me neither.  People don&rsquo;t dedicate their lives to ideals, noble though that may
sound.  A compelling story, though&hellip; now we&rsquo;re talking.</p>

<p>You want to give an interesting talk.  You want the conference attendees to
come, and you want the online crowd to hear out the whole talk, not leave the
video after 2 minutes.</p>

<p>You want your conference talk to make an impact.  You want people to remember it
and talk about it.  You want people to learn from it and apply your ideas in
their own lives.</p>

<p>Tell a story.</p>

<h3>Story Type 1: The Audience as Protagonist</h3>

<p>No blog post about stories would be complete without a few personal stories,
right?  Well, get ready, because here they come!</p>

<p>My first conference talk was at RailsConf 2016, where I spoke about Rails
engines.  This was the abstract:</p>

<blockquote><p>Want to split up your Rails app into pieces but not sure where to begin? Wish
you could share controller code among microservices but don’t know how? Do you
work on lots of projects and have boilerplate Rails code repeated in each?</p>

<p>Rails Engines may be your answer.</p>

<p>By building a simple Rails engine together, we will better understand how this
app-within-an-app architecture can help you write more modular code, which can
be gemified and reused across multiple projects.</p></blockquote>

<p>It doesn&rsquo;t appear to be a story at first glance, but read it again.  In case you
missed it, here&rsquo;s the story:</p>

<blockquote><p>Once upon a time, you had a messy app that was suffering for lack of
modularity.  Or, you kept writing the same boilerplate multiple times.</p>

<p>Then, a conference talk showed you how to build Rails engines, and you were
able to take control and conquer your mess.  You were awesomer and your apps
were healthier.</p>

<p>The end.</p></blockquote>

<p>One of the best stories you can offer people is that you will make their lives
happier and better.  (Unfortunately this tendency can be abused by
ill-intentioned people out to make a buck.)  In this case, though, I made a
simple value proposition which I truly believed in, and the result was that
every chair in the workshop had a butt in it, and 130 people walked out having
built their first Rails engine.</p>

<h3>Story Type 2: The Code as Protagonist</h3>

<p>I&rsquo;d like to focus for a moment on a feature of the Rails engines talk which
stood out dramatically for me.</p>

<p>In the introductory portion to my workshop, I had to convey that Rails can route
a request to any Rack app.  This point is critical to understanding Rails
engines, because they take advantage of this feature of Rails to tie into Rails
apps.  I wanted my audience to build an accurate mental model of how Rails
engines are integrated under the hood, and this was the critical point for them
to understand.</p>

<p>I could have thrown that information on a slide, said a few words about it, and
moved on.  But information conveyed that way is easily missed, and I didn&rsquo;t want
to lose people through confusion about this point.</p>

<p>So I told a story.</p>

<p>I told my audience I would build, before their eyes, a perfectly functional
Rails application without using models, views, or controllers.  I created a new,
blank Rails application, and added an empty lambda to my <code>routes.rb</code> file.
Then, step by step, I let the errors guide me to building out that lambda into a
minimal Rack application serving a response to a single endpoint.</p>

<p>Could I have just pre-built a Rails app containing a Rack app?  Yes, of course.
But building up the tension through live code, and letting errors drive the
coding, let the audience discover with me the ability to hook Rack applications
into Rails apps.</p>

<p>After the talk (as well as in practice runs before), this was the part that
generated the most positive feedback.  It wasn&rsquo;t all that difficult to do, but
the experience of watching code develop incrementally was riveting for the
audience.  It has all the parts of classic storytelling: Facing a seemingly
impossible challenge, a hero must discover heretofore unknown abilities, and
then is able to surmount the obstacle.  In this case, the impossible challenge
was building a Rails app without controllers, and the unknown ability was using
a barebones Rack app.</p>

<p>That talk unfortunately wasn&rsquo;t recorded, but I can give a favorite example: the
late Jim Weirich&rsquo;s <a href="https://www.youtube.com/watch?v=FITJMJjASUs">legendary talk on the Y combinator</a>.
The experience of watching a master develop an idea through code is enough to
send chills down my spine.</p>

<p>Of course, live coding isn&rsquo;t for everyone.  But if you present code in your
talk, I&rsquo;d strongly recommend starting with the problem the code has to solve,
then building out the solution incrementally.  Don&rsquo;t just show what your code
does; talk about the obstacles it has to overcome, and the process of getting
there.</p>

<h3>Story Type 3: The Speaker as Protagonist</h3>

<p>My most recent talk was given at WindyCityRails 2016 then repeated (and
improved!) at RubyConf 2016.  The approach here was different.  The subject of
the talk was improvements to Ruby&rsquo;s <code>OpenStruct</code> library, but I also came in
with a lot of personal experience.  I had dealt with <code>OpenStruct</code>-related
performance problems in the past, which let me to publishing 2 alternative
solutions.</p>

<p>In the first half of the talk, I established the importance of <code>OpenStruct</code> to
the Ruby ecosystem, and the reasons for its performance problems.  Then I made
it personal, by talking about how these performance issues affected my company&rsquo;s
projects.</p>

<p>With the tension established, I spoke about 4 different approaches to the
problem, framing it in terms of my own experience with each solution, and how
they succeeded or failed in solving the problems I was having.</p>

<p>Since 2 of the approaches were libraries I had personally written, I was able to
convey a sense of personal triumph in the degree of success they achieved.  And
when I concluded my talk with some lessons learned, they weren&rsquo;t just logically
derivable ideas; they were thing I had personally learned through my experience.</p>

<p>I was originally worried that the very personal nature of the talk would hurt
its reception.  Then something amazing happened.</p>

<p>WindyCityRails asks participants for written feedback after the conference, then
collects and summarizes the responses for the speakers as an exercise in
reflection and self-improvement.  There were many really nice, general comments,
but 2 specific responses stuck with me:</p>

<blockquote><p>I enjoyed the narrative, &ldquo;I tried, I failed, I tried again&rdquo; aspect of this.</p></blockquote>

<!-- comment needed in Markdown to separate comments ☹️ -->


<blockquote><p>Best presentation of the conference. Connected with me.</p></blockquote>

<p>It turns out, people really like hearing a good story.  I didn&rsquo;t just tell them
about an abstract problem and some ways to handle it.  (We&rsquo;ve all heard lots of
talks which do exactly that!)  I told them the story of my problem, and how I
used tools like benchmarking, profiling, and reading code to find a solution
that worked for me.  I told my story in a way that conveyed to the audience that
they, too, can use these tools to solve problems they face.</p>

<p>As a speaker, you may be afraid to make your talk too personal.
<a href="https://www.youtube.com/watch?v=V69Sinlp6Ew">Some</a>
<a href="https://www.youtube.com/watch?v=cGuTmOUdFbo">of</a>
<a href="https://www.youtube.com/watch?v=wewAC5X_CZ8">the</a>
<a href="https://www.youtube.com/watch?v=gTAghAJcO1o">best</a>
<a href="https://www.youtube.com/watch?v=aApmOZwdPqA">talks</a>
<a href="https://www.youtube.com/watch?v=gX4FwSJ4JwI">I&rsquo;ve</a>
<a href="https://vimeo.com/148927676">watched</a>
mostly or entirely follow a narrative or set of highly personal narratives.  And
they&rsquo;re all the more engaging for it.</p>

<h3>A Story Within a Story</h3>

<p>You don&rsquo;t have to choose just one method or one story.  Even within a story, you
can use a deeper level of story to great effect.</p>

<p>In my <code>OpenStruct</code> talk, for example, I had to explain how
<code>OpenStruct</code>&mdash;a hash-like data store&mdash;and its alternatives work.  It&rsquo;s
generally notoriously difficult to explain code and algorithms in a short span
of time.</p>

<p>To counteract the problem, I kept things as concrete and story-like as possible.
I introduced the code one piece at a time, following the trajectory of a single
key-value pair inserted into the <code>OpenStruct</code> (or alternative) instance.  By
following a linear narrative, I was able to convey the information to the
audience quickly and effectively, without them realizing how much data I was
streaming into their brains.</p>

<p>The same principle is at play when someone spends a few minutes of a talk live
coding, or telling a quick personal anecdote to drive the point home.  By
incorporating short stories (or story-like experiences like live coding) into
the framework of a talk, you can make your presentation more engaging, connect
with your audience, and help them walk away having gained the maximum from your
presentation.</p>

<p>One really great example is <a href="https://www.youtube.com/watch?v=EkLdO-SphxA">this talk about effective feedback</a>,
where (just after the 20-minute mark) <a href="https://twitter.com/pyluftig">the speaker</a>
uses a personal anecdote to illustrate both ineffective and effective feedback.
The story drives home the ideas conveyed earlier in the entire talk.</p>

<h3>Writing Your Story</h3>

<p>Great talks aren&rsquo;t made in a day, or even a few days.  It can take years to
write a great talk.  The best talks aren&rsquo;t from people who woke up with bright
ideas; they come from people who experienced something over months and years,
and share their experiences in a personal, intellectually and emotionally
captivating fashion.</p>

<p>If you want to give an amazing tech talk, don&rsquo;t start by making slides or
sketching out bullet points.  Go out and do something.  Experiment, try a new
way of working, build an OSS library or contribute to one.  Get involved in your
local tech community, be a mentor at work, volunteer in your free time.  Do
interesting things, have experiences, and then think long and hard about them,
learn what you can, and synthesize your learning&mdash;along with the story of
what taught you those lessons&mdash;into the next great talk.</p>

<p>People like to hear from experts.  You are the world expert on your life, your
emotions, your projects, your history, and your growth.  And you&rsquo;ll be surprised
by how much people are interested in learning about that.</p>

<p>To give a great conference talk, take the time to build a story worth telling.
And then share it with the world.  But don&rsquo;t just bring the facts and figures
and details to the stage.</p>

<p>Bring yourself.  Be yourself.  Share yourself.</p>

<p><strong><em>Written as part of the 2016 <a href="/blog/2016/12/25/8-crazy-blog-posts">8 Crazy Blog Posts Challenge</a>.</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make It Easy to Do the Right Thing]]></title>
    <link href="http://amcaplan.ninja/blog/2016/12/30/make-it-easy-to-do-the-right-thing/"/>
    <updated>2016-12-30T05:53:38-05:00</updated>
    <id>http://amcaplan.ninja/blog/2016/12/30/make-it-easy-to-do-the-right-thing</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a great Kent Beck quote which should be etched on the mind of every
serious programmer:</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">for each desired change, make the change easy (warning: this may be hard), then make the easy change</p>&mdash; Kent Beck (@KentBeck) <a href="https://twitter.com/KentBeck/status/250733358307500032">September 25, 2012</a></blockquote>


<p>The immediate context of the quote is changing code.  But truth be told, it
actually applies to a whole host of problems on multiple levels.  It can help us
fundamentally alter our practices, our teams, and all elements of the quality of
our software.</p>

<p>Let&rsquo;s understand how and why.</p>

<!-- more -->


<h3>The Chemistry of Change</h3>

<p>Let&rsquo;s begin with a metaphor from the world of chemistry.  Any chemical reaction
is bound by activation energy, the minimum amount of energy which must be
available in the environment for it to proceed.  Even if the result is a
lower-energy, higher-entropy configuration (a fancy way to say the universe will
be happier after the reaction), the activation barrier must be surmounted in
order for the reaction to proceed.</p>

<p>A catalyst is nothing more or less than an entity which lowers the activation
barrier.  Here&rsquo;s a diagram of how a catalyst works:</p>

<p><img src="/images/activation_energy.svg" alt="Activation energy" /></p>

<p>The right side represents the higher-energy (i.e., not preferred) state, while
the left side is the lower-energy (stabler) state.  To cross from one to the
other, there must be enough energy available to cross the peak in the center.  A
catalyst lowers the activation barrier such that we only need enough energy to
conquer the smaller, red-dotted peak.</p>

<p>Also note that the activation barrier looks different from the two sides.  From
the right side, it&rsquo;s decently high, unless a catalyst is present.  From the
left, stabler side, it&rsquo;s really tall even with the catalyst there.  This is why
the form on the left side is likely to stick around.</p>

<p>Now let&rsquo;s apply all this to programming practices.  The right represents a bad,
or less-than-optimal practice, you currently employ.  The left represents a
better way of doing things.  It&rsquo;s stabler &ndash; it will yield better software that
will make you happier.</p>

<p>If you want to transition from the worse practice to the better one, you have 2
issues to consider:</p>

<ol>
<li>What&rsquo;s the barrier to adopting the new practice?</li>
<li>How much value does the new practice provide?</li>
</ol>


<p>By lowering the barrier, and maximizing the value—or lowering the cost—of a good
practice, you&rsquo;ll help yourself and others adopt the right practice and stick
with it.  Let&rsquo;s give some examples of how this works on a number of levels.</p>

<h3>Bash Shortcuts for Better Git Usage</h3>

<p>Whatever shell you use, you get a configuration file with the opportunity to
define aliases and functions.  Rather than giving general principles, I&rsquo;ll point
to a few concrete things I&rsquo;ve done to encourage myself to do the right thing.</p>

<p>Sometimes a simple alias is enough.  One of my favorite aliases is</p>

<p><code>sh
alias gc="git commit -v"
</code></p>

<p>Short and sweet.  Instead of typing out <code>git commit</code>, I just type 2 characters
and I&rsquo;m ready to go.  But that comes with a distinct advantage.  The <code>-v</code> flag
shows a diff of the commit, so I have all the changes fresh in my mind as I
write a commit message, and end up writing a clearer message.  Sometimes I&rsquo;ll
see the diff and rethink my decision to commit the current set of changes; it&rsquo;s
a chance to give one last audit to the commit contents themselves.</p>

<p>Here&rsquo;s another great git alias:</p>

<p><code>sh
alias gap="git add -p"
</code></p>

<p>Instead of adding whole files, you can use <code>-p</code> to visually inspect every change
and only include changes to certain lines in one commit, saving other changes
for later.  By aliasing the <code>-p</code> version of <code>git add</code>, I&rsquo;ve made the <code>-p</code> option
more attractive than typing out <code>git add filename</code>, or even worse, <code>git add .</code>.
I have caught a significant number of mistakes (often leaving in a <code>binding.pry</code>
call!) this way.</p>

<p>Here&rsquo;s another.  Ever been tempted to <code>git push --force</code>?  OK, that was a funny
joke.  Not only have you been tempted, you&rsquo;ve probably done it in the past hour,
despite knowing it&rsquo;s fraught with danger.</p>

<p>There&rsquo;s a better way, though: <code>--force-with-lease</code>.  It works like <code>--force</code>,
but backs out if your changes would overwrite someone else&rsquo;s changes.  Once
<code>--force-with-lease</code> exists, there&rsquo;s not usually a good reason to <code>push --force</code>
except for the fact that it&rsquo;s so much less typing.</p>

<p>Problem solved!</p>

<p><code>sh
alias gpf="git push --force-with-lease"
</code></p>

<p>Bash shortcuts lower the activation energy by reducing the friction involved in
remembering and adding particular flags and options.  They also make the better
practice stabler by lowering the long-term cost of sticking with it.</p>

<h3>Bash Shortcuts for Healthier Development Practices</h3>

<p>One line I&rsquo;ll frequently write into my terminal won&rsquo;t make any sense to you:</p>

<p><code>sh
gup &amp;&amp; safely prom
</code></p>

<p>This line will update a branch with the most current version of the <code>master</code>
branch on GitHub, run a build locally, and if everything still goes green,
initiate a pull request.</p>

<p><code>gup</code> is (in my brain) short for &ldquo;git update&rdquo;, and is aliased to:</p>

<p><code>sh
git fetch origin master:master &amp;&amp; git rebase master
</code></p>

<p>That pulls the latest <code>master</code> from GitHub into my local <code>master</code> branch, then
rebases the current branch off of master.  The goal is to ensure that I don&rsquo;t
submit a pull request before making sure I&rsquo;m working with the most updated
version of the code, in case recent changes conflict with something I changed.</p>

<p>Next is <code>safely</code>.  This is a quick'n'dirty shell function:</p>

<p><code>sh
function safely() {
  drspec &amp;&amp; cop &amp;&amp; "$@"
}
</code></p>

<p>Hmmm, those don&rsquo;t really make sense either, because they also break down into
shortcuts:</p>

<p>```sh
function drspec() {
  docker-compose run web bundle exec rspec &ldquo;$@&rdquo;
}</p>

<p>alias cop=&ldquo;docker-compose run web bundle exec rubocop &mdash;rails &mdash;fail-level autocorrect&rdquo;
```</p>

<p>Let&rsquo;s take it from the top.  We run our apps as sets of containers, which need
to be run with <code>docker-compose</code>.  We run the <code>web</code> container to run our tests,
and the actual command is <code>bundle exec rspec</code> followed by whatever arguments we
passed <code>drspec</code>.  (<code>"$@"</code> just passes on the arguments passed to our function.
So if we ran <code>drspec spec/models/user_spec.rb --fail-fast</code>, that would equate to
<code>docker-compose run web bundle exec rspec spec/models/user_spec.rb --fail-fast</code>.)</p>

<p>Next is <code>cop</code>, which launches a container to run Rubocop with a bunch of options.</p>

<p>Going up a level, <code>safely</code> just runs those 2, then executes whatever you passed
it, short-circuiting if any of the checks fail (hence the name <code>safely</code>).
Finally, we have <code>prom</code>:</p>

<p>```sh
function pro() {
  pr_url=$(hub pull-request -b $1)
  if [[ $? == 0 ]]; then</p>

<pre><code>open $pr_url
</code></pre>

<p>  fi
}</p>

<p>function prom() { pro master; }
```</p>

<p><code>prom</code> uses <a href="https://hub.github.com">GitHub&rsquo;s <code>hub</code> tool</a> to open a pull request
against the <code>master</code> branch.</p>

<p>Ultimately, here&rsquo;s what I wrote:</p>

<p><code>sh
gup &amp;&amp; safely prom
</code></p>

<p>And here&rsquo;s what happened:</p>

<p>```sh
git fetch origin master:master &amp;&amp; git rebase master &amp;&amp; \
  docker-compose run web bundle exec rspec &amp;&amp; \
  docker-compose run web bundle exec rubocop &mdash;rails &mdash;fail-level autocorrect &amp;&amp; \
  hub pull-request -b master</p>

<h1>After this I&rsquo;d have to highlight the output from hub, open the browser, and</h1>

<h1>paste the URL, to check everything worked. The bash function does that for me.</h1>

<p>```</p>

<p>No way am I going to type all that every time!  It&rsquo;s sorely tempting to just
open a pull request and hope for the best, but that wastes CI resources, and if
I broke something badly, I just wasted other people&rsquo;s time.  By setting up a few
bash shortcuts, I make it easy to set the process in motion, go off and do
something else, and come back in a few minutes to make sure it completed
properly.</p>

<p>It&rsquo;s also worth noting that <code>drspec</code> is pretty valuable on its own.  It&rsquo;s not so
much for the time saved, but more because if testing requires a lot of typing,
it may not happen nearly as frequently as it should.  Some use <code>guard</code> to solve
this problem by running tests automatically without typing at all.</p>

<h3>Making Things Faster</h3>

<p>If you ask people why they don&rsquo;t run their tests more frequently, 9 times out of
10 they&rsquo;ll say it&rsquo;s because it takes too long.  They want to run their tests
more regularly throughout the development process, but the overhead of a single
run is too much of a break in development to apparently justify the time sink.</p>

<p>Many things work the same way.  We want to change our ways, but the cost of
doing things the better way is too high.  We can often lower the cost by making
things faster.  This isn&rsquo;t the place to talk about speeding up tests (that&rsquo;s
worth a post in itself), but I&rsquo;ll give a simpler example.</p>

<p>As mentioned previously, I work with a containerized app.  We use
<code>bundle package</code> to package the gems in the Gemfile into the app directory, then
copy them over to the container image amongst everything else in the Rails root.
This means that any gem updates require rebuilding the container image.
Building the image used to take about 10 minutes, certainly enough time to
totally distract you from whatever you were doing.  This, in turn, meant we were
unlikely to upgrade gems as we go, because the subsequent container rebuild was
a time-consuming process.</p>

<p>I recently dug in to figure out what was taking so long.  It turns out that we
copy every file and then change the ownership from the root user to the
application&rsquo;s user.  Copying followed by <code>chown</code>ing was taking the vast majority
of time.  I discovered that not only were we copying app code, we also copied
over every file in the <code>.git</code> directory!  Since git produces a lot of files, we
had an ever-increasing amount of <code>chown</code>ing to do.  I learned that I can exclude
<code>.git</code> from the copy operation using a <code>.dockerignore</code> file, and that brought
down build time from 10 minutes to 3.</p>

<p>3 minutes is still a lot of time, but it&rsquo;s low enough that upgrading gems is
less of a hassle.  And lowering that activation barrier means we&rsquo;re more likely
to keep our gems current.</p>

<h3>Opening Up the Option</h3>

<p>As I stated in the intro, there are many types of problem you can solve by
thinking about activation barriers.  Here&rsquo;s an example of solving a people
problem in this way.</p>

<p>On my team, we believe strongly in the value of pair programming, but we often
have a difficult time actually making it happen.  We&rsquo;re a distributed team with
a chat-heavy culture, and even when pairing seems to be a good idea, it often
fails to materialize.</p>

<p>Recently we made some changes to the way we work, and I pushed hard to have a
daily standup on video chat.  One major motivation was to open up the option of
pairing.  If we already see each other face to face, there&rsquo;s a much lower
activation barrier to saying, &ldquo;Hey, this is a difficult task.  Can you help me
out with it?&rdquo;  Or perhaps more importantly, &ldquo;Oh, I didn&rsquo;t know you were working
on that.  Maybe I can pair with you on it?  I want to learn more.&rdquo;</p>

<p>Another example of this type of thinking is having regular retrospectives.
Everyone wants to improve the team, but feedback loops don&rsquo;t tend to open
themselves up.  It&rsquo;s critical to create opportunities for team members to give
feedback without having to demand to be heard.  (The same applies to 1-on-1
employee-manager meetings, too.)  To lower the barrier even more, you can take
steps to make sure people feel safe giving honest feedback, such as using a tool
that anonymizes the identity of the person giving feedback.</p>

<h3>Temporary Constraints</h3>

<p>I&rsquo;m not going to talk about this too much, since I already developed this idea
at length in <a href="/blog/2016/01/04/choose-your-constraints/">another post</a>.  You can
constrain yourself to follow certain practices, train yourself to become more
comfortable with them, and in the long run adopt the practices happily.  Here,
rather than focusing on the activation barrier, you accept that it will be
difficult to change.  But the commitment means you increase the value and
decrease the cost such that it&rsquo;s eventually more difficult to go back.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Your current constraints ultimately train you to operate effectively within precisely those constraints. Choose your constraints wisely.</p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/670030185106907136">November 27, 2015</a></blockquote>




<blockquote class="twitter-tweet" data-lang="en" data-conversation="none"><p lang="en" dir="ltr">Always make time for testing, pairing, knowledge sharing, and learning. Eventually they will happen automatically without special effort.</p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/670031382144528385">November 27, 2015</a></blockquote>


<p>Some of the best practices actually cost very little, once you become
comfortable with them.  When it comes to TDD, for example, I struggled a lot at
the beginning, but now I develop more quickly in a TDD workflow than when I try
to test afterwards.  It took practice and discipline to get here, but at this
point I&rsquo;d have to work hard to go back, and that&rsquo;s exactly the point.</p>

<p>Figure out what major change you want to make to your practices, and commit to
it wholeheartedly.  Think about how to adopt the practice with the least
possible disturbance to your workflow, and reevaluate as you go.  Eventually you
should find that your standard workflow has come to encompass this practice, at
little to no extra cost.</p>

<h3>If You Make the Change Easy, They Will Come</h3>

<p>Any self-aware programmer or team tries to be conscious of its shortcomings and
work on improving them.  Often we make a mistake in trying just to push
ourselves to do better.  Instead, we might be better off focusing on lowering
barriers to improvement.  If it&rsquo;s just as easy to do the right thing, we&rsquo;ll find
ourselves doing it more and more, and improvement will happen without adding
unnecessary stress.</p>

<p>We are often encouraged to be catalysts for change.  It&rsquo;s worth remembering what
a catalyst is.  A catalyst doesn&rsquo;t push or prod or apply pressure.  Instead, it
lowers a barrier and enables change to happen.</p>

<p>The same is true for changing our teams.  You can&rsquo;t force others to do things
your way.  But you can serve as a catalyst, removing obstacles while helping
them to understand the value your suggested change will provide.  If the change
is legitimately valuable and the team is open-minded, usually they&rsquo;ll come
around.</p>

<p><strong><em>Written as part of the 2016 <a href="/blog/2016/12/25/8-crazy-blog-posts">8 Crazy Blog Posts Challenge</a>.</em></strong></p>
]]></content>
  </entry>
  
</feed>
