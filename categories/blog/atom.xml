<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | AMC: Aspiring Master of Code]]></title>
  <link href="https://amcaplan.ninja/categories/blog/atom.xml" rel="self"/>
  <link href="https://amcaplan.ninja/"/>
  <updated>2019-05-06T21:43:14+03:00</updated>
  <id>https://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Baby's First Keynote]]></title>
    <link href="https://amcaplan.ninja/blog/speaking/2019/05/06/babys-first-keynote/"/>
    <updated>2019-05-06T05:03:38+03:00</updated>
    <id>https://amcaplan.ninja/blog/speaking/2019/05/06/babys-first-keynote</id>
    <content type="html"><![CDATA[<p>I&rsquo;m on a plane, traveling back from RailsConf 2019 where I was one of the keynote
speakers. My head is full of thoughts and reflections on my experiences before,
during, and after the talk.</p>

<p>I&rsquo;ve given a few talks before, including several at previous RailsConfs, but this
time was&hellip; different, somehow.</p>

<p>I&rsquo;d like to share my experiences with you, in the hope that you&rsquo;ll learn
something of value along the way.</p>

<!-- more -->


<h3>Genesis of the Talk</h3>

<p>The process that led to my talk, <em>The Stories We Tell Our Children</em>, began circa
2.5 years ago, when my wife bought our first Israeli children&rsquo;s book,
<a href="http://www.ithl.org.il/page_13258"><em>A Tale of Five Balloons</em></a> by Miriam Roth. I
started to read it to my daughter nearly every night, and she loved it, but I
honestly was bothered by the book. It was sad through and through, and I
couldn&rsquo;t figure out why it was clearly a popular book. It took me months to
learn how it had become popular, and even then I wasn&rsquo;t fully comfortable with
it. It took at least a year to make my peace with the book, and to start to
appreciate and even love it.</p>

<p>Through the process, I started to see how literature and the society within which
it exists are intimately connected. It made me reconsider a lot of the American
early childhood literature I grew up with. And the thoughts began to percolate
around whether this could be something worth exploring in the context of a
conference talk.</p>

<p>Time went on, and I began to read further. More Israeli books came into my life,
and I continued to follow the pattern and see the connections. I started to seek
out Israeli children&rsquo;s classics actively, and try to perceive how each connected
with Israeli history. I also read some literary criticism, mainly
<a href="https://www.shimona.co.il/">that of Dr. Shimona Fogel</a>, which helped clarify
things for me as well.</p>

<p>About 9 months ago, I decided I had enough material for a talk, and I had a
sense of what I wanted to talk about. I submitted the topic to the RubyConf CFP,
and was waitlisted, meaning I still got a free conference ticket, but would only
give the talk if someone backed out at the last minute. No one did. In
retrospect, this was a blessing; the talk was still somewhat raw and unrefined.
I&rsquo;m happy I got a few extra months to let things settle more in my head and on
my slides.</p>

<h3>Getting Accepted</h3>

<p>Since I had been waitlisted rather than rejected, I already knew my proposal was
pretty good. So I edited the proposal a bit more, and submitted it to RailsConf.</p>

<p>In case you&rsquo;re wondering, I didn&rsquo;t submit the talk to smaller conferences, for
two reasons:</p>

<ol>
<li><p>Small conferences tend to be on weekends. I don&rsquo;t go to conferences on
Saturdays for religious reasons, and I also don&rsquo;t like the idea of making a long
trip to a 2-day conference where one day is Saturday. Add the various Jewish
holidays, and a great many conferences simply aren&rsquo;t relevant possibilities.
RubyConf and RailsConf are wonderful exceptions to this rule, since they are
specifically held midweek so as to interfere minimally  with attendees' lives
and to let them have full weekends before and after the conference.</p></li>
<li><p>Even if a relevant conference could be found, I had a sense this talk was
special. It was certainly special to me. And I wanted to make sure I get to share
it with as many people as possible. RubyCentral conferences would be my best shot
at sharing these ideas with a large group, between the attendees and the many
people who watch the Confreaks videos afterwards.</p></li>
</ol>


<p>At any rate, one day I got an email from the conference organizers, stating that
they&rsquo;d decided my talk would make a great keynote, and they&rsquo;d like me to take
one of the keynote slots. Especially given that I&rsquo;d been waitlisted last time,
this wasn&rsquo;t what I had expected, so of course I was thrilled to have the
opportunity!</p>

<p>However, I was a little bit concerned. I knew I&rsquo;d be addressing some Israeli
history, which can be a sensitive and emotional topic for many people, and I
definitely didn&rsquo;t want to ruin someone&rsquo;s conference experience by saying
something insensitive or biased. Furthermore, because it&rsquo;s a keynote rather than
one talk of many in a multi-track slot, it wouldn&rsquo;t be a talk people chose to
attend. Keynotes also generally don&rsquo;t get an abstract published in advance, and
even whether to include the title in the program was a choice. (I decided yes.)
So I wanted to make sure I&rsquo;d have resources available for content review. Once I
received confirmation from the RubyCentral team that this would be made available
to me, I accepted the slot and started improving the talk.</p>

<h3>Cranking Up the Quality</h3>

<p>I&rsquo;ve given <a href="/talks">several talks before</a>, but this was a keynote. That means a
bigger audience and higher expectations. So I set a higher bar for this talk and
made every attempt to meet it.</p>

<p>I knew more or less what I wanted to say, but somehow all sorts of ancillary
information always manages to creep its way into the talk. And there were some
things I wanted to discuss which would have been ill-advised in consideration of
the goal of not conjuring up uncomfortable feelings for people during my talk.</p>

<p>I expanded and pared down, again and again, until I felt pretty ready. Sadly, my
talk was significantly longer than the recommended 40-50 minutes, so aside from
wanting general feedback, I needed advice on what to take out.</p>

<p>Some folks from the US and UK were visiting the Cloudinary Israel office, and I
figured it would be a good opportunity to get feedback from an audience that
would be fairly representative of the people who would ultimately hear the talk.
I invited the visitors, and ended up with a room of 5 participants in the
audience. I got some great feedback, and ended up making many significant changes
(additions and deletions) in response to their comments.</p>

<p>I rehearsed the talk once every 1-2 days for two weeks, each time tweaking a bit
more. Once I felt comfortable with the newly edited version, I did a second round
of testing on a group of my Israeli peers. They corrected a few things which I
had confused due to being less sensitive to some finer points about Israeli
culture. (I am, after all, an immigrant!) They also made a few suggestions to
help me make it appeal more to the audience.</p>

<p>The most important bit of feedback I got in both rounds was to make sure to
continuously ground the historical/cultural content in something practical. One
of my reviewers put it  this way: I was forcing people to maintain a long buffer,
to remember a large percentage of the talk over many minutes, in order to
understand the takeaways  at the end. This made it harder for an audience member
to maintain focus and understand what&rsquo;s important to hold onto over time.</p>

<p>I sent a video of a rehearsal to the organizers and noted the parts that likely
needed content review. It tooks some back-and-forth to make the review happen,
and it wasn&rsquo;t completed until the day prior to the talk, but thankfully it
worked out.  My test audiences' feedback had already put me in a place where no
further changes would be necessary. This was a great relief for me as the time
drew near.</p>

<p>In the meantime, I continued making small tweaks, even on the plane ride, or in
the conference hotel, and even the morning of the talk when something clicked in
my head and I wanted to include the idea.</p>

<p>Some people have to &ldquo;seal&rdquo; a talk some time before giving it, in order to
rehearse a final version and feel comfortable onstage. For me, though, a talk is
a living entity, not done being developed until the moment I&rsquo;m onstage and it&rsquo;s
too late to make changes.  It&rsquo;s an outlet of my mind and my emotions, and it
needs to reflect who I am and what I think and feel when I give the talk. That
dynamism lets me bring my entire self to the presentation.</p>

<h3>Giving the Talk</h3>

<p>It was time. I headed over to the convention center, and reached the main
ballroom 15 minutes early. I hooked up the microphone and laptop, and then spent
a few minutes talking to some friends who had also arrived early. That helped
calm my nerves a bit, but with around 5 minutes to go, I decided I needed some
quiet time. I went backstage, and took a few moments just to breathe and relax.
Abby, one of the organizers, got up to make the morning announcements, and then
it was time!</p>

<p>I got up, took in the round of applause, took a deep breath, and started. The
first couple of slides were completely scripted, which helped me get into the
rhythm of the talk, and the rest was bullet points and notes to let me  speak
more naturally. I heard the crowd laughing, crying, even gasping at one point,
and I fed on that energy and connection to bring even more of myself into the
talk.</p>

<p>It&rsquo;s a surreal experience, being in front of a huge crowd and conveying ideas
you care about deeply. At some point, at least for me, the power of the ideas
themselves begins to carry you. You feel like you&rsquo;re floating, you forget that
your body exists, you simply become a conduit for thought and emotion, via the
medium of words.</p>

<p>My memories of the talk itself are fairly sparse. I know I covered all the
slides, and I remember a few key moments in time, but most of it is a big blur.
I was in another world, yet very much connected with the audience at the same
time.</p>

<h3>Recovery</h3>

<p>In the past, I tend to take audience questions on the side after the talk, and
then take a break for a while, and later in the day start going to talks again.
This time, I had a couple of talks I really wanted to hear. So I went and
listened. And then it was lunch break, but instead of eating I went back to my
room, took a shower, put on more comfortable clothes, and went back to the
conference with a clearer head. Still, it took a few hours to feel completely
back to normal.</p>

<h3>Reactions</h3>

<p>I was overwhelmed and often surprised by people&rsquo;s reactions to my talk. I
imagined I&rsquo;d get some interesting responses, but even so, a few things caught me
by surprise. Some highlights:</p>

<ul>
<li>An attendee from Venezuela told me about how much he values hearing about other
cultures, and expressed his frustration that Americans don&rsquo;t fully understand the
situation in his country, and that&rsquo;s a story that needs to be told.</li>
<li>An attendee originally from Pakistan (now living in the US) noted that he isn&rsquo;t
legally allowed to visit Israel. For him, this was an enlightening experience
and a chance to learn more about Israeli culture, to see the humanity of Israelis.</li>
<li>An American Jewish attendee described to me how excited he was to see someone
obviously Jewish onstage talking about Jewish history. He said it made him feel
seen. He&rsquo;s never been actively excluded from the programming community, but it
still meant a lot to him to have representation in this sort of public forum.</li>
<li>Two Israeli Jews in attendance (probably the only ones aside from myself) told
me about their feelings of shock and wonderment in seeing the books they read to
their children onscreen at the biggest conference for Rails developers in the US.
They were thrilled to have the opportunity to tell their family and friends back
home what had  happened across the Atlantic.</li>
<li>A father approached me to talk about the concerns he shares with me about the
books he reads to his children. Sometimes he&rsquo;s noticed messages that he realizes
are problematic, and he appreciated me raising awareness of the issue.</li>
<li>A programmer who works for TED came over to compliment my presentation style,
and we got into a scintillating discussion of how TED has impacted the way
people give talks, for better and for worse.</li>
<li>Someone I&rsquo;d met the previous day approached me and told me they have been
dabbling in writing a children&rsquo;s book. They gave me a copy to look at and asked
me to share my thoughts.</li>
</ul>


<p>Many other people approached me in the days following my talk. Some wanted to
connect on a more practical level; I was invited to be a guest on two podcasts,
which should be a fascinating experience. Mainly, though, people wanted to share
all kinds of reflections, mostly centered around being more aware of the
messages in children&rsquo;s books and in the stories we tell.</p>

<h3>My Takeaways</h3>

<p>I&rsquo;m still unpacking the experience, but I&rsquo;ve drawn a few lessons from my little
adventure.</p>

<p>First is the power of vulnerability. This talk put me in a potentially very
vulnerable place. It involved many of my own feelings, both about literature and
about the society in which my wife and I have chosen to live and raise our
children. But I found that people were very receptive to my honesty and openness
about myself. There are certainly limits, and I needed to take great care to
ensure I wouldn&rsquo;t trod on someone else&rsquo;s feelings. But I was amazed at how
positively people reacted to the talk and the content.</p>

<p>Next is the value of letting ideas simmer. This talk came to be over a period of
years, as the result of a personal journey. Even once I put together the initial
abstract, nearly a year passed before I gave the talk onstage. The passage of
time allowed me to clarify my goals in the talk and what exactly I wanted to
convey in the time allotted.</p>

<p>Third is the value of testing. I thought I had a pretty good talk, but I found
out I was too close to the material. Hearing the reactions of a test audience
helped me to notice the ways in which my talk could be improved and made more
valuable for them. Because this isn&rsquo;t about me getting to spew at people. It&rsquo;s
about what they carry with them when they exit the room.</p>

<p>Fourth, I was prompted a few times to make the talk feel more  relevant. It&rsquo;s
easy for a speaker to forget that you need to have a strong and clear answer to
the question, &ldquo;Why should I care about any of this?&rdquo; And it needs to be stated
early and often. I think my talk was much better received because I chose to
scatter some of the takeaways and lessons throughout, rather than concentrating
everything at the end of the talk.</p>

<p>Finally, I was intrigued to see how different people took different things away
from the talk. Some focused more on issues of literal children&rsquo;s literature,
while others wanted to talk about messaging in media and in programmer culture.
Everyone listened to the same talk, but heard something a bit different. This
reminded me that as a speaker, you can&rsquo;t control what your audience will hear,
but that&rsquo;s OK. Maybe everyone hears what they need to hear at that time. It&rsquo;s a
gift to them; they choose what to do with it. And my job as speaker is to give
up the illusion of control and allow each attendee to interpret in their own way.</p>

<p>Thank you, dear reader, for listening. I hope it was worth the time and energy
you&rsquo;ve invested, and you&rsquo;re a bit wiser now than you were before reading. I&rsquo;d
love to hear what you learned from my experiences in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding up a Simple Static Site (With Help from Cloudinary!)]]></title>
    <link href="https://amcaplan.ninja/blog/2019/01/24/speeding-up-a-simple-static-site-with-cloudinarys-help/"/>
    <updated>2019-01-24T20:09:04+02:00</updated>
    <id>https://amcaplan.ninja/blog/2019/01/24/speeding-up-a-simple-static-site-with-cloudinarys-help</id>
    <content type="html"><![CDATA[<h3>Diagnosing The Patient</h3>

<p>For the last 2 years, I&rsquo;ve run <a href="https://devempathybook.club">Dev Empathy Book Club</a>,
and the site hasn&rsquo;t changed much. I&rsquo;ve tried to keep it low-effort so I can focus
on the community and the content we&rsquo;re producing. One casualty of this was that
the site, while simple, wasn&rsquo;t very performant. (Google&rsquo;s
<a href="https://developers.google.com/speed/pagespeed">PageSpeed Insights</a> gave it a
very low score of 30/100 on mobile.)</p>

<p>I recently began working at <a href="https://cloudinary.com">Cloudinary</a>, and I realized
it&rsquo;s pretty embarrassing that, as an employee of a company whose product is all
about optimizing media on the web, I have a personal site that does a terrible
job of it.</p>

<!-- more -->


<p>The final bit of encouragement came from fellow Cloudinarian
<a href="https://twitter.com/etportis">Eric Portis</a>, who published <a href="https://www.smashingmagazine.com/2017/07/website-speed-test-image-analysis-tool/">an article</a>
about <a href="https://webspeedtest.cloudinary.com/">Website Speed Test</a>, a free tool
from Cloudinary to grade image performance on your site. When I ran it against
the Dev Empathy Book Club site, I saw that users had to download 1.5MB, which
could be optimized down to 370kB, i.e. about &frac14; of their weight. I also knew
these images were being served directly from GitHub Pages, without any CDN, so
on mobile devices the page load was pretty slow.</p>

<p>On top of all this, there was a good amount of render-blocking JS and CSS being
downloaded without a CDN.</p>

<p>All this meant slower load times, and lower scores in search results. There was
no good reason for it, except that I didn&rsquo;t have the know-how to improve things,
or the time to learn how to do it.</p>

<h3>Enter Cloudinary</h3>

<p>Cloudinary is a robust but easy-to-use service to upload, transform, and serve
images and videos. The free tier contains way more than you&rsquo;ll ever need for a
simple static site, so it&rsquo;s a great choice for e.g. personal sites with a few
images you&rsquo;d like to serve efficiently.</p>

<p>One awesome feature of Cloudinary which made this incredibly simple is the
ability to <a href="https://cloudinary.com/documentation/upload_images#auto_fetching_remote_images">auto-fetch images</a>.</p>

<p>For example, consider this URL:</p>

<p><code>
https://res.cloudinary.com/caplan/image/fetch/https://amcaplan.ninja/images/ninja-cropped.png
</code></p>

<p>The URL consists of</p>

<p><code>
https://res.cloudinary.com/caplan/image/fetch/
</code></p>

<p>which tells Cloudinary you want to fetch an image for the <code>caplan</code> cloud (you
create a cloud with a unique identifier when you sign up for Cloudinary), and
the rest is the URL where the image can be found:</p>

<p><code>
https://amcaplan.ninja/images/ninja-cropped.png
</code></p>

<p>When you hit this URL, Cloudinary will fetch the image in the background, and
begin serving via CDN.</p>

<p>Theoretically we could take all the images on the site and preface with the fetch
incantation, but there&rsquo;s a better way. Cloudinary has another feature called
Auto Upload, which lets you create folders which are proxies for web locations.
So if we create a <code>ninja_images</code> directory mapped to <code>https://amcaplan.ninja/images/</code>,
the URL looks like this:</p>

<p><code>
https://res.cloudinary.com/caplan/image/upload/ninja-images/ninja-cropped.png
</code></p>

<p>Much better! Here&rsquo;s the result:</p>

<p><img src="https://res.cloudinary.com/caplan/image/upload/ninja-images/ninja-cropped.png" alt="ninja image served via Cloudinary" /></p>

<p>Now comes the fun part.</p>

<p>Cloudinary lets you edit images by adding transformations right into the URL.
For example, by adding <code>/w_100</code> before the image location, we creates a
100-pixel-wide version of the same image:</p>

<p><code>
https://res.cloudinary.com/caplan/image/upload/w_100/ninja-images/ninja-cropped.png
</code></p>

<p><img src="https://res.cloudinary.com/caplan/image/upload/w_100/ninja-images/ninja-cropped.png" alt="small ninja image" /></p>

<p>You can crop, set gravity (focusing on a region of the image or on human faces),
scale, add text layers or image overlays, and do a whole bunch more awesome
stuff, just by adding to the URL.</p>

<p>This opens up the opportunity to create multiple versions for various
breakpoints, driven via CSS. So if you take a large version as the original,
you can tell Cloudinary to crop/scale the image as you see fit, no Photoshop
skills required!</p>

<p>As one concrete example, here&rsquo;s a large image for wide screens:</p>

<p><code>
https://res.cloudinary.com/dev-empathy-book-club/image/upload/f_auto,q_auto/site/slider-bg.jpg
</code></p>

<p><img src="https://res.cloudinary.com/dev-empathy-book-club/image/upload/f_auto,q_auto/site/slider-bg.jpg" alt="large image of girls holding hands" /></p>

<p>You&rsquo;ll notice a couple transformations here: <code>f_auto</code>, which chooses the most
bandwidth-optimized image format for the user&rsquo;s browser, and <code>q_auto</code>, which
reduces image size by degrading image quality without being noticeable to the
human eye.  Those 2 transformations already reduce the image size from 874kB to
385kB, without any noticeable difference to the user!</p>

<p>But we can do better on mobile, where this many pixels still aren&rsquo;t helping
anyone. Here&rsquo;s a scaled-down version for mobile:</p>

<p><code>
https://res.cloudinary.com/dev-empathy-book-club/image/upload/f_auto,q_auto,w_480,h_800,c_lfill,g_auto/site/slider-bg.jpg
</code></p>

<p><img src="https://res.cloudinary.com/dev-empathy-book-club/image/upload/f_auto,q_auto,w_480,h_800,c_lfill,g_auto/site/slider-bg.jpg" alt="small image of girls holding hands" /></p>

<p>In this case, we&rsquo;re creating a tall image bounded at 480px width, centered on
what Cloudinary determines to be the most interesting part of the image, and
using a <code>fill</code> approach to the crop (expressed as <code>c_lfill</code>) to ensure we cover
the entire requested dimensions of 480x800.</p>

<p>There are many parameters and even more options for those parameters, but the
<a href="https://cloudinary.com/documentation/image_transformations">documentation</a> is
quite thorough and the system is really powerful.</p>

<p>To see a real-life example for what this might look like, check out <a href="https://github.com/dev-empathy-book-club/dev-empathy-book-club.github.io/blob/d78cf21daaa53ffe1d82059dadc3316fcccb9fa5/css/airspace.css#L866-L940">the CSS for
Dev Empathy Book Club&rsquo;s site on GitHub</a>.</p>

<h3>The Gravatar Challenge</h3>

<p>At first I assumed that <a href="https://www.gravatar.com">Gravatars</a> (we display a few)
on the site would work the same way, but I soon realized there is a big problem
with Gravatar. The URL for an image looks something like this:</p>

<p><code>
http://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg?s=200
</code></p>

<p>with this result:</p>

<p><img src="http://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg?s=200" alt="Ariel Caplan 200-pixel gravatar" /></p>

<p>If I want a larger version, I just change the <code>s</code> query param. So for a 400px
square, I&rsquo;d use this URL:</p>

<p><code>
http://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg?s=400
</code></p>

<p><img src="http://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg?s=400" alt="Ariel Caplan 400-pixel gravatar" /></p>

<p>Lacking the <code>s</code> parameter, Gravatar defaults to an 80px square:</p>

<p><code>
http://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg
</code></p>

<p><img src="http://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg" alt="Ariel Caplan 80-pixel gravatar" /></p>

<p>If you try to fetch a large Gravatar avatar with Cloudinary, here&rsquo;s the result:</p>

<p><code>
https://res.cloudinary.com/caplan/image/fetch/https://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg?s=400
</code></p>

<p><img src="https://res.cloudinary.com/caplan/image/fetch/https://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg?s=400" alt="Ariel Caplan 80-pixel gravatar fetched through Cloudinary" /></p>

<p>What happened? Cloudinary treats <code>?s=400</code> as a meaningless parameter passed to
Cloudinary, and doesn&rsquo;t forward it to Gravatar.</p>

<p>This can be fixed, though, by URL-encoding the <code>?</code> character as <code>%3F</code>, like so:</p>

<p><code>
https://res.cloudinary.com/caplan/image/fetch/https://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg%3Fs=400
</code></p>

<p><img src="https://res.cloudinary.com/caplan/image/fetch/https://secure.gravatar.com/avatar/7b5a451ee25044b9c869e3e98b79425d.jpg%3Fs=400" alt="Ariel Caplan 80-pixel gravatar fetched through Cloudinary" /></p>

<p>This technique should work for any characters you might need to include in the
fetch URL.</p>

<p>However, that&rsquo;s not the end of the story. What happens when someone updates their
Gravatar image? Ideally, it would get updated on our site, too. But on the free
plan, fetched images never change. (They can be configured to be updated on paid
plans.)</p>

<p>It turns out that someone at Cloudinary thought of this, and therefore built
<a href="https://cloudinary.com/blog/placeholder_images_and_gravatar_integration_with_cloudinary">Gravatar support</a>
directly into the platform. Unlike the <code>fetch</code> and <code>upload</code> image types we&rsquo;ve
seen so far, there&rsquo;s also a <code>gravatar</code> image type which knows how to source a
high-quality image from Gravatar, and update it automatically, with a small
delay, when someone changes their avatar! (There are <a href="https://cloudinary.com/documentation/image_delivery_options">similar systems</a>
for other social networks, including Facebook, Google+, Instagram, and Twitter.)</p>

<p>If you fetch images via Gravatar in this way, you can easily scale up or down
using the normal <code>h_</code> and <code>w_</code> parameters. So here&rsquo;s that same 400px image of
yours truly, fetched via Cloudinary:</p>

<p><code>
https://res.cloudinary.com/caplan/image/gravatar/w_400/7b5a451ee25044b9c869e3e98b79425d.jpg
</code></p>

<p><img src="https://res.cloudinary.com/caplan/image/gravatar/w_400/7b5a451ee25044b9c869e3e98b79425d.jpg" alt="Ariel Caplan 400-pixel gravatar fetched through Cloudinary" /></p>

<p>Of course, once you&rsquo;ve done this, you can use <code>f_auto</code> and <code>q_auto</code> to optimize
images further and reduce bandwidth use. Neat!</p>

<h3>Not Just for Images!</h3>

<p>One little-known fact about Cloudinary: They can serve anything via CDN, not just
images and video! So if you have JS or CSS files, you can serve them through
Cloudinary&rsquo;s CDN in the same fashion as mentioned above for images: Set up an
Auto Upload folder and reference those URLs instead of the place where they&rsquo;re
hosted on your site. So for example, instead of:
<code>
https://devempathybook.club/css/bootstrap.min.css
</code>
we reference:
<code>
https://res.cloudinary.com/dev-empathy-book-club/raw/upload/css/bootstrap.min.css
</code>
(where <code>css/</code> is a folder mapped to <code>https://devempathybook.club/css/</code>). Note
that instead of <code>image</code> as before, we write <code>raw</code> to indicate that this should
be considered an unknown file type and Cloudinary shouldn&rsquo;t try to do any image
processing with it.</p>

<p>Usually you&rsquo;ll want to use a <a href="https://css-tricks.com/strategies-for-cache-busting-css/#article-header-id-2">versioning strategy</a>
for your JS and CSS assets if you use a CDN, but the goal here was to be lazy on
a static Jekyll site. Since there wasn&rsquo;t much custom CSS and JS, I simply left a
few files that are loaded directly from GitHub Pages, but things that won&rsquo;t
change frequently (or ever) are served via Cloudinary&rsquo;s CDN. You can see the code
<a href="https://github.com/dev-empathy-book-club/dev-empathy-book-club.github.io/blob/d78cf21daaa53ffe1d82059dadc3316fcccb9fa5/_includes/head.html#L36-L56">here</a>.</p>

<h3>Cut Waste</h3>

<p>You might notice, if you looked at the code from the last section, that a number
of lines were commented out. It turns out that the Jekyll template I used bundled
with it a number of JS/CSS frameworks and plugins I didn&rsquo;t actually use. Removing
them reduced the total page load size, and makes the page run faster, since
there&rsquo;s less for the CPU to worry about. As they say, no code is faster than no
code!</p>

<h3>The Outcome</h3>

<p>I wouldn&rsquo;t call the site blazing-fast now, but its PageSpeed mobile score went
up from 30 to 50 in a few simple steps taking a couple hours total. There are
more things to optimize, but these quick tricks helped bring down page load time
a lot already. Importantly, time to first paint on mobile was cut by about 50%.
That&rsquo;s a much better experience for mobile users.</p>

<p>So go out, try these tips, and let me know in the comments how you did!</p>

<p>As a reminder, I work at Cloudinary, so if you do find anything here difficult
to implement, I can pass along your concerns to the right people&hellip; 😉</p>

<p>P.S. If you use Jekyll or some other blogging framework, and you have many
images on your site, it may be worth going further with automation using a
plugin. For example, <a href="https://nhoizey.github.io/jekyll-cloudinary/">jekyll-cloudinary</a>
lets you define transition presets, and does all the work to generate URLs for
images at various screen sizes. It&rsquo;s pretty magical. Of course, if it&rsquo;s a dynamic
site, Cloudinary has <a href="https://cloudinary.com/documentation">a host of SDKs</a>
which can do everything discussed here, and much more!</p>

<p><em>NOTE: Cloudinary did not ask me to write this. Nothing in this post should be
taken as representing anyone other than myself.</em></p>

<p><strong><em>UPDATED 2019-01-29: Added option to include URL-encoded characters in a fetch
URL.</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Created Dev Empathy Book Club]]></title>
    <link href="https://amcaplan.ninja/blog/2018/04/26/why-i-created-dev-empathy-book-club/"/>
    <updated>2018-04-26T01:54:50+03:00</updated>
    <id>https://amcaplan.ninja/blog/2018/04/26/why-i-created-dev-empathy-book-club</id>
    <content type="html"><![CDATA[<p>I was just a few months out of the Flatiron School, had gotten my bearings in
the codebase at my first job, and was starting to take on more responsibility. I
was sitting with a product manager&mdash;let&rsquo;s call her Sierra&mdash;trying to
explain the technical impact of a product idea she had proposed. And I was
<em>frustrated</em>.</p>

<p>No matter which way I explained it, she just kept getting confused. Why couldn&rsquo;t
she understand that making these changes would drastically increase response
time on a critical endpoint? It was a simple workflow involving 2 microservices
and a NoSQL database, and she didn&rsquo;t even have to understand the details, just
how they were connected together on a high level.</p>

<p>At some point, I realized: No one had ever given Sierra any level of technical
explanation of the system whose development she was supposed to guide every day.
Instead of going further with the conversation, I asked, &ldquo;Why don&rsquo;t we set up a
meeting just to describe the basic outline of the system? Nothing overly
detailed, just enough to allow us to have a conversation about how product
concepts will impact the real-life product when they&rsquo;re translated into code.&rdquo;</p>

<!-- more -->


<p>To my surprise, she agreed. To my further astonishment, I actually enjoyed the
meeting more than any other I&rsquo;d had since beginning my software development
career. We slowly built up a diagram of the parts of the system relevant to her
job, clarified confusing points, and made sure every bit of explanation was
clear to her.</p>

<p>At the end of the meeting, Sierra thanked me and said, &ldquo;You know, no one&rsquo;s ever
done this for me. This is going to significantly improve my ability to come up
with ideas and communicate with developers. I&rsquo;d really like to understand more
about the technical elements of the project, but there never seem to be
opportunities for me to learn.&rdquo;</p>

<p>At that moment, I realized something that has become a theme in my career: The
most significant impact you can make on a product isn&rsquo;t through design, code,
marketing, sales, or customer support. It&rsquo;s building bridges, enabling people of
varied backgrounds and skills, each with their own perspectives and spheres of
understanding, to work together through effective communication.</p>

<h3>A Series of Fortunate Events</h3>

<p>As I continued to mature and advance in my career, I ended up taking on the role
of a more senior developer and mentor, as well as having more say in the work
I was doing.  Although I saw myself taking on more responsibility, there was no
event that sparked a big change, until&hellip;</p>

<p>In late 2016, I attended RubyConf in Cincinnatti, where I heard Paulette Luftig&rsquo;s
talk, <a href="https://www.youtube.com/watch?v=EkLdO-SphxA">&ldquo;Finding Your Edge Through a Culture of Feedback&rdquo;</a>. She ended with
a few recommendations for books to read, and I decided that this should be the
next step for me. There are many fantastic texts about developing skills in
communication, team-building, empathy, and other soft skills; I&rsquo;d be cheating
myself of personal and professional growth if I didn&rsquo;t take advantage!</p>

<p>A few days after the conference, I bought a number of books recommended in that
talk, plus a few I&rsquo;d seen suggested around the internet. And so the fun began&hellip;</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Anyone wanna <a href="https://twitter.com/hashtag/BookClub?src=hash&amp;ref_src=twsrc%5Etfw">#BookClub</a> on some of these?<br><br>Nonviolent Communication<br>Difficult Conversations<br>Emotional Intelligence<br>&amp; 2 Dale Carnegie classics <a href="https://t.co/8eXPyzNTGK">pic.twitter.com/8eXPyzNTGK</a></p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/798657955142828036?ref_src=twsrc%5Etfw">November 15, 2016</a></blockquote>


<p>I wanted more, so I ordered books online. Like a good programmer, I was
approaching stack overflow&hellip;</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">As a reminder, if you want to join me in journeying through these empathy- (&amp; sometimes dev- too!) related books, ping me, let&#39;s <a href="https://twitter.com/hashtag/BookClub?src=hash&amp;ref_src=twsrc%5Etfw">#BookClub</a>! <a href="https://t.co/z6IuWVDdbR">pic.twitter.com/z6IuWVDdbR</a></p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/803702628412751872?ref_src=twsrc%5Etfw">November 29, 2016</a></blockquote>


<p>It was difficult to stay motivated and keep reading, so I knew I had to actually
get serious about making this thing happen. Also, I would get a lot more out of
it if I could discuss my thoughts with others. So I decided that RailsConf 2017
would be the Big Bang for Dev Empathy Book Club. I designed a site, set up a
book club on Goodreads, and walked into the conference ready to recruit.</p>

<p><a href="https://twitter.com/jah2488?lang=en">Justin Herrick</a> gave a workshop about team-building and communication,
so he seemed like a good person to try; he was! <a href="https://twitter.com/cdwort?lang=en">Amy Unger</a> approached me
in response to a tweet and asked to join as well; I was certainly delighted to
have another thoughtful voice actually approach me about the club! So we had a
panel.</p>

<p>I also gave a <a href="https://www.youtube.com/watch?v=KGi9wRHWvB0&amp;t=50m12s">lightning talk</a> (which I&rsquo;m far too proud of)
about a silly little hack, and used the opportunity to plug the project. So we
got a bit of free marketing.</p>

<p>Then everyone went home, and the real work began.</p>

<h3>Down to Reality</h3>

<p>Reading a dense book and actually trying to incorporate some ideas into your
life every 2 months is a reasonable but still significant commitment.
Even more difficult is coordinating with other people to make time for a panel
discussion, keeping online materials up to date, and generally promoting the
project. Dev Empathy Book Club is important to me because I think it adds a
much-needed voice of compassion and humanity to the commotion in our industry.
But it takes a lot of time and effort.</p>

<p>We also needed to evolve. Goodreads has a very unfriendly system for managing a
club, and the forums weren&rsquo;t easy to use. So we moved to an open Slack channel.
Then, we wanted to make it more interactive, less a pure announcements conduit,
so we started a monthly open discussion in Slack.</p>

<p>We also needed to be flexible. With a small number of panelists (though we&rsquo;re
<a href="https://docs.google.com/forms/d/e/1FAIpQLSeDXMso9kb_7tkiOH5PxC2h15VwXQsMxxi8KSWsmnXTEm5_WA/viewform">looking to grow</a>!), sticking to a schedule has been a real challenge,
resulting in 5 instead of 6 books covered over the last year. We&rsquo;re hoping to do
better this year, to provide a more consistent experience for participants in
the club.</p>

<h3>This Just Got Real</h3>

<p>While being part of Dev Empathy Book Club, I took on an informal team lead role
within my working group. Since we went through a few management-related books at
the same time (<em>The Mythical Man-Month</em>, <em>Radical Candor</em>, <em>Peopleware</em>), I had
the opportunity to think about the ideas conveyed and experiment in a real-life
work environment. I saw that people respected me because I invested a lot of
thought into how teams work in general, and how to make my specific team more
effective and simultaneously much happier.</p>

<p>Then, a month ago, I was informed that I would have an opportunity to move into
a management role at my company.</p>

<p>A year ago, I would have been terrified, if the opportunity had even been
presented, which of course it wouldn&rsquo;t have. I wasn&rsquo;t ready. Now, while I didn&rsquo;t
walk into the role as an expert (it takes a lot of experience to get there!), I
could consider myself educated enough to know how to learn the rest. A year of
investment truly paid off.</p>

<h3>What Are You Waiting For?</h3>

<p>Even if management will never be your thing, soft skills are the big
differentiator between people who write code and people who solve real-world
problems using code. They might save you wasted years of effort by solving the
people problems that would otherwise have mandated countless lines of code. And
they will definitely make you happier in your job. You have to deal with other
people all the time; may as well learn to enjoy it and make the most of it!</p>

<p>Becoming a more empathetic, compassionate, kind person with
better communication skills will probably be the most valuable investment in
your career (and possible your life in general).</p>

<p>Is Dev Empathy Book Club right for you? If you&rsquo;re looking for something concrete
and consistent to add to your routine to develop personally and professionally,
check it out!</p>

<p>If this isn&rsquo;t the right time for you to join, that&rsquo;s fine too. I&rsquo;d love if you
would share this post, and the club, with friends, or tweet about it with the
hashtag <a href="https://twitter.com/hashtag/DevEmpathy?src=hash">#DevEmpathy</a>. (Or just mention our Twitter account, <a href="https://twitter.com/DevEmpathy?lang=en">@DevEmpathy</a>!)</p>

<p>You can find out more information on our site, <a href="http://devempathybook.club">devempathybook.club</a>.</p>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 3 Keys to Software Quality]]></title>
    <link href="https://amcaplan.ninja/blog/2017/05/17/the-3-keys-to-software-quality/"/>
    <updated>2017-05-17T19:02:22+03:00</updated>
    <id>https://amcaplan.ninja/blog/2017/05/17/the-3-keys-to-software-quality</id>
    <content type="html"><![CDATA[<p>Why do software projects fail?</p>

<p>This question is difficult to answer precisely because there isn&rsquo;t a single
answer.  Sometimes the blame falls to technical debt which hamstrings
scalability, the ability to ship new features, or the ability to respond to
market demands.  Other times it&rsquo;s the lack of business model, which sinks the
entire company.  In certain situations, various parts of the organization not
seeing eye-to-eye is the culprit; the lack of shared vision causes sales to
over-promise, engineering to develop the wrong things, or marketing to pursue
the wrong strategy.</p>

<p>The causes are many and varied, yet somehow as engineers we focus a lot on &ldquo;Good
Code&rdquo; (however we choose to define it), which fails to address most of these
problems.  Why?</p>

<!-- more -->


<p>If I were to hazard a guess, I&rsquo;d say it&rsquo;s because we as technical people are
trained (or believe we are trained) to understand issues of Good Code more
easily than we can solve business challenges or organizational dysfunction.  As
humans, we tend to favor investing time in the problems we know how to solve
rather than the problems that most need careful solving (<a href="https://en.wikipedia.org/wiki/Law_of_triviality">Parkinson&rsquo;s Law of Triviality</a>).
Good Code is a problem we think we know how to solve, so we try to solve it and
forget about the larger questions that determine the success or failure of our
endeavors.</p>

<h3>What is Software Quality?</h3>

<p>Traditionally, we see the role of engineers as outputting high-quality software
that meets a particular need.  We then define &ldquo;high-quality&rdquo; in purely technical
terms.  This has to end.</p>

<p>The only point of writing software is to solve problems.  In the context of a
business, every bit of software writing should be meant to target one of three
fundamental problems every business faces:</p>

<ul>
<li>Generating Revenue (or, for a non-profit, doing good)</li>
<li>Lowering Costs</li>
<li>Reducing Risk</li>
</ul>


<p>For the remainder of this post, I&rsquo;ll include those 3 elements in the (badly
defined) term &ldquo;business value.&rdquo;  Other places on the internet may define
business value otherwise; that&rsquo;s fine, it&rsquo;s just for this post.</p>

<p>If the purpose of software is to generate business value, it stands to reason
that the quality of software is simply a matter of how much business value it
generates.  &ldquo;Is it high-quality?&rdquo; becomes a question of &ldquo;How fit is it for
purpose?&rdquo;</p>

<p>That definition will probably make a lot of engineers uncomfortable.  Isn&rsquo;t my
job to write code, and someone else can think about the business impact?</p>

<p>Sure, you could look at it that way.  But that means that the fundamental
question of whether your software is valuable&mdash;and, as I define it,
high-quality&mdash;rests in the hands of other people without your input.</p>

<p>So think of it this way: The more you involve yourself in understanding, and
maybe even influencing, the business elements of your project, the more
effective you&rsquo;ll be at creating the software your business/clients really need.</p>

<h3>A New Framework</h3>

<p>We do many things as engineers and as organizations to improve the quality of
our software.  I believe all these practices really target one or more of 3
primary objectives, which I term Usefulness, Sustainability, and Accuracy.
(You&rsquo;ll note that the acronym is USA.  No, I didn&rsquo;t choose the words for the
acronym, it sort of just happened.)  Let&rsquo;s define these terms a bit better:</p>

<ul>
<li><strong>Usefulness</strong> asks the question: &ldquo;Does the software solve the problem
effectively?&rdquo;  It requires verifying both that the problem we imagine actually
exists, and that our product solves the problem in the way that works best for
the users.</li>
<li><strong>Sustainability</strong> asks the question: &ldquo;Can we keep building without
unnecessary obstacles?&rdquo;  Certainly, we need to think about the software itself.
Is it written in a flexible way that will allow us to come back later and make
the changes we need?  We also need to think about the development team, which
likely undergoes far less churn than the code, and hence is even <em>more</em>
important to the sustainability of your product than the software itself.  Are
you building up the team to support constant improvement and open lines of
communication?  Does the team have any instability that threatens future
progress?</li>
<li><strong>Accuracy</strong> asks the question: &ldquo;Does our software work the way we think it
does?&rdquo;  It focuses on the relationship between ourselves and our code.  We must
make sure that we&rsquo;ve accurately understood the problem and the codebase, and as
new information comes in we must always ensure the state of the codebase
reflects the current state of our understanding.</li>
</ul>


<p>With these 3 major objectives in mind, let&rsquo;s get into the weeds a bit and think
about how they impact our day-to-day work.</p>

<h3>Making it Concrete</h3>

<p>Every team, project, and situation will have its own way of defining how various
practices support (or don&rsquo;t) the 3 objectives.  I&rsquo;ll just give a few examples of
practices that I&rsquo;ve found to be impactful on the teams where I&rsquo;ve worked.  Let&rsquo;s
start with a visual map of how I see things:</p>

<p><a href="https://amcaplan.ninja/images/USA_map_large.png" target="_blank"><img src="/images/USA_map.png" alt="Map of USA practices" /></a></p>

<p>Without getting into the gory details (though I did give <a href="/railsconf2017">a talk</a>
about that), here&rsquo;s a guide to interpreting that picture.</p>

<p>The blue circle on the bottom is probably easiest to understand.  It includes a
variety of practices designed to increase confidence that what&rsquo;s in your head
matches what&rsquo;s in the code.  This includes testing practices, programming
language features, tools and techniques for reducing complexity, and increasing
the number of programmers who see and interact with code before it&rsquo;s committed
and deployed.</p>

<p>The green circle on the top-right is about maintaining flexibility while
avoiding elements of instability.  Anything that makes it easier to build
without breaking things, creating a tangled mess, or backing yourself into a
corner (from a perspective of product development) goes there.  Also included
are practices that build the team, improve the skills of developers, and make it
easy (in the context of a larger organization) to interoperate with other teams
and/or move people across team boundaries.</p>

<p>The top-left red circle is about connecting our applications to their purpose.
Probably the most important piece is &ldquo;Focus on Delivering Value&rdquo;; all else can
be derived from it.  The red circle is populated by practices that help you
understand your users more effectively, keep their needs in mind as you code,
and do the most important work first.  There are elements of both making the
solution that works for them (researching their needs, making it performant) and
making the solution work for them (providing it when they need it, with
appropriate documentation, and the ability to find what they need).</p>

<p>One non-obvious (and likely controversial) thing is the fact that I&rsquo;ve put a
number of technical practices into the red circle.  I believe that when we have
multiple people working on code, or we explicitly document how a system is to be
used via integration testing, that helps us focus on the end value provided to
the user, at least opening up space for having conversations about the business
value created by our software.  I don&rsquo;t think we&rsquo;ve fulfilled our obligation to
the Usefulness objective just by doing those things, but they&rsquo;re a good start.</p>

<p>I&rsquo;ve also mentioned a few central practices, which are just my opinion (as is
the rest of this map):</p>

<ul>
<li>I believe having a broad-based <strong>testing</strong> strategy provides meaningful signal on
all 3, since it allows you to write correct code the first time, avoid breaking
it later, and&mdash;if you write proper integration tests&mdash;helps you to
keep user needs in mind.</li>
<li><strong>Pairing</strong> and <strong>mobbing</strong> help you write code with fewer mistakes, build the
team going forward, and provide space for conversations about the purpose of the
current task and how to best accomplish it.</li>
<li>The Single Responsibility Principle (<strong>SRP</strong>) is about making sure each part
of your system does one thing, and does it well.  This makes it easier to write
accurate code the first time; if the purpose is clearly defined, it&rsquo;s much
easier to test whether the code actually achieves it.  It&rsquo;s also easier to come
back later and make a change, since you know exactly what to change.  Finally,
focusing on the purpose of your code helps keep in mind the big picture of why
you&rsquo;re writing the code in the first place.</li>
<li><strong>Frequent releases</strong> allow you to deliver value more quickly to the user.  If
you think of value creation as represented by (<em>value created per time</em> ⨉ <em>time
software is in use</em>), it&rsquo;s clear that shipping value earlier beats later.
Frequent releases also allow you to find bugs more quickly (users are really
good at figuring out when your software is broken!) and avoid building castles
on top of flawed ideas you only find out are flawed months later (hence helping
Sustainability).</li>
</ul>


<p>Again, these are just my own opinions, based on my experiences with these
practices and how I&rsquo;ve seen them utilized on the teams I&rsquo;ve been part of.  Your
team will derive more or less, and different, benefit(s) from these same
practices, and that&rsquo;s normal and expected.</p>

<p>As an exercise, I&rsquo;ve made a blank version of the map available in
<a href="/assets/railsconf-2017/exercise.pdf">PDF</a>,
<a href="/assets/railsconf-2017/exercise.key">Keynote</a>, or
<a href="/assets/railsconf-2017/exercise.pptx">PowerPoint</a> form for you to fill out with
your own teams.  I&rsquo;d love to see how your maps stack up against mine!</p>

<h3>Bridging the Gap</h3>

<p>Bob Martin, citing Kent Beck, <a href="https://8thlight.com/blog/uncle-bob/2014/03/28/The-Corruption-of-Agile.html">wrote</a>
that the Agile Manifesto was intended &ldquo;to heal the divide between development
and business.&rdquo;  Unfortunately, 16 years later, that&rsquo;s nowhere near a solved
problem.</p>

<p>I believe that divide can be healed if we learn to speak a common language,
relating elements of technical excellence to meeting business needs, showing how
the things we care about as engineers are things everyone should care about.
That means going beyond our technical peers to understand the needs of other
parts of our organizations, and figuring out our role in meeting those needs.</p>

<p>If we learn to speak the language of business, just a little bit, we can expect
to see a lot more understanding and respect coming in the opposite direction,
from businesspeople to developers.  Maybe we&rsquo;ll even develop psychological
safety and trust.  Wouldn&rsquo;t that be great!</p>

<p>We&rsquo;re all in this together.  Let&rsquo;s start acting like it.</p>

<p><em>Note: Based on a talk given at RailsConf 2017. Check out the original
talk <a href="/railsconf2017">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on 8 Days of Blog Posts]]></title>
    <link href="https://amcaplan.ninja/blog/2017/01/01/reflections-on-8-days-of-blog-posts/"/>
    <updated>2017-01-01T12:09:02+02:00</updated>
    <id>https://amcaplan.ninja/blog/2017/01/01/reflections-on-8-days-of-blog-posts</id>
    <content type="html"><![CDATA[<p>I started the <a href="/blog/2016/12/25/8-crazy-blog-posts">8 Crazy Blog Posts Challenge</a>
as a way to stretch myself and get back in the habit of writing.  As in writing
software, blogging regularly is difficult when there&rsquo;s no pressure to ship.</p>

<p>It certainly got me to release more material than has been my recent practice,
but it&rsquo;s worth analyzing the process, the outcomes, and the cost.</p>

<!-- more -->


<h3>The Creative Process</h3>

<p>My usual blogging workflow (if such a thing can exist) looks something like
this:</p>

<ol>
<li>Wait for something to really interest or bother me</li>
<li>Let it simmer for a while as more complex ideas develop</li>
<li>Figure out what I want to say about it</li>
<li>When I have time, develop the ideas into the beginnings of a post</li>
<li>Sit on it some more</li>
<li>Come back to it eventually and finish the post</li>
<li>Edit heavily</li>
<li>Ship It</li>
</ol>


<p>This leads to a smaller number of (hopefully) high-quality writings worth
sharing.  In contrast, my workflow this week looked more like this:</p>

<ol>
<li>Freak out about an impending self-imposed deadline</li>
<li>Frantically brainstorm until coming up with an idea that seems worthwhile</li>
<li>Flesh out the idea as I write</li>
<li>Edit lightly</li>
<li>Ship It</li>
</ol>


<p>The result was a lot more content, but on occasion I wondered whether the stuff
I was publishing was worth reading.  Trying to be faithful to my arbitrary
commitment, I may have pushed through an idea that wasn&rsquo;t perfect, or wasn&rsquo;t
fully developed in my head yet.</p>

<p>Interestingly, though, I found that the very act of writing was less capturing
thoughts and more creating them.  Starting with just the nugget of a thought,
the experience of writing allowed the thought to develop into a full-blown
argument or hypothesis.</p>

<p>I know everyone writes differently.  Some people start with an outline, then
fill it in with details as they go.  I have never worked that way as long as I
can remember.  In elementary school, when teachers would ask for an outline as
the first step of an essay, I would hand in my outline, get it graded, then
throw it out and actually begin writing.  To me, the written word is a river; I
go where it flows.  My words and myself are partners in creativity, building
crude thoughts into concrete concepts and coherent frameworks.</p>

<p>Incidentally, this is also how I write poetry.  I don&rsquo;t have a destination in
mind; I write the first line, then the second, and let the words guide me
wherever they may.  Of course, in poetry and prose, there are editorial steps as
well, but those merely optimize the core of the idea as it stands when first
composed.</p>

<p>In truth, the artificial time pressure made room for a workflow more suited to
how I naturally write.  I&rsquo;m not in a place to judge the end product, of course.
I leave that as an exercise for you, dear reader.</p>

<h3>Outcomes</h3>

<p>I can&rsquo;t say whether or not my (small) audience did or didn&rsquo;t enjoy my posts.  I
can, however, comment on their more objective elements.</p>

<p>One easily quantifiable measure is the ratio of technical to non-technical
posts.  We can knock out the first, introductory post, as well as this one,
leaving us with 6 posts to analyze.</p>

<p><a href="/blog/2016/12/28/this-is-your-brain-on-ruby/">This Is Your Brain on Ruby</a> was
decidedly technical. <a href="/blog/2016/12/29/diversify-your-learning/">Diversify Your Learning</a>
and <a href="/blog/2016/12/31/how-to-give-a-great-tech-conference-talk/">How to Give a Great Tech Conference Talk</a>
were decidedly not.  The remaining 3 posts focused on the area where I&rsquo;m most
comfortable and (I think) most effective, namely the human side of technology.</p>

<p>Comparing this to the past, through mid-2015 I only wrote technical posts, then
I abruptly released 5 straight completely non-technical posts.  In that light,
this exercise was a recalibration for me, centering me between the purely human
and purely technical.</p>

<p>Another significant outcome for me was the ability to flesh out some back-burner
thoughts into ideas that I may now use to submit to conference CFPs.  Some of
the stuff I wrote about was never fully developed, and having this obligation
helped me to realize that there was significant depth where I hadn&rsquo;t perceived
any in the past.</p>

<p>One final note is in order.  I&rsquo;ll readily admit to being an attention seeker,
and this exercise brought out the worst in me in that regard.  I tweeted daily
about the experiment, and watched my Twitter notifications and Google analytics
to see if anyone noticed.</p>

<p>No one did. (Well, except for this
<a href="https://twitter.com/peterc/status/813033579982753793">really nice comment</a>
from Peter Cooper.)  And honestly, it kind of hurt.</p>

<p>Yes, I know it&rsquo;s a really busy time for the world.  People are with family, or
taking vacations, or whatever.  Somehow the logic part of my brain resented it
anyway.</p>

<p>So it became an opportunity to exercise discipline, and accept that I write all
this not because other people read it, but because it&rsquo;s worthwhile in itself.
Expressing my ideas, and staying accountable by doing so in public, allows me to
form a more concrete perception of who I am, and why I do what I do.  It also
allows me to turn on myself with a critial eye, and figure out whether I&rsquo;m
fooling myself into doing things that counter my self-interest or harm others.</p>

<p>It&rsquo;s not an easy lesson to learn, but maybe it was more valuable to me to have
my blog ignored than it would have been to have people reading and talking about
it.</p>

<h3>The Cost</h3>

<p>Wowee.  It&rsquo;s been a long week.</p>

<p>I started the challenge with 2 blog posts already written, 1 good idea, and the
knowledge that the final post would be a &ldquo;lessons learned&rdquo; exercise.  That left
6 posts to write, 4 of which needed ideas.  This is actually a pretty tall order
for someone like me, who tries to keep the content high-quality and valuable to
others.</p>

<p>Coming up with post ideas mostly happened while walking around, or otherwise
going about my daily business.  There was some dedicated brainstorming time, but
that wasn&rsquo;t too significant.</p>

<p>The real time sink was the writing process itself.  Writing and editing posts
could easily take 3-4 hours apiece, more if I needed to add some custom
JavaScript (as I did for the censoring functionality
<a href="/2016/12/28/this-is-your-brain-on-ruby/">here</a> to make blog readers, and
myself, more comfortable).  Those 3-4 hours needed to be highly focused, and I
would walk away feeling drained and needing a break.</p>

<p>It helped to have a lot of vacation time, and even working hours were pretty
relaxed since lots of people take vacation in the last week of December.  That
meant I had time even during work hours to be cranking out posts, though mostly
they were done during personal time.</p>

<p>Also not helpful: My 18-month-old got sick this week, sicker than she&rsquo;s ever
been.  Seeing your child with a temperature of 40℃ (that&rsquo;s 104℉ for you
imperialist Americans) is terrifying, and practically it forces you to drop
everything.  The worst of it lasted about 2 days, during which time I didn&rsquo;t get
much done in general.</p>

<p>I had hoped to stay ahead of the curve throughout the 8 days, always at least
one post ahead, but reality hit hard, and I ran out of headway by Friday.  I had
to crank out one post on Friday morning, and another on Saturday night.
(Anything computer-related is off-limits to me Friday evening through Saturday
evening, since that&rsquo;s the Jewish Sabbath.)  So I made it, I guess, but it was
down to the wire and quite stressful.</p>

<p>Even when I was ahead of the curve, I found myself staying up hours later than
usual just to get things done in time.  This made it much more difficult for me
to function throughout the day.</p>

<p>If I do something like this again, I realize I can&rsquo;t push myself this hard.
It&rsquo;s just not worth it.  Releasing a post a day could be fun in the future, but
I&rsquo;d want to have all, or nearly all, the posts ready well in advance.</p>

<h3>Concluding the Conclusion</h3>

<p>In the final calculus, I think it was a worthwhile experiment.  I paid a heavy
price in terms of stress, but it helped me to think of blogging as part of what
I normally do, and to find a more balanced voice with regard to the content of
my posts.</p>

<p>I hope this experiment will inspire me to keep growing as a writer, to keep
developing interesting ideas, and to share them with you, my readers.</p>

<p>Whenever you read this post, whether it be a day or a decade after I wrote it,
I hope you find its contents, and the products of this week&rsquo;s efforts, valuable
and interesting.  And I hope this week turns out to be the beginning of a very
productive 2017!</p>

<p><strong><em>Written as part of the 2016 <a href="/blog/2016/12/25/8-crazy-blog-posts">8 Crazy Blog Posts Challenge</a>.</em></strong></p>
]]></content>
  </entry>
  
</feed>
