<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/blog/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2015-11-06T00:25:44+02:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recruit Software Engineers with this 1 Weird Old Tip]]></title>
    <link href="http://amcaplan.ninja/blog/2015/08/02/recruit-software-engineers-with-this-1-weird-old-tip/"/>
    <updated>2015-08-02T09:55:53+03:00</updated>
    <id>http://amcaplan.ninja/blog/2015/08/02/recruit-software-engineers-with-this-1-weird-old-tip</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read a lot recently about how hard it is to recruit programmers in today&rsquo;s
market.  Personally, I think it&rsquo;s all hogwash.</p>

<p>There are plenty of great programmers out there, but companies aren&rsquo;t actually
looking for them.  What they really want is a plug-n-play solution, a programmer
who knows what they need him/her to know, who can churn out code and build
software solutions.</p>

<p>The problem is that engineering is an art and a discipline, and you can&rsquo;t just
expect to hire someone and have them show up batteries included.  A company that
refuses to train its coders is a company that won&rsquo;t find enough people to meet
its needs.</p>

<!-- more -->


<h2>What Not To Do</h2>

<p>Recently, I saw an ad for a job that required, among other things:</p>

<ol>
<li>5+ years experience</li>
<li>A college degree (no &ldquo;or equivalent training and experience&rdquo;)</li>
<li>Being comfortable with the Microsoft stack, Java, Angular, and Node</li>
<li>Knowledge of data privacy practices and laws</li>
<li>Understanding of SSO and SAML</li>
<li>Project management experience</li>
<li>Experience in the healthcare technology industry</li>
</ol>


<p>In other words, the ad was for a college-educated senior front-end/back-end
developer, security expert, and project manager with healthcare tech experience,
all rolled into one.</p>

<p>The &ldquo;Accountabilities and Activities&rdquo; section was equally incoherent,
essentially requiring involvement with every part of the stack, from end-users
to business plans to documentation to configuration to application architecture.
(Interestingly, out of 11 bullet points, only one indirectly mentioned coding at
all: &ldquo;Develop new or modify existing applications and systems as required.&rdquo;)</p>

<p>I could tolerate advertising for a generalist, even though that&rsquo;s already a
unicorn.  But what really bothers me is the list of requirements.  That list
severely narrows the already-tiny population that would be relevant to the job,
for no good reason.  In fact, it narrows it for a very bad reason: The company
is simply unwilling to train new hires.  Any programmer it picks up must be
plug-n-play, no instructions necessary.</p>

<p>I have no idea whether that job ad picked up anyone, but I&rsquo;m 99% certain that if
it did, it was someone who had no more than 3-4 of the points I mentioned.
Because the unicorn they&rsquo;re seeking just doesn&rsquo;t exist, but overconfident people
certainly do.</p>

<h2>What To Do?</h2>

<p>If you&rsquo;re interested in opening up your application pool to people who are worth
hiring, people who will be great to work with, and maybe don&rsquo;t have 100% of the
skills you need, try toning down your job ads.  Limit requirements to the
absolute minimum you can imagine.</p>

<p>But there&rsquo;s more than that.  Think of it as a sales pitch.  You don&rsquo;t sell a
product by saying, &ldquo;Look at how much money you&rsquo;ll get to pay for it!  And did we
mention that tax is not even included in the price?&rdquo;  You sell
a product on its features.  &ldquo;Look at what this product can do!  It will
revolutionize your lifestyle!&rdquo;</p>

<p>Most job ads sell the job as &ldquo;Here&rsquo;s what <em>we</em>, the company, want you to do, and
this is what <em>we</em> think you need to do it.&rdquo;  Maybe think about it from the job
seeker&rsquo;s perspective for a change.  Why should I, as a programmer in high
demand, focus the majority of my waking hours on building your product?  What&rsquo;s
my motivation?  What can you do to help me build my career?  Will your company
give me the time to actually enjoy the salary you&rsquo;re paying me?</p>

<p>I wrote a sample job ad for a made-up company, to demonstrate the sort of perks
that might appeal to software developers.  Some might even appeal to
business-oriented folks as well.  (I&rsquo;ve erred on the side of having this run too
long, since I hope companies will be able to use this as a brainstorming
example.  Your actual job ad should be way shorter than this.)</p>

<blockquote><p>Do you care about teamwork, learning, and professional development?  Want to
work with a smart, diverse group, solving complex problems?  Do you feel
satisfaction from writing clean code with excellent test coverage?  Do you enjoy
even more when a teammate shows you how to improve your code?</p>

<p>If you answered &ldquo;yes&rdquo; to those questions, SawftWearLy would love to chat with
you.  We&rsquo;ve built a professional environment where we constantly iterate on our
practices, both human and technical.</p>

<p>At SawftWearLy, we seek to create value above all, so we&rsquo;re less nitpicky
about the where and when of how you work.  We do believe, though, that pair
programming and code review are building blocks of better code and professional
development, so we&rsquo;ll ask you to make sure your hours are conducive to
teamwork.</p>

<p>We understand that it&rsquo;s easier to build great developers than to recruit them,
so we won&rsquo;t demand X years of experience in Y.  We&rsquo;re looking for devs who are
bright and eager to learn, and we&rsquo;ll provide the support that we can to help you
be awesome.  We maintain a library of hard-copy and Kindle books, and we&rsquo;ll
get you a CodeSchool or PluralSight subscription if you&rsquo;d like.  Our engineers
attend and speak at conferences and local meetups.  We also arrange frequent
internal presentations where developers can speak about anything related to
coding.  We contribute to open source, even during work hours.</p>

<p>SawftWearLy tries to create an enjoyable, dynamic work atmosphere, but we know
your work isn&rsquo;t your whole life.  We want to minimize the tension between work
and your other priorities. To make sure you feel comfortable taking time off and
relaxing, we have a minimum/maximum PTO policy, so everyone needs to take a
vacation, and you know how much is too much.</p>

<p>Rather than beer kegs or ping-pong tables, we&rsquo;ve decided to invest in your
future with a partial matching 401(k) plan.  We have top-notch health and life
insurance options, so you&rsquo;ll have peace of mind knowing that you and your loved
ones are covered.</p>

<p>Compensation is standardized per job category, so you will know you&rsquo;re getting
fairly compensated.  However, we do award bonuses based on performance, so we
can recognize employees who display initiative and creativity in their work.</p>

<p>SawftWearLy is a workplace where managers speak to their team members to make
sure they have the support they need.  It&rsquo;s a collaborative space where we make
time to talk about what we can do better, or just bounce ideas off each other.
We celebrate questions, and value answers that convey not just information, but
understanding.</p>

<p>If SawftWearLy sounds like a good fit for you, drop us a line at
<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x64;&#x65;&#x76;&#64;&#115;&#97;&#x77;&#x66;&#x74;&#119;&#101;&#x61;&#114;&#46;&#x6c;&#121;&#46;">&#100;&#x65;&#x76;&#x40;&#x73;&#x61;&#x77;&#102;&#116;&#x77;&#101;&#97;&#x72;&#x2e;&#108;&#x79;&#46;</a>  Tell us about something you&rsquo;ve built, what you&rsquo;re learning
now, and something you like doing outside of programming.</p></blockquote>

<p>Note that there weren&rsquo;t really any requirements here.  That&rsquo;s because you don&rsquo;t
actually need a coder who&rsquo;s familiar with your technical stack, or your business
domain.  They&rsquo;ll figure it out in a couple months.  (Would you rather spend 2-3
months training a new hire, or wasting your efforts on continued attempts to
find someone who knows it all already?)  But you need people who are smart and
motivated, and who know how to program well.  And you need to keep them happy,
because there are plenty of other companies out there.</p>

<h2>The Catch</h2>

<p>Some of you might be thinking, &ldquo;That sounds great, but we don&rsquo;t actually do that
at our company!&rdquo;  Well, guess what?  That&rsquo;s exactly the point.</p>

<p>If you want awesome developers to work for you, you need to be an awesome place
for developers to work at.  It&rsquo;s impossible, without lying outright, to have an
awesome job ad without being an awesome workplace.</p>

<p>So the actual secret to hiring great developers is to treat the ones you have
really well, and let your job ads reflect that.  Really, we don&rsquo;t demand much &ndash;
give us learning opportunities and good people to work with, and chill out if we
want to work from 11AM to 7PM, or 7AM to 3PM, or work from home 3 days a week.</p>

<p>On my team, I&rsquo;ve been a major evangelist for pair programming, I&rsquo;ve been very
involved with training newer folks, and I do it across an ocean at +7 hours.
Especially in this field, it&rsquo;s so important to be open to creative solutions for
getting good people to work together, because good people are hard to come by.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Should a Junior Developer Work On First?]]></title>
    <link href="http://amcaplan.ninja/blog/2015/06/29/what-should-a-junior-developer-work-on-first/"/>
    <updated>2015-06-29T01:01:19+03:00</updated>
    <id>http://amcaplan.ninja/blog/2015/06/29/what-should-a-junior-developer-work-on-first</id>
    <content type="html"><![CDATA[<p>Recently, a new member of our team asked me (and other coworkers) to list 3
things a junior developer should accomplish within their first 3 months on the
job.  Being at the end of my first year on the job, it was an excellent
opportunity for reflection on what I have learned during this year which was
most useful.</p>

<p>After some thinking, I came up with 3 concrete goals, emblematic of 3
big-picture objectives which should be guiding lights for the new developer.</p>

<p>Here are my picks:</p>

<ol>
<li>Be reasonably comfortable with TDD</li>
<li>Write good commit/PR messages</li>
<li>Present at a team hangout</li>
</ol>


<p>These might seem like arbitrary goals, so they deserve some explanation.</p>

<!-- more -->


<p>First, you&rsquo;ll notice that I did not mention &ldquo;learn X language&rdquo; or &ldquo;become
proficient in Y framework.&rdquo;  This is simply because languages and frameworks are
important, but not inherent, goals.  The languages and libraries you use today
will most likely fade with time, to be replaced by newer tools more appropriate
for the tasks of tomorrow.  But <em>how</em> to write code will be just as relevant in
30 years as it was 30 years ago.  Design principles evolve as well, but the idea
of designing code, rather than just getting things to work, is the most
important, and biggest, jump.</p>

<p>Now, let&rsquo;s move on to expanding these concrete goals into coherent broad ideas.</p>

<h2>TDD: A Design Tool</h2>

<p>&ldquo;Why test?&rdquo; is a very complicated question with a lot of answers.  Justin Searls
has <a href="https://www.youtube.com/watch?v=9_3RsSvgRd4">an excellent talk</a> listing about 10 different reasons
for testing.  The reason I focus on TDD here is because it is the most powerful
technique I know for learning how to design code from the outside in.</p>

<p>As a new developer, you are probably focused on assimilating the multitude of
new technologies you need to master to get things to work.  It probably seems
odd that I would recommend focusing on technique, rather than just staying
afloat.</p>

<p>However, I would argue that feeling lost is just part of being a software
developer today.  There is a constant influx of new languages, frameworks, and
tools, and it is far too easy to be satisfied with just making things work.
However, programmers who excel in their careers make sure to reserve time for
becoming better at the basics of how to write good code.  If you don&rsquo;t make time
for that now, when will you?</p>

<p>There are many ways of becoming better.  You can get ideas from articles and
conference lectures, books and blog posts.  But there is a jump to be made from
the theoretical to the practical.</p>

<h4>What is &ldquo;good code&rdquo;?</h4>

<p>Good code, among other qualities, is modular and intuitive.</p>

<ul>
<li>By modular, I mean that each piece carries a responsibility appropriate for
its size.  Methods do just one thing, and do it well.  Classes are the same, but
a &ldquo;thing&rdquo; is a larger unit of work.  Collaborating objects form systems that
accomplish yet larger things, but at every level, there is a single unifying
theme to the system.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>By intuitive, I mean that it acts in the way you would expect, both from the
outside and once you open it up.  The outside piece of that statement means that
its public API provides as few surprises as possible.  The input/output, as
closely as possible, matches what the average programmer would expect it to be.
Additionally, the innards are divvied up in a fashion that makes it easy for
someone new to the codebase to interpret and reason about.  Clever hacks or
thrown-together solutions are generally not intuitive, and tough to modify
later.</li>
</ul>


<h4>So what does TDD have to do with all this?</h4>

<p>TDD enforces (as much as is possible to enforce such things) code which is
modular and intuitive.</p>

<p>It is exceptionally difficult to write tests for code which is not modular.
Generally speaking, code with intertwined responsibilities will also have deep
interdependencies between modules.  This causes immense pain in testing,
encouraging the programmer to think about how to tease apart responsibility and
dependency.</p>

<p>Yet beyond that testing pain, there is a larger point: it is very hard to test
code when you don&rsquo;t understand its responsibility.  Usually, if you have not
defined what code is supposed to do, it will be nearly impossible to write the
tests first, because the tests are simply a concretion of the responsibilities
of the code you are about to write.  By following the principles of TDD, you
encourage yourself to state your goals, thereby breaking up your code before you
have written a mess of intertwined modules.</p>

<p>TDD also strongly encourages intuitive code.  When engaged in TDD, you should be
testing only the public API of your code, defining inputs and expected outputs,
before you figure out the implementation.  This means that your primary goal
when writing the code itself is to meet the needs that you have already
described in your tests.  This, in turn, means that you are thinking first about
the user of your code, and only afterwards about the internal algorithms and
details involved in your solution.  That leads to code which is friendlier for
outside use.</p>

<p>I don&rsquo;t think TDD necessarily offers much direction in terms of properly writing
the internals of your code, but I never promised a single, all-encompassing
solution, did I? 😉</p>

<p>Based on all this, I think that becoming comfortable with TDD is a highly time-
and effort-efficient method of speeding up the learning curve for excellent
coding habits.  Even if it&rsquo;s not the approach you take all the time (and hey,
<a href="http://www.quora.com/Does-Kent-Beck-use-TDD-at-Facebook-How">even Kent Beck doesn&rsquo;t think it should be</a>), it&rsquo;s a worthy
exercise to practice skills and thought patterns which ultimately will be quite
useful regardless of your workflow.</p>

<h2>Commit and PR Messages: A Primary Source of Communication</h2>

<p>One of the most important lessons to learn as a junior developer is that, unless
you are the only developer on your team, your code is a shared entity.  Your job
is not to be personally awesome, but rather to help your entire team be awesome.
This means you need to sometimes sacrifice some of your own productivity in
order to help everyone else be more productive.</p>

<p>Commit messages are a prime example of this.  In just a few seconds per commit,
you have the opportunity to lay out a trail of breadcrumbs to lead members of
your team toward understanding why certain decisions were made, why this was
added and that deleted.  You instruct them as to what code is relevant to a
particular feature, and what dangers would be involved in deleting it.</p>

<p>Pull request messages are, in a sense, just a broader repetition of the same
motif.  Rather than explaining a small bit of work, they expound on the
rationale for a set of adjustments to your application.  But if your team uses
a pull request-based workflow, these messages are even more important.  Rather
than reading your code and puzzling over what you were trying to accomplish,
your teammates can quickly understand your goals, and then evaluate whether you
achieved them in the best way possible.  A good pull request message can be the
difference between &ldquo;It looks like code, guess I&rsquo;ll merge it!&rdquo; versus &ldquo;That was
an interesting choice of how to tackle this issue, we should discuss it
further.&rdquo;  If you invest in the quality of code review on your submissions, you
will be rewarded with plenty of free advice on how to make your next bit of work
even better.</p>

<h4>Look Into Your Future&hellip;</h4>

<p>Beyond the basic point of just being a good teammate, there is another
compelling reason to write clear, thorough commit and PR messages: The next
person who has to read them just might be you.</p>

<p>Let&rsquo;s face it.  We might all talk about collective responsibility for a code
base, but if you wrote the code, you will likely be called in to explain why it
was written the way it was.  And you will also probably have forgotten by that
point why you did things that way.</p>

<p>If you leave yourself clear commit and PR messages, they will serve as memory
jogs so you can figure things out far more quickly.  If you left a bunch of code
with commit messages like &ldquo;fixed a thing&rdquo; and &ldquo;it works now&rdquo; &ndash; well, you&rsquo;re
gonna have a bad time.  And you will probably misunderstand your own code, and
break lots of things.</p>

<p>Realistically, what percentage of commits or PR messages will you ever read
again?  Probably no more than 5-10%.  But the amount of time you will save in
those 5-10% of cases is well worth the small upfront investment of archiving
your thoughts.</p>

<p>So care about your teammates, and care about your future self.  Learn to write
clear commit and PR messages, and you will thank yourself later when they are
your &ldquo;primary source&rdquo; of information about days of coding past.</p>

<h2>Presenting: The Code Is Not Enough</h2>

<p>Software, like any slice of the human enterprise, is really more about the
people making it than the product itself.  Most problems in software stem from
the people making it.  It follows that software will be as coherent as is the
communication amongst its developers.</p>

<p>If you want to be a successful coder, you also need to be a successful
communicator.</p>

<p>There are many formats of communication, including commit and PR messages, as
discussed above.  Most people can get along in one-on-one conversation, though
some (including myself) struggle even with that.  But even for people who are
natural conversationalists, presenting to a group can be difficult.  Yet it is
also necessary to learn how to present one&rsquo;s ideas cogently and convincingly to
a group.</p>

<p>The other salient point is that many junior software engineers are convinced
that they are no good, or at the very least so inferior to senior developers
that nothing they themselves say could possibly be of interest to others with
more experience.  Yet that could not be farther from the truth.</p>

<h4>Junior Devs: A Critical Voice In Our Community</h4>

<p>Junior developers need to understand: Your ideas are valuable.  You came into
this profession, this artisans' guild, because you find beauty in well-organized
code, you are awed by the power of loops and function calls and recursion, you
draw excitement from optimizing an algorithm from <em>O(n<sup>2</sup>)</em> to <em>O(n)</em>.  (At
least, I hope you do; otherwise, you&rsquo;ll be pretty bored in this business.)  You
see opportunity in new technologies, and you are still developing heuristics to
evaluate the tradeoffs inherent in choosing one over the other.</p>

<p>You are a neophyte.  And neophytes tend to ask the most interesting questions,
forcing people more experienced than themselves to articulate their opinions and
perspectives on issues that matter to everyone.</p>

<p>Because you are new to the trade, your ideas and experiences are valuable, and
your enthusiasm gives light and warmth to those who may have forgotten the
excitement of their earlier coding days.</p>

<p>So even if you speak about a technical topic they are thoroughly familiar with,
senior developers will still enjoy your presentation.</p>

<h4>Senior Devs: Seeing Beyond the Pedestal</h4>

<p>If you are not yet convinced, let me offer another argument.</p>

<p>Senior developers are simply programmers with more experience writing (hopefully
good) code, more familiarity with the breadth of languages and tools, and a
better understanding of the system underlying all programming platforms.  But
they are hardly godlike omniscient beings.  It&rsquo;s not too hard to find a topic
that the senior developers on your team haven&rsquo;t delved into, or at least offer a
fresh perspective which would be of interest to them.</p>

<p>Even if they are generally familiar with a topic, even if they utilize that
knowledge on a daily basis, there are still going to be some points that they
have forgotten or never learned about, so they will walk away with some useful
bits of knowledge from your presentation.</p>

<p>Finally, seniors are often interested, for business reasons or out of altruistic
motivations, in bringing in juniors and helping them to be as productive as
possible.  Your struggles in your work are useful and informative to more senior
folks on your team, helping them to reassess the process and iterate on their
onboarding process for new junior developers.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Your thoughts and learning will be of value to others, and by presenting, you
will develop a critical skill which &ndash; if not properly nurtured &ndash; could be the
barrier between you and a highly successful career.</p>

<h2>Summing It Up</h2>

<p>Now that we&rsquo;ve provided some theoretical background, the 3 goals listed above
might be stated as:</p>

<ol>
<li>Learning to design code effectively</li>
<li>Being a communicative team player</li>
<li>Gaining confidence in your worth as a coder</li>
</ol>


<p>Since I believe in concrete, rather than abstract, goals, I will stick with the
list above as a more helpful set of discrete accomplishments to be aimed for in
the first few months.  But with the broader goals in mind, hopefully the
specifics make more sense as guideposts on the journey toward a long, enjoyable,
successful career in code.</p>

<p><em>What do </em>you<em> think are the most important things for junior developers to work
on in their first few months on the job?  Share your thoughts in the comments!</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Modularity also often refers to the packaging of code into discrete bits which can be used elsewhere in your system.  I personally find the reuse of modules to be neither very common nor very fundamental to the practice of software engineering.  While it can be a useful technique on occasion, I hardly believe it to be one of the first few things a developer absolutely needs to learn. <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This applies in the open source community as well.  I am personally familiar with one meetup in NYC which often asks developers new to their open source project to speak about their experiences and challenges, to guide the maintainers towards providing useful tools and documentation for new users. <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Making of PersistentOpenStruct]]></title>
    <link href="http://amcaplan.ninja/blog/2015/05/21/the-making-of-persistentopenstruct/"/>
    <updated>2015-05-21T03:39:23+03:00</updated>
    <id>http://amcaplan.ninja/blog/2015/05/21/the-making-of-persistentopenstruct</id>
    <content type="html"><![CDATA[<p>So I built this thing&hellip;</p>

<h2>The Challenge</h2>

<p>Here&rsquo;s the problem we were having at work.  We have a bunch of microservices
which communicate with each other via HTTP.  Since they&rsquo;re passing around raw
data, and the shape often changes, we decided quite some time ago to use classes
inheriting from <code>OpenStruct</code>, that magical schema-free class, as a data container.</p>

<p>The problem is, <code>OpenStruct</code> is also ridiculously slow&hellip;</p>

<!-- more -->


<p>``` ruby
[1] pry(main)> require &lsquo;ostruct&rsquo;
=> true
[2] pry(main)> require &lsquo;benchmark/ips&rsquo;
=> true
[3] pry(main)> Benchmark.ips do |x|
[3] pry(main)<em>   class RegularClass
[3] pry(main)</em>     attr_accessor :foo
[3] pry(main)<em>   end
[3] pry(main)</em>
[3] pry(main)<em>   class OpenStructClass &lt; OpenStruct
[3] pry(main)</em>   end
[3] pry(main)<em>
[3] pry(main)</em>   x.report(&lsquo;regular class&rsquo;) do
[3] pry(main)<em>     r = RegularClass.new
[3] pry(main)</em>     r.foo = :bar
[3] pry(main)<em>     r.foo
[3] pry(main)</em>   end
[3] pry(main)<em>
[3] pry(main)</em>   x.report(&lsquo;OpenStruct class&rsquo;) do
[3] pry(main)<em>     o = OpenStructClass.new
[3] pry(main)</em>     o.foo = :bar
[3] pry(main)<em>     o.foo
[3] pry(main)</em>   end
[3] pry(main)* end
Calculating &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<pre><code>   regular class   114.702k i/100ms
OpenStruct class    14.400k i/100ms
</code></pre>

<hr />

<pre><code>   regular class      3.901M (± 4.0%) i/s -     19.499M
OpenStruct class    158.799k (± 7.1%) i/s -    792.000k
</code></pre>

<p>```</p>

<p>From that benchmark, it seems like <code>OpenStruct</code> is 4% the speed of a regular
class &ndash; not particularly helpful when performance is a significant concern.</p>

<p>In our case, profiling with <code>StackProf</code> showed that <code>OpenStruct</code> was taking up
13% of CPU time in many cases; in short, it was one of our worst offenders,
performance-wise.</p>

<p>However, we really wanted to stick with <code>OpenStruct</code> because of the flexibility
it provides.  How could we bridge that gap?</p>

<h2>Attempt 1: OpenFastStruct</h2>

<p>I had read about a gem called <code>open_fast_struct</code> recently, which provides a
different implementation of <code>OpenStruct</code>, with its own performance quirks.  In
most use cases, it outperforms <code>OpenStruct</code> by a factor of 4.  It achieves this
by skipping a step that <code>OpenStruct</code> does.</p>

<p>Internally, every time I call a new method on and <code>OpenStruct</code> instance, it
defines a new method for next time.  This is much more efficient if I&rsquo;m going to
be calling that method hundreds of times.  However, if I&rsquo;m just calling it a few
times, it&rsquo;s not worth it to define the method, and instead what I should really
do is continue to rely on <code>#method_missing</code>.</p>

<p>That idea is at the core of <code>OpenFastStruct</code>.  It just maintains an internal
hash containing the data you insert, and any call to <code>#method_missing</code> interacts
with that hash.  In contrast, <code>OpenStruct</code> also maintains an internal hash, but
defines methods on-the-fly to interact with that hash.</p>

<p>However, <code>OpenFastStruct</code> doesn&rsquo;t maintain the entire public interface of
<code>OpenStruct</code>, and it became clear we would need to monkey-patch it quite a bit
to get it to work for us.</p>

<p>Additionally, I realized that we didn&rsquo;t really need <em>all</em> the flexibility of
<code>OpenStruct</code>.  Instead, our needs would be best served by something that would
define the shape of the class on-the-fly and then stick with it.</p>

<h2>Attempt 2: PersistentOpenStruct</h2>

<p>So I decided to build a new gem.  <code>PersistentOpenStruct</code>, as the name suggests,
allows the construction of a class on-the-fly.  The major difference from
<code>OpenStruct</code> is that it defines methods on the class, rather than defining
singleton methods on the object.  This means that if I create 1,000 objects with
the same 8 properties, <code>OpenStruct</code> will define 8,000 methods, and
<code>PersistentOpenStruct</code> will define 8.</p>

<p>To make sure I obeyed the entire public interface, I decided to put this
together by subclassing <code>OpenStruct</code> and redefining the methods which would
otherwise define singleton methods.  This has the nice benefit that the entire
significant code in the gem is around 15 lines.  The downside is, of course,
that <code>PersistentOpenStruct</code> can only be understood in the context of
<code>OpenStruct</code> and depends on the internals of <code>OpenStruct</code>.  Still, I think the
tradeoffs are in favor of keeping things simple for now, and letting things
develop over time as needed.</p>

<p>The other thing I did was literally copy over the tests that are used to test
the original <code>OpenStruct</code> class.  The only changes I made were adjustments which
made sense in this case (unlike <code>OpenStruct</code>, what happens to one object affects
the <code>#respond_to?</code> answer of another), and adding some additional tests.</p>

<p>Enough of my chitchat, though, it&rsquo;s time for the results!</p>

<h2>PersistentOpenStruct Revealed</h2>

<p>Here&rsquo;s some code which demonstrates how <code>PersistentOpenStruct</code> works.</p>

<p>``` ruby
class MyDataStructure &lt; PersistentOpenStruct
end</p>

<p>datum1 = MyDataStructure.new(foo: :bar)</p>

<p>datum2 = MyDataStructure.new
datum2.respond_to?(:baz) #=> false
datum2.respond_to?(:foo) #=> true
```</p>

<p>Since <code>datum1</code> used <code>foo</code> as a key, every instance of <code>MyDataStructure</code> will
now have a <code>foo</code> method.  Again, this happens because <code>MyDataStructure</code> has the
<code>#foo=</code> and <code>foo</code> methods defined on the class as soon as any instance gets a
<code>foo</code> property.</p>

<p>As for performance?  You can download the gem and run the benchmarks yourself.
Various actions (key/value assignment on initialization, key/value assignment
after initialization, value access) have different comparisons, but generally
speaking, <code>PersistentOpenStruct</code> is about 25%-99% as fast as a regular class.</p>

<p>You can see the results I got on my Mac at the gem&rsquo;s homepage.</p>

<h2>The Bottom Line</h2>

<p>By simply dropping in <code>PersistentOpenStruct</code> in place of <code>OpenStruct</code>, we saw a
10% reduction in response time for Sidekiq jobs that relied heavily on
<code>OpenStruct</code>s.</p>

<p>Sound interesting?  Check out
<a href="http://github.com/amcaplan/persistent_open_struct">the gem&rsquo;s homepage</a> and give
it a whirl.  Drop me a line &ndash; leave a comment or submit a GitHub issue &ndash; let me
know what happens!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feature Flags in Ruby, Part III: Who? (Automate Feature Flipping)]]></title>
    <link href="http://amcaplan.ninja/blog/2015/01/19/feature-flags-in-ruby-part-iii-who-automate-feature-flipping/"/>
    <updated>2015-01-19T23:49:19+02:00</updated>
    <id>http://amcaplan.ninja/blog/2015/01/19/feature-flags-in-ruby-part-iii-who-automate-feature-flipping</id>
    <content type="html"><![CDATA[<p><em>Note: Part III assumes familiarity with the idea of feature flags, and their
practical implementation using the <a href="https://github.com/FetLife/rollout">rollout gem</a>.  For the
theoretical background, see <a href="/blog/2015/01/18/feature-flags-in-ruby-part-i-what-and-why/">Part I</a>.  For more info
about rollout, see <a href="/blog/2015/01/18/feature-flags-in-ruby-part-ii-how-and-where/">Part II</a>.</em></p>

<p>You have feature flags in your application, letting you turn off calls to
external services as necessary.  How can we make this happen automatically?</p>

<!-- more -->


<h2>Degrade: An Amputation Tool</h2>

<p><a href="https://github.com/jamesgolick/degrade">Degrade</a> exists to cut off error-prone external services when they
fail.  Let&rsquo;s go through a demo of how we might use it.</p>

<p>Before starting, we should note that redis is absolutely required to use
degrade.</p>

<h3>Install the gem</h3>

<p>First, <code>gem install degrade</code> or add <code>gem "degrade"</code> to your Gemfile and <code>bundle
install</code>.</p>

<h3>Instantiate the <code>degrade</code> object</h3>

<p>Next, assuming you have a <code>redis</code> variable which is an instance of
<a href="https://github.com/redis/redis-rb">Redis</a>:</p>

<p>``` ruby
degrade_my_feature = Degrade.new(
  redis,
  name:             :my_feature,
  sample:           5000, # The sample is reset after this number of requests.
  minimum:          100,  # Degrade won&rsquo;t check whether the threshold has been hit until this number of requests has been made.
  threshold:        0.1,  # The error rate (in this case, 10%) to deactivate the service
  errors:           [StandardError], # The errors which will label this request as a failure
  failure_strategy: &ndash;> {  # A lambda to be called when the error rate is reached</p>

<pre><code>rollout.deactivate(:my_feature)
</code></pre>

<p>  }
)
```</p>

<p>Whoa, that&rsquo;s a lot of options!  Most pieces are optional and should be
fine-tuned to the needs of your application.  The important things are: you need
to pass in a <code>redis</code> object, give your degrade object a <code>name</code>, and feed it a
<code>failure_strategy</code> lambda which will run if the error threshold is reached.</p>

<p>Let&rsquo;s discuss how to use your shiny new degrade object!</p>

<h3>Wrap a call</h3>

<p>Your <code>degrade</code> object comes with a <code>#perform</code> method that takes a block, thusly:</p>

<p><code>ruby
data = degrade_my_feature.perform do
  Net::HTTP.get('mega-downtime.com', '/data.json')
end
</code></p>

<p>It will run the block without impacting the return value, only pausing to mark
whether the block raised one of the specified errors.  As you can see from
<a href="https://github.com/jamesgolick/degrade/blob/master/lib/degrade.rb#L12-L20">the source code</a> for <code>#perform</code>:</p>

<p>``` ruby
def perform
  begin</p>

<pre><code>mark_request
yield
</code></pre>

<p>  rescue *@errors => e</p>

<pre><code>mark_failure
raise e
</code></pre>

<p>  end
end
```</p>

<p>It simply marks that a request is being made, and yields to your passed-in
block. If all goes well, <code>perform</code> will return the return value of the block.
If an error occurs, and it&rsquo;s one of the errors you&rsquo;ve selected to track, degrade
will rescue, mark that this request ended in failure, and re-raise the error.</p>

<p>It&rsquo;s important to understand that degrade won&rsquo;t automatically turn off a feature
for you.  All it does is run the <code>failure_strategy</code> you&rsquo;ve given it.  You can
use something like rollout to handle the failure situation.  Here is an example:</p>

<p>``` ruby
if rollout.active?(:my_feature)
  data = degrade_my_feature.perform do</p>

<pre><code>Net::HTTP.get('mega-downtime.com', '/data.json')
</code></pre>

<p>  end
  hashify(data)
else
  {}
end
```</p>

<p>You can, of course, cut off the request earlier in your code.  You might turn
off a controller action entirely if the external service it needs is down.</p>

<h2>Customizing Your <code>failure_strategy</code></h2>

<p>The <code>failure_strategy</code> you pass to degrade is just a plain old lambda, so you
can pass in any code that you want.  Let&rsquo;s say you create an <code>OutageNotifier</code>
module which can send an email/text when the external service goes down.  Just
call that code from the <code>failure_strategy</code>.  You can also set up a Sidekiq
worker that will reactivate the service (i.e., try again) after a specified
period of time.</p>

<p>Here&rsquo;s how you might do all that in one <code>failure_strategy</code>:</p>

<p>```ruby
degrade_my_feature = Degrade.new(
  redis,
  name: :my_feature,
  failure_strategy: &ndash;> {</p>

<pre><code>rollout.deactivate(:my_feature)
OutageNotifier.notify(downtime: :my_feature)
MyFeatureActivatorWorker.perform_in(30.minutes)
</code></pre>

<p>  }
)
```</p>

<h3>Reactivation</h3>

<p>There is one catch to be aware of when reactivating.  Degrade does not
automatically reset the sample when it runs the <code>failure_strategy</code>.  It has a
private method to do that (after it hits the sample size max), but we&rsquo;ll respect
that method&rsquo;s privacy.  Here&rsquo;s what <a href="https://github.com/jamesgolick/degrade/blob/master/lib/degrade.rb#L56-L61">that method</a> looks
like:</p>

<p>```ruby
def reset_sample
  if requests > @sample</p>

<pre><code>@redis.del(requests_key)
@redis.del(failures_key)
</code></pre>

<p>  end
end
```</p>

<p>If we <a href="https://github.com/jamesgolick/degrade/blob/master/lib/degrade.rb#L31-L37">dive deeper</a>, we&rsquo;ll see that <code>requests_key</code> and
<code>failures_key</code> are:</p>

<p>```ruby
def requests_key
  &ldquo;status:#{@name}:requests&rdquo;
end</p>

<p>def failures_key
  &ldquo;status:#{@name}:failures&rdquo;
end
```</p>

<p>So if we copy those methods, all we have to do to reset the sample is copy that
code into our worker.  Here&rsquo;s a simplified Sidekiq worker, where <code>#perform</code> will
reset the sample and then reactivate the feature flag:</p>

<p>```ruby
class MyFeatureActivatorWorker
  include Sidekiq::Worker</p>

<p>  def perform</p>

<pre><code>reset_sample
rollout.activate(:my_feature)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def reset_sample</p>

<pre><code>redis.del(requests_key)
redis.del(failures_key)
</code></pre>

<p>  end</p>

<p>  def requests_key</p>

<pre><code>"status:my_feature:requests"
</code></pre>

<p>  end</p>

<p>  def failures_key</p>

<pre><code>"status:my_feature:failures"
</code></pre>

<p>  end
end
```</p>

<p>Now you can use the line of code:
<code>ruby
MyFeatureActivatorWorker.perform_in(30.minutes)
</code>
to reactivate the feature after a 30-minute delay.  If you&rsquo;re really clever, you
can even set it up to increase the delay each time.  It all depends on the needs
of your application.</p>

<h2>Wrapping Up</h2>

<p>In this series, we&rsquo;ve learned</p>

<ul>
<li><p>what feature flags are</p></li>
<li><p>how to use feature flags with the rollout gem</p></li>
<li><p>how to use degrade, building on rollout, to shut off external services as
necessary</p></li>
</ul>


<p>Let me know about your experiences in the comments!</p>

<hr />

<p><em>Recently I gave a <a href="/talks/2015/01/14/flag-your-features-with-rollout-and-degrade">talk</a> at <a href="http://www.meetup.com/NYC-rb/">NYC.rb</a> about
<a href="http://jamesgolick.com">James Golick</a>&rsquo;s <code>rollout</code> and <code>degrade</code> gems.  These posts are a
rehash and expansion of the material delivered there.</em></p>

<p><em>To learn more about James&rsquo;s life and the circumstances surrounding his untimely
passing, see the links below the <a href="https://speakerdeck.com/amcaplan/flag-your-features-with-rollout-and-degrade">SpeakerDeck</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feature Flags in Ruby, Part II: How and Where]]></title>
    <link href="http://amcaplan.ninja/blog/2015/01/19/feature-flags-in-ruby-part-ii-how-and-where/"/>
    <updated>2015-01-19T05:16:18+02:00</updated>
    <id>http://amcaplan.ninja/blog/2015/01/19/feature-flags-in-ruby-part-ii-how-and-where</id>
    <content type="html"><![CDATA[<p><em>Note: Part II assumes familiarity with the idea of feature flags.  For the
theoretical background, see <a href="/blog/2015/01/18/feature-flags-in-ruby-part-i-what-and-why/">Part I</a>.</em></p>

<p>Alright, you&rsquo;re convinced that feature flags are a necessary tool for your app.
Let&rsquo;s discuss a gem, created by the late <a href="http://jamesgolick.com">James Golick</a>, which
make the process of feature flagging as simple as could be.</p>

<!-- more -->


<h2>Rollout: A Feature Flagging Tool</h2>

<p><a href="https://github.com/FetLife/rollout">Rollout</a> is a super-simple gem for feature flagging. To get started,
you&rsquo;ll need a redis instance accessible to your app.  You likely have this in
place already.  If not, you can pass in a reference to any object that accepts
<code>set</code> and <code>get</code> methods.  But as redis is becoming a more and more common part
of the standard stack, you should probably just set up a redis instance.</p>

<p>Now let&rsquo;s get started.</p>

<h3>Install the gem</h3>

<p>First, you&rsquo;ll need to <code>gem install rollout</code> or add <code>gem "rollout"</code> to your
Gemfile and <code>bundle install</code>.</p>

<h3>Instantiate the <code>rollout</code> object</h3>

<p>Next, assuming you have a <code>redis</code> variable which is an instance of
<a href="https://github.com/redis/redis-rb">Redis</a>:</p>

<p><code>ruby
rollout = Rollout.new(redis)
</code></p>

<p>and you have your <code>rollout</code> object.  The <a href="https://github.com/redis/redis-rb">official docs</a>
recommend assigning it to a global variable (<code>$rollout</code>), but if you&rsquo;d rather
avoid that, you can assign a <code>rollout</code> variable at the global scope.  (In a
Rails app, this code would belong in an initializer.)</p>

<h3>Flipping Switches</h3>

<p>Now you get to become a <a href="https://www.youtube.com/watch?v=eb9GREgzQYQ">switch-flipper</a>!  Turning a feature on
or off is as simple as:
``` ruby</p>

<h1>activate for all users</h1>

<p>rollout.activate(:chat)</p>

<h1>deactivate for all users</h1>

<p>rollout.deactivate(:chat)
```</p>

<p>The rollout object will always be able to tell you whether a feature is active:
<code>ruby
rollout.activate(:my_cool_feature)
rollout.active?(:my_cool_feature) #=&gt; true
rollout.deactivate(:my_cool_feature)
rollout.active?(:my_cool_feature) #=&gt; false
</code></p>

<h3>Partial Activation</h3>

<p>Sometimes you may want to activate a feature for a particular set of
users.  Let&rsquo;s say we want to grant our premium users access to the beta version
of our product.
``` ruby
rollout.define_group(:premium_users) { |user| user.premium? }
rollout.activate_group(:beta, :premium_users)</p>

<p>premium_user = User.where(premium: true).first
rollout.active?(:beta, premium_user) #=> true</p>

<p>regular_user = User.where(premium: false).first
rollout.active?(:beta, regular_user) #=> false
<code>``
Rollout knows that only</code>premium_users<code>, as defined by the block
</code>{ |user| user.premium? }<code>, have the</code>beta<code>feature active, and will return true
or false based on the user passed in to</code>#active?`.</p>

<p>Sometimes you may want to activate a feature for a random percentage of users.
Rollout can handle that too:</p>

<p><code>ruby
rollout.activate_percentage(:chat, 20)
</code></p>

<p>Now 20% of users will have chat activated.  Rollout also makes sure that it&rsquo;s
the same set of 20% of users who have chat available, so users don&rsquo;t have a
disjointed experience.</p>

<h3>Inserting Branch Points</h3>

<p>The trickiest part of using feature flags is figuring out where to branch your
code.  Ideally, the code should only need one call to <code>rollout#active?</code> to
invoke the correct behavior.</p>

<h4>Controller-Level Branch Points</h4>

<p>Sometimes, the simplest place to branch is in a controller.  Let&rsquo;s say we want
to feature-flag an entire endpoint in a Rails app:</p>

<p>```ruby
class ExperimentalController &lt; ApplicationController</p>

<p>  def index</p>

<pre><code>if rollout.active?(:my_feature)
  @entities = MyFeature.get_entities(params)
  respond_with @entities
else
  head(:service_unavailable)
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>If <code>my_feature</code> is active, the controller does its usual work of calling models
and views.  If <code>my_feature</code> is deactivated, the controller responds with a
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4">503</a>.
This is a pretty clean example of an <a href="/blog/2015/01/18/feature-flags-in-ruby-part-i-what-and-why/#feature-flag-types">&ldquo;On/Off&rdquo; feature flag</a>.</p>

<p>This pattern is very useful for experimental API endpoints, as well as debugging
utilities which will often be inactive.  It is also a good place to halt
requests which, to succeed, will require a call to an external service that is
currently experiencing downtime.</p>

<h4>Model-Level Branch Points</h4>

<p>Sometimes we want our application to display fundamentally different behavior
depending on the situation.</p>

<p>In this sample scenario, we already have a GitHub API integration, and we&rsquo;re
trying out a BitBucket API integration as well.  When we fetch the user&rsquo;s repos,
we want to control at runtime whether we&rsquo;re just getting the GitHub repos or
also checking BitBucket.  Here&rsquo;s the code:</p>

<p>```ruby
class User
  # &hellip;</p>

<p>  def repos</p>

<pre><code>if rollout.active?(:bitbucket)
  github_repos + bitbucket_repos
else
  github_repos
end
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>It might take hundreds of lines of code across multiple classes to fetch and
format those <code>bitbucket_repos</code> for the User, but we found one point in our code
where we can decide whether or not all that code gets executed.</p>

<h4>View/Decorator-Level Branch Points</h4>

<p>Placing feature-related conditionals in our views is (almost) always a bad
practice, so let&rsquo;s not address it here.  But we can sometimes make the case that
a decorator class is the right place for a feature flag.</p>

<p>Let&rsquo;s say that our API currently returns a top-level JSON Array, which is a
<a href="http://flask.pocoo.org/docs/0.10/security/#json-security">Bad Practice™</a>.  We want to follow the Good Practice and return
a top-level JavaScript object.  But we realize that clients may not be ready to
handle that.  We can set up a feature flag to switch over to the new format once
our clients have had ample time to prepare:</p>

<p>```ruby
class ResponseFormatter</p>

<p>  attr_reader :array</p>

<p>  def initialize(array)</p>

<pre><code>@array = array
</code></pre>

<p>  end</p>

<p>  def output</p>

<pre><code>if rollout.active?(:safe_json_format)
  { 'array' =&gt; array }
else
  array
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This is a very clear example of a <a href="/blog/2015/01/18/feature-flags-in-ruby-part-i-what-and-why/#feature-flag-types">This/That feature flag</a>.</p>

<h2>Back to Flipping Switches</h2>

<p>We&rsquo;ve spoken about how to set up switches, and how to flip them in code.  How do
we flip the switches when our code is running live in production?</p>

<p>Unfortunately, the rollout gem doesn&rsquo;t provide any sort of UI, and you basically
need to SSH into your production server and modify the value in redis.  In the
case of Rails, you would enter the Rails console, and execute the command
<code>rollout.activate(:my_feature)</code> or <code>rollout.deactivate(:my_feature)</code>.</p>

<p>Is there a better way?</p>

<h3>Improvement 1: Set Up an HTTP Endpoint</h3>

<p>If we&rsquo;re running web apps, we can always add endpoints!  This is how a Rails app
might handle feature flipping via HTTP requests:</p>

<p>``` ruby
class FeaturesController &lt; ApplicationController</p>

<p>  def update</p>

<pre><code>rollout.activate(params[:id].to_sym)
head :ok
</code></pre>

<p>  end</p>

<p>  def destroy</p>

<pre><code>rollout.deactivate(params[:id].to_sym)
head :ok
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>You probably want to have a <code>before_filter</code> to require authentication as well.</p>

<p>At any rate, this allows you to easily activate and deactivate features without
needing to SSH anywhere.</p>

<h3>Improvement 2: Use Hubot</h3>

<p>Hubot comes with a simple, powerful system for making HTTP requests.  Using this
system, you can set up Hubot to hit these endpoints when instructed via chat
command.  If you have a running Hubot instance, it&rsquo;s very simple to set up.
This is the code to activate a feature:</p>

<p>``` coffeescript
robot.respond /activate (\w+)$/i, (msg) &ndash;>
  feature = msg.match[1]</p>

<p>  msg.http(&ldquo;<a href="http://my-app.com/features/#">http://my-app.com/features/#</a>{feature}&rdquo;).put() &ndash;></p>

<pre><code>msg.reply "Activated #{feature}!"
</code></pre>

<p>```</p>

<p>Now, when I say <code>hubot activate a_feature</code>, it takes care of it, then responds,
<code>Activated a_feature!</code>  Suddenly, managing feature flags becomes a breeze.</p>

<h2>Wrapping Up</h2>

<p>We&rsquo;ve discovered how to use rollout to easily turn bits of code on and off in a
live application.  In <a href="/blog/2015/01/19/feature-flags-in-ruby-part-iii-who-automate-feature-flipping/">Part III</a>, we will discuss how to
automatically turn off feature flags when an external service experiences
downtime.</p>

<hr />

<p><em>Recently I gave a <a href="/talks/2015/01/14/flag-your-features-with-rollout-and-degrade">talk</a> at <a href="http://www.meetup.com/NYC-rb/">NYC.rb</a> about
<a href="http://jamesgolick.com">James Golick</a>&rsquo;s <code>rollout</code> and <code>degrade</code> gems.  These posts are a
rehash and expansion of the material delivered there.</em></p>

<p><em>To learn more about James&rsquo;s life and the circumstances surrounding his untimely
passing, see the links below the <a href="https://speakerdeck.com/amcaplan/flag-your-features-with-rollout-and-degrade">SpeakerDeck</a>.</em></p>
]]></content>
  </entry>
  
</feed>
