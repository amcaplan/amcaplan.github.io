<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/blog/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2015-12-02T17:29:48+02:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Metrics That Matter]]></title>
    <link href="http://amcaplan.ninja/blog/2015/12/02/metrics-that-matter/"/>
    <updated>2015-12-02T16:05:35+02:00</updated>
    <id>http://amcaplan.ninja/blog/2015/12/02/metrics-that-matter</id>
    <content type="html"><![CDATA[<p>Many of us are familiar with the standard tirades against the use of metrics in
judging developers.  Most of these arguments basically boil down to one of two
concerns:</p>

<ol>
<li>Metrics tend to value things which shouldn&rsquo;t be valued</li>
<li>Metrics attempt to quantify things that fundamentally elude quantification</li>
</ol>


<p>Examples of the first may be measuring lines of code (which rewards overly
verbose, unmaintainable solutions) or test coverage (which encourages test suite
bloat and doesn&rsquo;t ensure good testing practices).  The second applies to metrics
like story points completed (which attempts to quantify productivity as story
points &ndash; a bad measure of accomplishment &ndash; per time, and encourages high
estimates and rush jobs).</p>

<p>While these points are true, I would argue that there&rsquo;s a bigger issue here.
We should judge the utility of metrics by the results they incentivize.  These
metrics are meant to encourage individual performance, but from a company&rsquo;s
perspective, the goal should be total performance as a team.</p>

<!-- more -->


<h3>How Does An Ideal Team Behave?</h3>

<p>If we want to encourage teams to work together and successfully create value, we
would be well advised to consider what we actually care about in a team.</p>

<p>I consider the following team attributes to be most significant:</p>

<ol>
<li><strong>Sharing</strong> &ndash; amassing and spreading knowledge in a manner that benefits the
whole, rather than one particular team member</li>
<li><strong>Communication</strong> &ndash; both amongst developers and interacting with other interested
parties (UX, product owners/managers, QA, clients, etc.)</li>
<li><strong>Code Quality</strong> &ndash; in terms of both clarity/communicativeness of the code and
number of regressions</li>
<li><strong>Creativity</strong> &ndash; going above and beyond handed-down requirements to consider what
is really best for the product, being involved in the design process</li>
<li><strong>Efficiency</strong> &ndash; producing solutions at a pace that matches their capacity</li>
</ol>


<p>Let&rsquo;s consider metrics that best incentivize those goals.</p>

<h3>Sharing</h3>

<p>The team should be sure to avoid islands of knowledge, where only one or two
developers are capable of working on a particular area of the product.</p>

<p>One metric often discussed in this vein is the Bus Factor, a measurement of how
many developers would need to get hit by a bus to immobilize the team.  This is
useful in terms of understanding which pieces of the app represent knowledge
gaps amongst the team.</p>

<p>There is another metric I would like to introduce; I call it the Minimum
Familiarity Factor.  The question is: What is the minimum percentage of your
code with which the least experienced developer on your team is familiar?  This
metric complements the Bus Factor, by shifting the focus back to the developers
themselves.  Have any developers been siloed into one specific area of your
ecosystem?  If so, perhaps they could do their job more effectively with
exposure to more of your company&rsquo;s codebase(s).  (Note: The obvious exception
here would be new hires.  In that case, the usual questions of onboarding
methodology are more appropriate trains of thought.)</p>

<h3>Communication</h3>

<p>This one is hard to quantify, right?  Well, luckily, quantification isn&rsquo;t the
point.  What metric might we use to incentivize communication?</p>

<p>One thing we might look at is how often developers are pairing.  I don&rsquo;t think
pairing is right for every situation (and Kent Beck
<a href="https://www.quora.com/Is-pair-programming-worth-the-trade-off-in-engineering-resources/answer/Kent-Beck">agrees</a>.)  It often conflicts with another core
principle, efficiency.  But I don&rsquo;t think there is a more effective way to
ensure communication between developers than having to code together.  If the
solution is going to be complex, and/or the problem space is unfamiliar to one
or both developers, the payoff is tremendous.</p>

<p>How about communication between developers and other interested parties?  I
don&rsquo;t have a great way of measuring that it&rsquo;s happening.  But there is a point
where it becomes clear that it&rsquo;s not happening.  That point is when stories move
from an advanced stage back to development because the requirements were unclear
the first time around.  Maybe the person who wrote up the story did a terrible
job and just wrote the wrong thing.  Or maybe the requirements were
insufficiently clarified.  In the latter case, the developer should have taken
the time to clarify the situation, rather than writing code which would just
have to be rewritten.</p>

<p>Let&rsquo;s be very clear &ndash; based on the value of Creativity, I don&rsquo;t think anyone
should have exclusive authority over how a feature works.  But that&rsquo;s exactly
the point &ndash; if, as the developer is working, they come up with new, interesting
ideas, that should be shared with others, properly hashed out, and reflected in
the story writeup, not just included in a pull request and shipped without
discussion.</p>

<h3>Code Quality</h3>

<p>Ah, code quality.  Everyone seems to have come up with their own metric.  I have
personally lost all faith that it can be measured directly, although tools like
Flog (for Ruby) come pretty close.</p>

<p>I would argue that code quality is just a fancy term for changeability, and as
such, the only way to measure code quality is to see what happens when it
changes.  As time goes on, how hard does it become to add or change features?
Are there more regressions per month as the codebase grows?</p>

<p>I like these questions because they reinforce an important point: Code quality
is a developer aesthetic, not a direct business value.  The value emerges from
code quality when code needs to be changed, and maintenance costs are reduced
due to the code&rsquo;s clarity, modularity, test coverage, etc.  A zero-churn class
can have terrible, hideous code, and it does not matter at all.  Measuring later
at moments of change is a better way to assess how much the business need for
code quality is met.</p>

<p>Judging code quality on a team basis has the advantage of encouraging collective
responsibility.  Maybe we don&rsquo;t need pairing for every feature, but if everyone
is held responsible together, a proper pull request process is inevitable, and
the team will demand robust testing and continuous integration as well.  Who
wants to get stuck with misbehaving code that hurts everyone&rsquo;s productivity?</p>

<h3>Creativity</h3>

<p>Pretty cool, a metric designed to encourage developers to rebel against their PM
masters!  Well, unfortunately, this is going to be rather boring.  I can&rsquo;t give
a real metric here, per se.  It comes down to a [vague] sense of whether
developers are involved in writing stories, and whether developers feel
comfortable challenging the stated requirements.</p>

<p>Oops, that&rsquo;s not really a metric for developers, is it?  It&rsquo;s a metric for
management.  Turns out, management can set a few policies and precedents that
make it possible for developers to contribute their whole selves to the company.
Developers can be involved early in the design and planning process, weighing in
on the feasibility, difficulty, and cost of new features, and maybe even using
some good old human intuition.  Or management can treat its developers as code
monkeys who couldn&rsquo;t possibly understand anything about real people who use
technology.  Of course, the latter might be bad for recruitment, which
ultimately hurts the Code Quality metric&hellip;</p>

<h3>Efficiency</h3>

<p>This one is pretty simple.  It boils down to two questions:</p>

<ol>
<li>Does the developer spend the entire day on Facebook?</li>
<li>Are the other principles being followed?</li>
</ol>


<p>OK, yes, this is a cop-out.  But I sincerely believe that as long as developers
are spending a healthy quantity of time coding, following the principles
outlined above, we can all be adults and rely on developers to do their jobs.
Hopefully we are hiring productive, intelligent, and trustworthy people.</p>

<h3>Pulling It All Together</h3>

<p>Sorry I lied with the title here.  Admittedly, these are not all metrics.  But
if we compare developers with other creative professionals, the whole idea of
metrics starts to sound fishy.</p>

<p>Copywriters, for example, might be paid by the word when quality is not
paramount.  But who would approve of paying a poet per stanza?  The best poetry
is dense and meaningful.  We judge poems by whether or not they make you think,
or bring you to tears.  And we pay novelists and poets by how much business
value they create in the form of sold books.</p>

<p>The fundamental mistake in judging developers by code metrics is exactly this.
We don&rsquo;t want developers to write X lines or close Y tickets.  We want
developers to create business value, mostly through working, useful software.
All else is just means to that end.  What functionality would be most useful?
Let&rsquo;s ask UX.  What is our top priority right now?  Let&rsquo;s check the backlog.
But make no mistake, the developer&rsquo;s primary job is to create value.</p>

<ul>
<li><strong>Efficiency</strong> is obviously a matter of taking limited working hours (and
mental energies) and using them to create the most value for the company.</li>
<li><strong>Creativity</strong> means using technical knowledge to provide extra perspective
when driving the value-creation process.</li>
<li><strong>Code Quality</strong> ensures that the product actually works as expected, will
continue to work, and has potential to keep growing and generating more value.</li>
<li><strong>Communication</strong> recognizes that development does not exist in a vacuum.  The
most productive developer maximizes the chances that their efforts are spent on
code that will make it to production.</li>
<li><strong>Sharing</strong> acknowledges that there is more value in building the team&rsquo;s
ability to create value, long-term, than in any individual&rsquo;s value creation,
short-term.</li>
</ul>


<p>Rather than thinking too much about quantifying developer performance, I would
like to shift the conversation to assessing how developers are being good team
players, building value creation potential alongside addressing current needs.
And I would like to see us viewing our developers (and everyone who works with
them) as an actual team, where individuals working and learning together
multiply the value created individually.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formulating the Ethics of Programming]]></title>
    <link href="http://amcaplan.ninja/blog/2015/11/18/formulating-the-ethics-of-programming/"/>
    <updated>2015-11-18T15:42:16+02:00</updated>
    <id>http://amcaplan.ninja/blog/2015/11/18/formulating-the-ethics-of-programming</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Robert_Cecil_Martin">Uncle Bob</a> recently published a <a href="http://blog.cleancoder.com/uncle-bob/2015/11/18/TheProgrammersOath.html">post</a> where he
attempted to formulate the ethical principles that should guide programmers.  It
was an interesting concept, but I immediately felt it could use a rewrite.</p>

<p>Although I agree that everything in his version is a good idea, I disagree with
the formulation as an ethical guideline for programmers.  Simply put, the
principles of Agile are brilliant.  But they hardly deserve mention in a list of
ethics, and &ndash; I would contend &ndash; detract from the list.</p>

<!-- more -->


<p>There are most certainly cases where following Agile practices would be the
unethical thing to do; it all depends on the needs and policies of the client or
company.  For example, consider Principle 5:</p>

<blockquote><p>I will fearlessly and relentlessly improve the code at every opportunity. I
will never make the code worse.</p></blockquote>

<p>Sometimes, what&rsquo;s needed is a quick fix for production, followed by a more
well-thought-out solution that will take some time to produce.  Will that make
the code worse in the meantime?  You betcha.  Is it the right thing to do
anyway?  Very likely.</p>

<p>Let&rsquo;s consider Principle 7:</p>

<blockquote><p>I will continuously ensure that others can cover for me, and that I can cover
for them.</p></blockquote>

<p>Again, I totally agree.  But if there are 2 developers in a tiny, bootstrapped
startup, maybe you don&rsquo;t have enough time to share all the information all the
time.  Principle 7 is true for most business cases.  But as soon as it&rsquo;s
specific to a business case, you can tell that this is less of a moral principle
and more of a strategy for success in accomplishing something else.</p>

<p>In both cases, the principles are really ways of &ndash; in the average business case
&ndash; helping the employer/client to be more stable and able to continually improve
its product.  So when it comes to the ethical piece, these principles &ndash; in fact,
at least half of the oath &ndash; boils down to:</p>

<blockquote><p>I will be an honest employee or contract worker, making sincere effort to
produce value for those who pay the bills, in both the short and long term.</p></blockquote>

<p>That&rsquo;s a statement of ethics, and it might belong in a programmer&rsquo;s oath.</p>

<p>Thinking about it further, I came up with my own version of the programmer&rsquo;s
oath, heavily based on the <a href="https://en.wikipedia.org/w/index.php?title=Hippocratic_Oath&amp;oldid=688739951#Modern_version">version</a> of the Hippocratic
Oath currently used in many medical schools.  I was honestly surprised at how
much could be lightly edited and incorporated into a programmer&rsquo;s oath.  There
is a comforting universality to ethics.</p>

<p>Let me know your thoughts!</p>

<blockquote><p>I swear to fulfill, to the best of my ability and judgment, this covenant:</p>

<ol>
<li><p>I appreciate the work of past generations, who overcame hardware and software limitations to produce the programming environment of today, and I will collaborate with colleagues in the present to further improve the future of our trade.  I recognize that I have received instruction from those who preceded me, and I will repay in kind by sharing my knowledge with those who will follow.</p></li>
<li><p>I will strive to efficiently produce the solution which best fits the needs as best as I can perceive them.  I will not shortchange through either overengineering or underdesigning.  I will provide verification, to whatever degree is reasonable given constraints of time and finances, that the solution I have generated works as expected.</p></li>
<li><p>I will treat clients and coworkers with respect and warmth.  I will listen to their ideas, using their input to sharpen my own understanding.  When disagreement arises, I will collaborate with the other parties to reach mutual understanding and agreement.  I will never reject or insult anyone I work with.</p></li>
<li><p>I will not be afraid to say &ldquo;I don&rsquo;t know&rdquo; and I will respect others for their admission of the same.  I will not be afraid to ask questions.</p></li>
<li><p>I will never attempt to deceive those who rely on my honesty.</p></li>
<li><p>I will respect the privacy of my company and/or clients, barring unethical or illegal behavior on their part.</p></li>
<li><p>I take full and complete responsibility for the ethical implications of every line of code I write.  I will value the guidance of my own moral conscience above my company&rsquo;s or client&rsquo;s desire for profit.</p></li>
<li><p>I will remember at all times that all of my code will interact with people; it will influence the lives of human beings.</p></li>
<li><p>When the problem is people, rather than code, I will address the people problem directly, rather than incurring the technical debt of excess code.</p></li>
<li><p>I will always consider myself a regular member of society with access to extra information and power.  My skills give me no right to exert greater influence on other human beings.</p></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recruit Software Engineers with this 1 Weird Old Tip]]></title>
    <link href="http://amcaplan.ninja/blog/2015/08/02/recruit-software-engineers-with-this-1-weird-old-tip/"/>
    <updated>2015-08-02T09:55:53+03:00</updated>
    <id>http://amcaplan.ninja/blog/2015/08/02/recruit-software-engineers-with-this-1-weird-old-tip</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read a lot recently about how hard it is to recruit programmers in today&rsquo;s
market.  Personally, I think it&rsquo;s all hogwash.</p>

<p>There are plenty of great programmers out there, but companies aren&rsquo;t actually
looking for them.  What they really want is a plug-n-play solution, a programmer
who knows what they need him/her to know, who can churn out code and build
software solutions.</p>

<p>The problem is that engineering is an art and a discipline, and you can&rsquo;t just
expect to hire someone and have them show up batteries included.  A company that
refuses to train its coders is a company that won&rsquo;t find enough people to meet
its needs.</p>

<!-- more -->


<h2>What Not To Do</h2>

<p>Recently, I saw an ad for a job that required, among other things:</p>

<ol>
<li>5+ years experience</li>
<li>A college degree (no &ldquo;or equivalent training and experience&rdquo;)</li>
<li>Being comfortable with the Microsoft stack, Java, Angular, and Node</li>
<li>Knowledge of data privacy practices and laws</li>
<li>Understanding of SSO and SAML</li>
<li>Project management experience</li>
<li>Experience in the healthcare technology industry</li>
</ol>


<p>In other words, the ad was for a college-educated senior front-end/back-end
developer, security expert, and project manager with healthcare tech experience,
all rolled into one.</p>

<p>The &ldquo;Accountabilities and Activities&rdquo; section was equally incoherent,
essentially requiring involvement with every part of the stack, from end-users
to business plans to documentation to configuration to application architecture.
(Interestingly, out of 11 bullet points, only one indirectly mentioned coding at
all: &ldquo;Develop new or modify existing applications and systems as required.&rdquo;)</p>

<p>I could tolerate advertising for a generalist, even though that&rsquo;s already a
unicorn.  But what really bothers me is the list of requirements.  That list
severely narrows the already-tiny population that would be relevant to the job,
for no good reason.  In fact, it narrows it for a very bad reason: The company
is simply unwilling to train new hires.  Any programmer it picks up must be
plug-n-play, no instructions necessary.</p>

<p>I have no idea whether that job ad picked up anyone, but I&rsquo;m 99% certain that if
it did, it was someone who had no more than 3-4 of the points I mentioned.
Because the unicorn they&rsquo;re seeking just doesn&rsquo;t exist, but overconfident people
certainly do.</p>

<h2>What To Do?</h2>

<p>If you&rsquo;re interested in opening up your application pool to people who are worth
hiring, people who will be great to work with, and maybe don&rsquo;t have 100% of the
skills you need, try toning down your job ads.  Limit requirements to the
absolute minimum you can imagine.</p>

<p>But there&rsquo;s more than that.  Think of it as a sales pitch.  You don&rsquo;t sell a
product by saying, &ldquo;Look at how much money you&rsquo;ll get to pay for it!  And did we
mention that tax is not even included in the price?&rdquo;  You sell
a product on its features.  &ldquo;Look at what this product can do!  It will
revolutionize your lifestyle!&rdquo;</p>

<p>Most job ads sell the job as &ldquo;Here&rsquo;s what <em>we</em>, the company, want you to do, and
this is what <em>we</em> think you need to do it.&rdquo;  Maybe think about it from the job
seeker&rsquo;s perspective for a change.  Why should I, as a programmer in high
demand, focus the majority of my waking hours on building your product?  What&rsquo;s
my motivation?  What can you do to help me build my career?  Will your company
give me the time to actually enjoy the salary you&rsquo;re paying me?</p>

<p>I wrote a sample job ad for a made-up company, to demonstrate the sort of perks
that might appeal to software developers.  Some might even appeal to
business-oriented folks as well.  (I&rsquo;ve erred on the side of having this run too
long, since I hope companies will be able to use this as a brainstorming
example.  Your actual job ad should be way shorter than this.)</p>

<blockquote><p>Do you care about teamwork, learning, and professional development?  Want to
work with a smart, diverse group, solving complex problems?  Do you feel
satisfaction from writing clean code with excellent test coverage?  Do you enjoy
even more when a teammate shows you how to improve your code?</p>

<p>If you answered &ldquo;yes&rdquo; to those questions, SawftWearLy would love to chat with
you.  We&rsquo;ve built a professional environment where we constantly iterate on our
practices, both human and technical.</p>

<p>At SawftWearLy, we seek to create value above all, so we&rsquo;re less nitpicky
about the where and when of how you work.  We do believe, though, that pair
programming and code review are building blocks of better code and professional
development, so we&rsquo;ll ask you to make sure your hours are conducive to
teamwork.</p>

<p>We understand that it&rsquo;s easier to build great developers than to recruit them,
so we won&rsquo;t demand X years of experience in Y.  We&rsquo;re looking for devs who are
bright and eager to learn, and we&rsquo;ll provide the support that we can to help you
be awesome.  We maintain a library of hard-copy and Kindle books, and we&rsquo;ll
get you a CodeSchool or PluralSight subscription if you&rsquo;d like.  Our engineers
attend and speak at conferences and local meetups.  We also arrange frequent
internal presentations where developers can speak about anything related to
coding.  We contribute to open source, even during work hours.</p>

<p>SawftWearLy tries to create an enjoyable, dynamic work atmosphere, but we know
your work isn&rsquo;t your whole life.  We want to minimize the tension between work
and your other priorities. To make sure you feel comfortable taking time off and
relaxing, we have a minimum/maximum PTO policy, so everyone needs to take a
vacation, and you know how much is too much.</p>

<p>Rather than beer kegs or ping-pong tables, we&rsquo;ve decided to invest in your
future with a partial matching 401(k) plan.  We have top-notch health and life
insurance options, so you&rsquo;ll have peace of mind knowing that you and your loved
ones are covered.</p>

<p>Compensation is standardized per job category, so you will know you&rsquo;re getting
fairly compensated.  However, we do award bonuses based on performance, so we
can recognize employees who display initiative and creativity in their work.</p>

<p>SawftWearLy is a workplace where managers speak to their team members to make
sure they have the support they need.  It&rsquo;s a collaborative space where we make
time to talk about what we can do better, or just bounce ideas off each other.
We celebrate questions, and value answers that convey not just information, but
understanding.</p>

<p>If SawftWearLy sounds like a good fit for you, drop us a line at
<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#100;&#x65;&#118;&#64;&#115;&#97;&#119;&#x66;&#116;&#x77;&#101;&#x61;&#x72;&#x2e;&#x6c;&#x79;&#46;">&#100;&#x65;&#118;&#x40;&#115;&#97;&#x77;&#x66;&#x74;&#x77;&#101;&#x61;&#x72;&#x2e;&#x6c;&#121;&#x2e;</a>  Tell us about something you&rsquo;ve built, what you&rsquo;re learning
now, and something you like doing outside of programming.</p></blockquote>

<p>Note that there weren&rsquo;t really any requirements here.  That&rsquo;s because you don&rsquo;t
actually need a coder who&rsquo;s familiar with your technical stack, or your business
domain.  They&rsquo;ll figure it out in a couple months.  (Would you rather spend 2-3
months training a new hire, or wasting your efforts on continued attempts to
find someone who knows it all already?)  But you need people who are smart and
motivated, and who know how to program well.  And you need to keep them happy,
because there are plenty of other companies out there.</p>

<h2>The Catch</h2>

<p>Some of you might be thinking, &ldquo;That sounds great, but we don&rsquo;t actually do that
at our company!&rdquo;  Well, guess what?  That&rsquo;s exactly the point.</p>

<p>If you want awesome developers to work for you, you need to be an awesome place
for developers to work at.  It&rsquo;s impossible, without lying outright, to have an
awesome job ad without being an awesome workplace.</p>

<p>So the actual secret to hiring great developers is to treat the ones you have
really well, and let your job ads reflect that.  Really, we don&rsquo;t demand much &ndash;
give us learning opportunities and good people to work with, and chill out if we
want to work from 11AM to 7PM, or 7AM to 3PM, or work from home 3 days a week.</p>

<p>On my team, I&rsquo;ve been a major evangelist for pair programming, I&rsquo;ve been very
involved with training newer folks, and I do it across an ocean at +7 hours.
Especially in this field, it&rsquo;s so important to be open to creative solutions for
getting good people to work together, because good people are hard to come by.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Should a Junior Developer Work On First?]]></title>
    <link href="http://amcaplan.ninja/blog/2015/06/29/what-should-a-junior-developer-work-on-first/"/>
    <updated>2015-06-29T01:01:19+03:00</updated>
    <id>http://amcaplan.ninja/blog/2015/06/29/what-should-a-junior-developer-work-on-first</id>
    <content type="html"><![CDATA[<p>Recently, a new member of our team asked me (and other coworkers) to list 3
things a junior developer should accomplish within their first 3 months on the
job.  Being at the end of my first year on the job, it was an excellent
opportunity for reflection on what I have learned during this year which was
most useful.</p>

<p>After some thinking, I came up with 3 concrete goals, emblematic of 3
big-picture objectives which should be guiding lights for the new developer.</p>

<p>Here are my picks:</p>

<ol>
<li>Be reasonably comfortable with TDD</li>
<li>Write good commit/PR messages</li>
<li>Present at a team hangout</li>
</ol>


<p>These might seem like arbitrary goals, so they deserve some explanation.</p>

<!-- more -->


<p>First, you&rsquo;ll notice that I did not mention &ldquo;learn X language&rdquo; or &ldquo;become
proficient in Y framework.&rdquo;  This is simply because languages and frameworks are
important, but not inherent, goals.  The languages and libraries you use today
will most likely fade with time, to be replaced by newer tools more appropriate
for the tasks of tomorrow.  But <em>how</em> to write code will be just as relevant in
30 years as it was 30 years ago.  Design principles evolve as well, but the idea
of designing code, rather than just getting things to work, is the most
important, and biggest, jump.</p>

<p>Now, let&rsquo;s move on to expanding these concrete goals into coherent broad ideas.</p>

<h2>TDD: A Design Tool</h2>

<p>&ldquo;Why test?&rdquo; is a very complicated question with a lot of answers.  Justin Searls
has <a href="https://www.youtube.com/watch?v=9_3RsSvgRd4">an excellent talk</a> listing about 10 different reasons
for testing.  The reason I focus on TDD here is because it is the most powerful
technique I know for learning how to design code from the outside in.</p>

<p>As a new developer, you are probably focused on assimilating the multitude of
new technologies you need to master to get things to work.  It probably seems
odd that I would recommend focusing on technique, rather than just staying
afloat.</p>

<p>However, I would argue that feeling lost is just part of being a software
developer today.  There is a constant influx of new languages, frameworks, and
tools, and it is far too easy to be satisfied with just making things work.
However, programmers who excel in their careers make sure to reserve time for
becoming better at the basics of how to write good code.  If you don&rsquo;t make time
for that now, when will you?</p>

<p>There are many ways of becoming better.  You can get ideas from articles and
conference lectures, books and blog posts.  But there is a jump to be made from
the theoretical to the practical.</p>

<h4>What is &ldquo;good code&rdquo;?</h4>

<p>Good code, among other qualities, is modular and intuitive.</p>

<ul>
<li>By modular, I mean that each piece carries a responsibility appropriate for
its size.  Methods do just one thing, and do it well.  Classes are the same, but
a &ldquo;thing&rdquo; is a larger unit of work.  Collaborating objects form systems that
accomplish yet larger things, but at every level, there is a single unifying
theme to the system.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>By intuitive, I mean that it acts in the way you would expect, both from the
outside and once you open it up.  The outside piece of that statement means that
its public API provides as few surprises as possible.  The input/output, as
closely as possible, matches what the average programmer would expect it to be.
Additionally, the innards are divvied up in a fashion that makes it easy for
someone new to the codebase to interpret and reason about.  Clever hacks or
thrown-together solutions are generally not intuitive, and tough to modify
later.</li>
</ul>


<h4>So what does TDD have to do with all this?</h4>

<p>TDD enforces (as much as is possible to enforce such things) code which is
modular and intuitive.</p>

<p>It is exceptionally difficult to write tests for code which is not modular.
Generally speaking, code with intertwined responsibilities will also have deep
interdependencies between modules.  This causes immense pain in testing,
encouraging the programmer to think about how to tease apart responsibility and
dependency.</p>

<p>Yet beyond that testing pain, there is a larger point: it is very hard to test
code when you don&rsquo;t understand its responsibility.  Usually, if you have not
defined what code is supposed to do, it will be nearly impossible to write the
tests first, because the tests are simply a concretion of the responsibilities
of the code you are about to write.  By following the principles of TDD, you
encourage yourself to state your goals, thereby breaking up your code before you
have written a mess of intertwined modules.</p>

<p>TDD also strongly encourages intuitive code.  When engaged in TDD, you should be
testing only the public API of your code, defining inputs and expected outputs,
before you figure out the implementation.  This means that your primary goal
when writing the code itself is to meet the needs that you have already
described in your tests.  This, in turn, means that you are thinking first about
the user of your code, and only afterwards about the internal algorithms and
details involved in your solution.  That leads to code which is friendlier for
outside use.</p>

<p>I don&rsquo;t think TDD necessarily offers much direction in terms of properly writing
the internals of your code, but I never promised a single, all-encompassing
solution, did I? 😉</p>

<p>Based on all this, I think that becoming comfortable with TDD is a highly time-
and effort-efficient method of speeding up the learning curve for excellent
coding habits.  Even if it&rsquo;s not the approach you take all the time (and hey,
<a href="http://www.quora.com/Does-Kent-Beck-use-TDD-at-Facebook-How">even Kent Beck doesn&rsquo;t think it should be</a>), it&rsquo;s a worthy
exercise to practice skills and thought patterns which ultimately will be quite
useful regardless of your workflow.</p>

<h2>Commit and PR Messages: A Primary Source of Communication</h2>

<p>One of the most important lessons to learn as a junior developer is that, unless
you are the only developer on your team, your code is a shared entity.  Your job
is not to be personally awesome, but rather to help your entire team be awesome.
This means you need to sometimes sacrifice some of your own productivity in
order to help everyone else be more productive.</p>

<p>Commit messages are a prime example of this.  In just a few seconds per commit,
you have the opportunity to lay out a trail of breadcrumbs to lead members of
your team toward understanding why certain decisions were made, why this was
added and that deleted.  You instruct them as to what code is relevant to a
particular feature, and what dangers would be involved in deleting it.</p>

<p>Pull request messages are, in a sense, just a broader repetition of the same
motif.  Rather than explaining a small bit of work, they expound on the
rationale for a set of adjustments to your application.  But if your team uses
a pull request-based workflow, these messages are even more important.  Rather
than reading your code and puzzling over what you were trying to accomplish,
your teammates can quickly understand your goals, and then evaluate whether you
achieved them in the best way possible.  A good pull request message can be the
difference between &ldquo;It looks like code, guess I&rsquo;ll merge it!&rdquo; versus &ldquo;That was
an interesting choice of how to tackle this issue, we should discuss it
further.&rdquo;  If you invest in the quality of code review on your submissions, you
will be rewarded with plenty of free advice on how to make your next bit of work
even better.</p>

<h4>Look Into Your Future&hellip;</h4>

<p>Beyond the basic point of just being a good teammate, there is another
compelling reason to write clear, thorough commit and PR messages: The next
person who has to read them just might be you.</p>

<p>Let&rsquo;s face it.  We might all talk about collective responsibility for a code
base, but if you wrote the code, you will likely be called in to explain why it
was written the way it was.  And you will also probably have forgotten by that
point why you did things that way.</p>

<p>If you leave yourself clear commit and PR messages, they will serve as memory
jogs so you can figure things out far more quickly.  If you left a bunch of code
with commit messages like &ldquo;fixed a thing&rdquo; and &ldquo;it works now&rdquo; &ndash; well, you&rsquo;re
gonna have a bad time.  And you will probably misunderstand your own code, and
break lots of things.</p>

<p>Realistically, what percentage of commits or PR messages will you ever read
again?  Probably no more than 5-10%.  But the amount of time you will save in
those 5-10% of cases is well worth the small upfront investment of archiving
your thoughts.</p>

<p>So care about your teammates, and care about your future self.  Learn to write
clear commit and PR messages, and you will thank yourself later when they are
your &ldquo;primary source&rdquo; of information about days of coding past.</p>

<h2>Presenting: The Code Is Not Enough</h2>

<p>Software, like any slice of the human enterprise, is really more about the
people making it than the product itself.  Most problems in software stem from
the people making it.  It follows that software will be as coherent as is the
communication amongst its developers.</p>

<p>If you want to be a successful coder, you also need to be a successful
communicator.</p>

<p>There are many formats of communication, including commit and PR messages, as
discussed above.  Most people can get along in one-on-one conversation, though
some (including myself) struggle even with that.  But even for people who are
natural conversationalists, presenting to a group can be difficult.  Yet it is
also necessary to learn how to present one&rsquo;s ideas cogently and convincingly to
a group.</p>

<p>The other salient point is that many junior software engineers are convinced
that they are no good, or at the very least so inferior to senior developers
that nothing they themselves say could possibly be of interest to others with
more experience.  Yet that could not be farther from the truth.</p>

<h4>Junior Devs: A Critical Voice In Our Community</h4>

<p>Junior developers need to understand: Your ideas are valuable.  You came into
this profession, this artisans' guild, because you find beauty in well-organized
code, you are awed by the power of loops and function calls and recursion, you
draw excitement from optimizing an algorithm from <em>O(n<sup>2</sup>)</em> to <em>O(n)</em>.  (At
least, I hope you do; otherwise, you&rsquo;ll be pretty bored in this business.)  You
see opportunity in new technologies, and you are still developing heuristics to
evaluate the tradeoffs inherent in choosing one over the other.</p>

<p>You are a neophyte.  And neophytes tend to ask the most interesting questions,
forcing people more experienced than themselves to articulate their opinions and
perspectives on issues that matter to everyone.</p>

<p>Because you are new to the trade, your ideas and experiences are valuable, and
your enthusiasm gives light and warmth to those who may have forgotten the
excitement of their earlier coding days.</p>

<p>So even if you speak about a technical topic they are thoroughly familiar with,
senior developers will still enjoy your presentation.</p>

<h4>Senior Devs: Seeing Beyond the Pedestal</h4>

<p>If you are not yet convinced, let me offer another argument.</p>

<p>Senior developers are simply programmers with more experience writing (hopefully
good) code, more familiarity with the breadth of languages and tools, and a
better understanding of the system underlying all programming platforms.  But
they are hardly godlike omniscient beings.  It&rsquo;s not too hard to find a topic
that the senior developers on your team haven&rsquo;t delved into, or at least offer a
fresh perspective which would be of interest to them.</p>

<p>Even if they are generally familiar with a topic, even if they utilize that
knowledge on a daily basis, there are still going to be some points that they
have forgotten or never learned about, so they will walk away with some useful
bits of knowledge from your presentation.</p>

<p>Finally, seniors are often interested, for business reasons or out of altruistic
motivations, in bringing in juniors and helping them to be as productive as
possible.  Your struggles in your work are useful and informative to more senior
folks on your team, helping them to reassess the process and iterate on their
onboarding process for new junior developers.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Your thoughts and learning will be of value to others, and by presenting, you
will develop a critical skill which &ndash; if not properly nurtured &ndash; could be the
barrier between you and a highly successful career.</p>

<h2>Summing It Up</h2>

<p>Now that we&rsquo;ve provided some theoretical background, the 3 goals listed above
might be stated as:</p>

<ol>
<li>Learning to design code effectively</li>
<li>Being a communicative team player</li>
<li>Gaining confidence in your worth as a coder</li>
</ol>


<p>Since I believe in concrete, rather than abstract, goals, I will stick with the
list above as a more helpful set of discrete accomplishments to be aimed for in
the first few months.  But with the broader goals in mind, hopefully the
specifics make more sense as guideposts on the journey toward a long, enjoyable,
successful career in code.</p>

<p><em>What do </em>you<em> think are the most important things for junior developers to work
on in their first few months on the job?  Share your thoughts in the comments!</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Modularity also often refers to the packaging of code into discrete bits which can be used elsewhere in your system.  I personally find the reuse of modules to be neither very common nor very fundamental to the practice of software engineering.  While it can be a useful technique on occasion, I hardly believe it to be one of the first few things a developer absolutely needs to learn. <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This applies in the open source community as well.  I am personally familiar with one meetup in NYC which often asks developers new to their open source project to speak about their experiences and challenges, to guide the maintainers towards providing useful tools and documentation for new users. <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Making of PersistentOpenStruct]]></title>
    <link href="http://amcaplan.ninja/blog/2015/05/21/the-making-of-persistentopenstruct/"/>
    <updated>2015-05-21T03:39:23+03:00</updated>
    <id>http://amcaplan.ninja/blog/2015/05/21/the-making-of-persistentopenstruct</id>
    <content type="html"><![CDATA[<p>So I built this thing&hellip;</p>

<h2>The Challenge</h2>

<p>Here&rsquo;s the problem we were having at work.  We have a bunch of microservices
which communicate with each other via HTTP.  Since they&rsquo;re passing around raw
data, and the shape often changes, we decided quite some time ago to use classes
inheriting from <code>OpenStruct</code>, that magical schema-free class, as a data container.</p>

<p>The problem is, <code>OpenStruct</code> is also ridiculously slow&hellip;</p>

<!-- more -->


<p>``` ruby
[1] pry(main)> require &lsquo;ostruct&rsquo;
=> true
[2] pry(main)> require &lsquo;benchmark/ips&rsquo;
=> true
[3] pry(main)> Benchmark.ips do |x|
[3] pry(main)<em>   class RegularClass
[3] pry(main)</em>     attr_accessor :foo
[3] pry(main)<em>   end
[3] pry(main)</em>
[3] pry(main)<em>   class OpenStructClass &lt; OpenStruct
[3] pry(main)</em>   end
[3] pry(main)<em>
[3] pry(main)</em>   x.report(&lsquo;regular class&rsquo;) do
[3] pry(main)<em>     r = RegularClass.new
[3] pry(main)</em>     r.foo = :bar
[3] pry(main)<em>     r.foo
[3] pry(main)</em>   end
[3] pry(main)<em>
[3] pry(main)</em>   x.report(&lsquo;OpenStruct class&rsquo;) do
[3] pry(main)<em>     o = OpenStructClass.new
[3] pry(main)</em>     o.foo = :bar
[3] pry(main)<em>     o.foo
[3] pry(main)</em>   end
[3] pry(main)* end
Calculating &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<pre><code>   regular class   114.702k i/100ms
OpenStruct class    14.400k i/100ms
</code></pre>

<hr />

<pre><code>   regular class      3.901M (± 4.0%) i/s -     19.499M
OpenStruct class    158.799k (± 7.1%) i/s -    792.000k
</code></pre>

<p>```</p>

<p>From that benchmark, it seems like <code>OpenStruct</code> is 4% the speed of a regular
class &ndash; not particularly helpful when performance is a significant concern.</p>

<p>In our case, profiling with <code>StackProf</code> showed that <code>OpenStruct</code> was taking up
13% of CPU time in many cases; in short, it was one of our worst offenders,
performance-wise.</p>

<p>However, we really wanted to stick with <code>OpenStruct</code> because of the flexibility
it provides.  How could we bridge that gap?</p>

<h2>Attempt 1: OpenFastStruct</h2>

<p>I had read about a gem called <code>open_fast_struct</code> recently, which provides a
different implementation of <code>OpenStruct</code>, with its own performance quirks.  In
most use cases, it outperforms <code>OpenStruct</code> by a factor of 4.  It achieves this
by skipping a step that <code>OpenStruct</code> does.</p>

<p>Internally, every time I call a new method on and <code>OpenStruct</code> instance, it
defines a new method for next time.  This is much more efficient if I&rsquo;m going to
be calling that method hundreds of times.  However, if I&rsquo;m just calling it a few
times, it&rsquo;s not worth it to define the method, and instead what I should really
do is continue to rely on <code>#method_missing</code>.</p>

<p>That idea is at the core of <code>OpenFastStruct</code>.  It just maintains an internal
hash containing the data you insert, and any call to <code>#method_missing</code> interacts
with that hash.  In contrast, <code>OpenStruct</code> also maintains an internal hash, but
defines methods on-the-fly to interact with that hash.</p>

<p>However, <code>OpenFastStruct</code> doesn&rsquo;t maintain the entire public interface of
<code>OpenStruct</code>, and it became clear we would need to monkey-patch it quite a bit
to get it to work for us.</p>

<p>Additionally, I realized that we didn&rsquo;t really need <em>all</em> the flexibility of
<code>OpenStruct</code>.  Instead, our needs would be best served by something that would
define the shape of the class on-the-fly and then stick with it.</p>

<h2>Attempt 2: PersistentOpenStruct</h2>

<p>So I decided to build a new gem.  <code>PersistentOpenStruct</code>, as the name suggests,
allows the construction of a class on-the-fly.  The major difference from
<code>OpenStruct</code> is that it defines methods on the class, rather than defining
singleton methods on the object.  This means that if I create 1,000 objects with
the same 8 properties, <code>OpenStruct</code> will define 8,000 methods, and
<code>PersistentOpenStruct</code> will define 8.</p>

<p>To make sure I obeyed the entire public interface, I decided to put this
together by subclassing <code>OpenStruct</code> and redefining the methods which would
otherwise define singleton methods.  This has the nice benefit that the entire
significant code in the gem is around 15 lines.  The downside is, of course,
that <code>PersistentOpenStruct</code> can only be understood in the context of
<code>OpenStruct</code> and depends on the internals of <code>OpenStruct</code>.  Still, I think the
tradeoffs are in favor of keeping things simple for now, and letting things
develop over time as needed.</p>

<p>The other thing I did was literally copy over the tests that are used to test
the original <code>OpenStruct</code> class.  The only changes I made were adjustments which
made sense in this case (unlike <code>OpenStruct</code>, what happens to one object affects
the <code>#respond_to?</code> answer of another), and adding some additional tests.</p>

<p>Enough of my chitchat, though, it&rsquo;s time for the results!</p>

<h2>PersistentOpenStruct Revealed</h2>

<p>Here&rsquo;s some code which demonstrates how <code>PersistentOpenStruct</code> works.</p>

<p>``` ruby
class MyDataStructure &lt; PersistentOpenStruct
end</p>

<p>datum1 = MyDataStructure.new(foo: :bar)</p>

<p>datum2 = MyDataStructure.new
datum2.respond_to?(:baz) #=> false
datum2.respond_to?(:foo) #=> true
```</p>

<p>Since <code>datum1</code> used <code>foo</code> as a key, every instance of <code>MyDataStructure</code> will
now have a <code>foo</code> method.  Again, this happens because <code>MyDataStructure</code> has the
<code>#foo=</code> and <code>foo</code> methods defined on the class as soon as any instance gets a
<code>foo</code> property.</p>

<p>As for performance?  You can download the gem and run the benchmarks yourself.
Various actions (key/value assignment on initialization, key/value assignment
after initialization, value access) have different comparisons, but generally
speaking, <code>PersistentOpenStruct</code> is about 25%-99% as fast as a regular class.</p>

<p>You can see the results I got on my Mac at the gem&rsquo;s homepage.</p>

<h2>The Bottom Line</h2>

<p>By simply dropping in <code>PersistentOpenStruct</code> in place of <code>OpenStruct</code>, we saw a
10% reduction in response time for Sidekiq jobs that relied heavily on
<code>OpenStruct</code>s.</p>

<p>Sound interesting?  Check out
<a href="http://github.com/amcaplan/persistent_open_struct">the gem&rsquo;s homepage</a> and give
it a whirl.  Drop me a line &ndash; leave a comment or submit a GitHub issue &ndash; let me
know what happens!</p>
]]></content>
  </entry>
  
</feed>
