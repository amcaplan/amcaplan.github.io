<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/blog/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2016-12-26T13:46:42+02:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Commit Message Anti-Patterns]]></title>
    <link href="http://amcaplan.ninja/blog/2016/12/26/git-commit-message-anti-patterns/"/>
    <updated>2016-12-26T12:11:32+02:00</updated>
    <id>http://amcaplan.ninja/blog/2016/12/26/git-commit-message-anti-patterns</id>
    <content type="html"><![CDATA[<p>Have you ever experienced this before?  You&rsquo;ve just finished a unit of work, and
you&rsquo;re rightfully proud of what you&rsquo;ve accomplished.  All that&rsquo;s left is to
commit and push.  So let&rsquo;s just <code>git commit -am "</code>&hellip; what exactly?  Filling in
that line can be really tricky, and you never know when another developer—or
future you—will curse your name for an unhelpful commit message.</p>

<p>Fortunately, many common harmful practices can be summed up into a few
anti-patterns.  In this post, we&rsquo;ll cover 5 critical mistakes to avoid.</p>

<!-- more -->


<h3>1. The One-Liner</h3>

<p>One of the most common mistakes programmers make (not just junior developers!)
is overuse of the <code>-m</code> flag.  It&rsquo;s awfully convenient to write out your message
on the command line, never having to drop into Vim to edit a commit message.</p>

<p>Unfortunately, <code>-m</code> also means you can&rsquo;t (easily) write a multi-line commit.
Often, a multi-line commit is the perfect place to add a comment about why a
decision was made, the business purpose of a feature, or how something performs
(you can even include benchmarks!).  When commits are viewed in the short form,
only the first line will show up, but if someone dives deeper into that commit,
they&rsquo;ll find all the juicy stuff you left for them.  And if you make multi-line
commits a regular practice, you&rsquo;ll find that the team starts looking for them
more and more, further increasing their value.</p>

<p>If you don&rsquo;t like using Vim, guess what?  You don&rsquo;t have to!  Just set the
<code>$GIT_EDITOR</code> bash variable in your <code>.bash_profile</code> and you can switch it to
any editor you want.  I&rsquo;m partial to MacVim, so I&rsquo;ve set:</p>

<p><code>sh
export GIT_EDITOR="mvim +star -f"
</code></p>

<p>to start MacVim in Insert mode.  You can add whatever command line flags you
wish to really customize your git editor.</p>

<p>I&rsquo;ve also aliased <code>gc</code> to <code>git commit -v</code>, which prints out a diff in my text
editor below the message area.  It&rsquo;s not included in the message, just for me to
see while I&rsquo;m writing.  This way, I have a quick opportunity to look over all my
changes and make sure my message properly reflects what changed in this commit.</p>

<h3>2. The File List</h3>

<p>Commits are often headlined with <code>Update file.rb and other_file.js</code>.  This
misses the point of a commit.</p>

<p>If I want to know what files were updated in a commit, I&rsquo;ll dive deeper with
<code>git show</code>.  The commit tagline serves a different purpose: explaining the
semantic nature of your changes.</p>

<p>Consider this git history:</p>

<p><code>
db68160 Add _posts/talks/2016-05-05-this-is-your-brain-on-ruby.markdown (Ariel Caplan, 3 months ago)
42adaf2 Add _posts/talks/2015-11-06-start-your-rails-engines.markdown (Ariel Caplan, 3 months ago)
2c2d151 Add source/railsconf2016/index.html and PDF (Ariel Caplan, 4 months ago)
28b958f Remove source/_includes/asides/github.html and edit layout files (Ariel Caplan, 6 months ago)
9e09be5 Edit _posts/talks/2015-11-24-threads-and-processes.markdown (Ariel Caplan, 6 months ago)
</code></p>

<p>Now consider this:</p>

<p><code>
db68160 Add This Is Your Brain on Ruby as a talk (Ariel Caplan, 3 months ago)
42adaf2 Add RailsConf Rails Engines workshop as a talk (Ariel Caplan, 3 months ago)
2c2d151 Add RailsConf2016 slides (Ariel Caplan, 4 months ago)
28b958f Remove GitHub repos aside (Ariel Caplan, 6 months ago)
9e09be5 Add video for RailsIsrael talk (Ariel Caplan, 6 months ago)
</code></p>

<p>Which one tells a more coherent story, months or years later?  And keep in mind,
this is just for a blog with a bunch of unrelated posts; now think about an
application which has a nontrivial history of interrelated commits.</p>

<p>Making the point differently, the file list tells the How, but your commit
history is about telling the What: What happened to this repo over the course of
time?  How has it changed and developed?</p>

<h3>3. Bugfix</h3>

<p>Very often we justify a quick &ldquo;Bugfix&rdquo; commit message with the thought that it&rsquo;s
just a bugfix so it&rsquo;s not important.  That could not be further from the truth!</p>

<p>A bug is no more or less than an application doing exactly what you told it to
do.  The problem is always that you told it to do something different than you
really had in mind.  Fixing a bug is a change in behavior; it deserves to be
documented appropriately in your commit message.</p>

<p>What was the incorrect behavior you observed?  How does your change address it?
What steps did you take to ensure the bug won&rsquo;t happen again: Extra tests, a
guard clause, a refactor to avoid the problem?  All of this is useful
information when you need to revisit that code.</p>

<h3>4. &ldquo;It was the best of times, it was the worst of times&hellip;&rdquo;</h3>

<p>This tip is simple: Keep it short!</p>

<p>It&rsquo;s definitely important to go into detail in your commit messages.  But the
one-line summary isn&rsquo;t the place for it.  Make sure your first line is no more
or less detailed than necessary, and then expand to your heart&rsquo;s content in the
following lines.</p>

<p><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">Tim Pope recommends</a> that you keep the first line below 50
characters.  I stretch that limit on occasion, but it&rsquo;s a decent rule of thumb.</p>

<p>Keep in mind, when you run <code>git log</code>, you&rsquo;ll be reading the messages on your
screen in a big wall of text.  Make sure the important words pop out (capitalize
appropriately!) and don&rsquo;t create more visual noise than necessary.  As
Shakespeare wrote, &ldquo;Brevity is the soul of wit.&rdquo;</p>

<p>To get to the point: You have 1 line to work with, so get to the point!</p>

<h3>5. ABC123</h3>

<p>This one might be a little controversial, but hear me out.</p>

<p>Some shops might have a convention of prefacing a commit message with a ticket
number:</p>

<p><code>
[ABC123] Implement admin workflow for comments
</code></p>

<p>This might seem like a good idea.  However, keep in mind that it adds
significant noise to the commit message and removes focus from the substance of
the commit, all while impinging on your precious 50 characters.</p>

<p>More importantly, the ticket number is helpful for searching, but not for
eyeballing.  The one-liner&rsquo;s main goal should be to quickly run through history
and figure out what to focus on.  Once you spot the commit you want, you can
dive into details.  At that point, information like ticket number is useful—and
that&rsquo;s why you have the remainder of your commit message.</p>

<p>My personal preference is to always include the ticket number in the branch name
and pull request title, and to always merge the pull request with a merge
commit.  That way, the commit messages are broken into chunks, bracketed by pull
request titles which sum up the last few commits and link them to a ticket.  So
instead of:</p>

<p><code>
db68160 [ABC123] Implement admin workflow for comments (Ariel Caplan, 3 months ago)
42adaf2 [ABC123] Moderate comments by default (Ariel Caplan, 3 months ago)
2c2d151 [ABC123] Filter comments for spam (Ariel Caplan, 4 months ago)
28b958f [ABC123] Add comments support to posts (Ariel Caplan, 4 months ago)
0827ed1 [ABC121] Replace hero image with cooler ninja (Ariel Caplan, 4 months ago)
dae8999 [ABC121] Darken post background (Ariel Caplan, 4 months ago)
</code></p>

<p>we might see this instead:</p>

<p><code>
9e09be5 Merge pull request #478 from 'ABC123-add-comment-support-to-posts' (Ariel Caplan, 3 months ago)
db68160 Implement admin workflow for comments (Ariel Caplan, 3 months ago)
42adaf2 Moderate comments by default (Ariel Caplan, 3 months ago)
2c2d151 Filter comments for spam (Ariel Caplan, 4 months ago)
28b958f Add comments support to posts (Ariel Caplan, 4 months ago)
a713ef2 Merge pull request #477 from 'ABC121-make-post-template-cooler' (Ariel Caplan, 3 months ago)
0827ed1 Replace hero image with cooler ninja (Ariel Caplan, 4 months ago)
dae8999 Darken post background (Ariel Caplan, 4 months ago)
</code></p>

<p>In this case, I can clearly see which set of commits corresponds to which pull
request, which then links a set of several commits with a ticket as a unit of
work done.  YMMV, but I find this to be an incredibly helpful way of figuring
out how individual commits fit into a sequence without compromising on the
limited first-line space.</p>

<p>Of course, to make this work, you probably want to ensure your pull requests are
rebased off your main branch just before merging. Otherwise, your commits end up
in a big jumble and it&rsquo;s harder to make sense of things. Regardless of whether
you follow my suggestion in terms of ticket numbers, I consider it a best
practice to make sure related commits are grouped linearly in your Git history.
It will save you a lot of confusion in the long run.</p>

<h3>Parting Thoughts</h3>

<p>This might seem like a lot of nitpicking for not a lot of value. In truth, I
can&rsquo;t guarantee immediate results because there won&rsquo;t be any. It takes time, and
the cooperation of a full team, to make the most of good Git commit practices.
I can, however, attest to these practices having saved me countless hours in
figuring out what happened in the past, why decisions were made, and even just
the basics of which code additions and changes are interrelated.</p>

<p>I will close with one thought: Whatever your decisions, you only get one
chance<sup>1</sup> to write history. Make it count.</p>

<hr />


<p><sup>1</sup>With Git, technically you can rewrite history whenever you want, but of
course practically it doesn&rsquo;t happen past a few commits.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8 Crazy Blog Posts!]]></title>
    <link href="http://amcaplan.ninja/blog/2016/12/25/8-crazy-blog-posts/"/>
    <updated>2016-12-25T16:01:56+02:00</updated>
    <id>http://amcaplan.ninja/blog/2016/12/25/8-crazy-blog-posts</id>
    <content type="html"><![CDATA[<p>I have a confession to make.  I&rsquo;m embarrassed by my blog.</p>

<p>I&rsquo;m certainly proud of (most of) the content.  It&rsquo;s shown significant
development in complexity and depth since I started.  But I have a lot of ideas
running around my head all the time, some of them even good ideas, and I&rsquo;d like
the blog to reflect more of them.</p>

<p>So I&rsquo;ve decided to give myself a Chanukah gift: I&rsquo;m requiring myself to make
every effort to come up with one blog post every day of Chanukah.</p>

<p>This probably makes you wonder a few things.</p>

<!-- more -->


<h3>What?</h3>

<p>It&rsquo;s really simple.  I want to make my blog better, and I think it&rsquo;ll be better
if I&rsquo;m more inclined to post things when I have ideas which are useful to
others.  I&rsquo;ve gotten out of the habit of blogging, with the result that lots of
smaller, useful-tech-tips type blog posts, and some larger thinkpiece posts,
just never happened.  That means people Googling to find a solution to their
problem might not find what they&rsquo;re looking for, and I&rsquo;ve lost the amazing
conversations and learning that come from publishing thinkpieces.</p>

<p>Also, I really like writing.</p>

<p>To change my habits, I&rsquo;m going to try to publish 8 posts in 8 days.  That&rsquo;s a
big deal for me; it&rsquo;ll add 50% to my current total of posts.  But desperate
times call for desperate measures.</p>

<h3>When?</h3>

<p>The 25th of Kislev through the 3rd of Tevet, which this year happens to coincide
with December 25th through January 1st.  Those dates aren&rsquo;t related in any
significant way; in 2013, for example, the first Day of Chanukah coincided with
American Thanksgiving.</p>

<p>As I&rsquo;ll clarify below, Chanukah wasn&rsquo;t chosen for any religious reason; it&rsquo;s
just a convenient (for me) cluster of 8 days to focus a rather ambitious goal!</p>

<h3>How?</h3>

<p>Honestly, I&rsquo;m not quite sure.  I&rsquo;m cheating by counting this as one post, and I
have one high-quality post already written up.  I also have an idea for a third.
Beyond that, I&rsquo;ll have to get creative!</p>

<h3>Why?</h3>

<p>Now&rsquo;s when I&rsquo;m supposed to offer some platitude about &ldquo;This is my Chanukah gift
to you,&rdquo; or &ldquo;You can think of it as a Christmas present,&rdquo; or whatever.  But I
don&rsquo;t feel comfortable with just about anything explicitly interfaith, and I
don&rsquo;t think I need a religious (or pseudo-religious) reason to do something
valuable.  Also I don&rsquo;t believe in Chanukah presents, coming from a family that
eschewed the practice since TBQH it seems pretty Christian.  So basically, no
presents.  Deal.</p>

<p>To be perfectly honest, this is an experiment to see whether I can get my
creative juices flowing.  I happen to have a little extra time now, between days
off and the fact that people seem to disappear for well-deserved vacation around
this time of year so essentially nothing work-related gets done.</p>

<p>In other words, it&rsquo;s the best time of year to engage in an experiment that takes
a lot of time, for someone like myself who isn&rsquo;t celebrating anything in
particular, unless you count Chanukah, which adds maybe 20 minutes to my daily
schedule but basically functions as 8 regular days.</p>

<p>It should be fun.  There&rsquo;s some good stuff down the pipeline!</p>

<h3>Who are you exactly?</h3>

<p>If you&rsquo;re first visiting the blog, I do have an <a href="/about/">About Page</a>.  I
have lots of <a href="/archives/">thoughts about stuff</a>, and occasionally
<a href="/talks/">speak at meetups and conferences</a>.  You know, programmer stuff?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Choose Your Constraints]]></title>
    <link href="http://amcaplan.ninja/blog/2016/01/04/choose-your-constraints/"/>
    <updated>2016-01-04T00:04:10+02:00</updated>
    <id>http://amcaplan.ninja/blog/2016/01/04/choose-your-constraints</id>
    <content type="html"><![CDATA[<p>A while back I published a few Tweets about constraints.  They seemed to strike
a chord with others, and I want to develop the point a bit more.</p>

<p>So let&rsquo;s start with this: What are some constraints you feel in your day-to-day
coding?  Which factors are limiting your ability to produce new, shippable
features?  Consider the following list:</p>

<div id="constraints-checklist">
  <input type="checkbox" id="time" name="time" value="Time"><label for="time">Time/Deadline</label><br/>
  <input type="checkbox" id="money" name="money" value="Money"><label for="money">Money</label><br/>
  <input type="checkbox" id="legacy" name="legacy" value="Legacy Code"><label for="legacy">Legacy Code/Projects</label><br/>
  <input type="checkbox" id="performance-requirements" name="performance-requirements" value="Performance Requirements"><label for="performance-requirements">Performance Requirements</label><br/>
  <input type="checkbox" id="legal" name="legal" value="Legal Regulations"><label for="legal">Legal Regulations</label><br/>
  <input type="checkbox" id="clients" name="clients" value="Client Restrictions"><label for="clients">Client Restrictions</label><br/>
  <input type="checkbox" id="hardware" name="hardware" value="Hardware"><label for="hardware">Hardware</label><br/>
  <input type="checkbox" id="competing-projects" name="competing-projects" value="Competing Projects"><label for="competing-projects">Competing Projects</label><br/>
  <input type="checkbox" id="skills" name="skills" value="Skills"><label for="skills">Team Members' Skills</label>
</div>


<br/>


<p>Take a moment and check off the 3 biggest pain points in your current job.</p>

<!-- more -->


<p>You&rsquo;ve selected:</p>

<ul id="constraints-results"></ul>


<p>Hold that thought; let&rsquo;s talk for a moment about the most significant force
behind your (and all developers') frustrations, and how it underlies the factors
you&rsquo;ve chosen.</p>

<h3>The Triple Constraint</h3>

<p>The Triple Constraint, also known as the Project Management Triangle, is
well-known as a classic line developers tell overzealous managers:</p>

<blockquote><p>We can build it with every feature, on time, and on budget.  Pick two.</p></blockquote>

<p>The Triple Constraint sets up a fundamental tension between three factors:</p>

<ol>
<li>Time (how quickly the project is done)</li>
<li>Cost (how much it costs to complete the project)</li>
<li>Scope (how many features are built, and how well)</li>
</ol>


<p>Any time you make greater demands in one aspect, at least one of the others will
have to give.  If you reduce the time for the project, you&rsquo;ll need to pay more
or (more realistically) cut scope.  Want to save money?  Cut scope, or hire
developers who will do it more slowly.  To increase the scope, pay more, or
better, developers, to work on it for the same amount of time, or increase the
length of time allotted for the project.</p>

<p>Let&rsquo;s see how the Triple Constraint applies to the problems you&rsquo;ve selected:</p>

<p id="constraints-interpretation"></p>


<p>So it looks like <span id="biggest-problems"></span>.  With that in mind, let&rsquo;s
think about a more active approach to controlling and choosing our constraints.</p>

<h3>Constraints: A Choice of Which, Not Whether</h3>

<p>The point of the Triple Constraint is to emphasize that constraints will exist
on every project, and we are responsible for managing them realistically.  There
is great temptation to assume that with extra effort we can cheat the system and
push for a better outcome on all 3 constraints.  That&rsquo;s just not possible.</p>

<p>However, by acknowledging and embracing our constraints, we can maximize the
outcome.  We cannot build every feature, on time, and on budget.  But we can
build the right set of features, given the right amount of time and an
appropriate budget.</p>

<p>Let&rsquo;s think about this in the context of the issues you selected.</p>

<div id="constraints-suggestions"></div>


<p>The main point here is that each of Cost, Scope, and Time constraints will get
the best of you, unless you actively acknowledge the conflict, and make sure
your efforts reflect the true business priorities.  Attempting to maximize all
three is impossible and will usually lead to significant shortcomings in all
three areas.</p>

<h3>Adding More Constraints</h3>

<p>This is the Tweetstorm (yes, my own) that originally got me thinking:</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Your current constraints ultimately train you to operate effectively within precisely those constraints. Choose your constraints wisely.</p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/670030185106907136">November 27, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p lang="en" dir="ltr">Take on too much work for the time allotted, you will learn to overwork and underdeliver, and you&#39;ll stop noticing that it&#39;s happening.</p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/670030975620005890">November 27, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p lang="en" dir="ltr">Always make time for testing, pairing, knowledge sharing, and learning. Eventually they will happen automatically without special effort.</p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/670031382144528385">November 27, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p lang="en" dir="ltr">Took me &gt;1yr to get used to TDD. But now it comes free, without thinking about it, and the benefits are tangible.</p>&mdash; Ariel Caplan (@amcaplan) <a href="https://twitter.com/amcaplan/status/670031749641076737">November 27, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Now that I&rsquo;ve thought things through more clearly, let&rsquo;s summarize using the
terms above.  You already work within constraints of Cost, Scope, and Time.  If
you ignore the competitive nature of those constraints, you will overwork
yourself, fail to deliver the entire Scope, miss the deadline, or—even worse—all
three.  This will become the <em>de facto</em> mode of operation, much to the
consternation of yourself, your colleagues, and your managers.  Worse, you will
take on the Cost of long-term technical debt because it allows you to expand
Scope and minimize Time in the short term.</p>

<p>The only solution is to embrace the fact that you just can&rsquo;t do everything, and
take on constraints that will safeguard you from the poor decision-making that
brings on long-term troubles.</p>

<p>The four constraints I recommend budgeting for, as mentioned above, are:</p>

<ol>
<li><p><strong>Testing:</strong> Insist on meaningful test coverage.  There are advantages to
writing your tests first, but at least make sure you end up with solidly tested
code.</p>

<ul>
<li>You will know your code works, and it will be much easier to change or
extend later without breaking everything.</li>
<li>It&rsquo;s hard to know you&rsquo;ve accomplished the appropriate Scope without a
reproducible test, and not testing increases the Cost of adding features
later.</li>
</ul>
</li>
<li><p><strong>Pairing:</strong> Don&rsquo;t let a sprint go by without finding an opportunity to pair
on something, anything.</p>

<ul>
<li>Pairing is not always the best use of resources (you might say it&rsquo;s double
the Cost), but often the synergy of two coders talking things out nets an
overall gain in productivity.</li>
<li>Pairing also provides a host of benefits for the long term, in terms of
team relationships and knowledge sharing.  Which brings us to the next
point&hellip;</li>
</ul>
</li>
<li><p><strong>Knowledge Sharing:</strong> Make time in your workflow to share knowledge, both
formally and informally.</p>

<ul>
<li>Meet weekly with your team and have someone present their recent work.
Eventually everyone will take a (temporary or permanent) vacation, and
someone else will need to fill their role.  Pay down the Cost of a weekly
hour-long meeting, so your team isn&rsquo;t frozen when one person takes a
much-needed break.</li>
<li>Look for opportunities to pair junior and senior developers together.  Or
if someone is unfamiliar with part of the codebase, assign them a ticket
that requires them to learn it, and designate a knowledgeable pair. The
stronger each member of your team becomes, the more quickly you can build
new features in a stable fashion.</li>
</ul>
</li>
<li><p><strong>Learning:</strong> I expect this to be controversial, but here goes.  Make time in
your workday for something code-related that has nothing to do with your work.
Try out a new language or framework.  Write a script to automate something at
home.  Read an article from one of
<a href="http://peterc.org/#ap3">Peter Cooper&rsquo;s newsletters</a> or watch a talk on
<a href="http://confreaks.tv/events">Confreaks</a>.  Follow the Twitter account of a
developer you respect and read what they post.  Broaden your horizons in code,
and you&rsquo;ll find that some of your most brilliant ideas at work will come from
your explorations.  You can&rsquo;t be inspired without inspiration.</p></li>
</ol>


<p>The crazy thing about these practices is that if you constrain yourself for long
enough, they become second nature, and you don&rsquo;t notice the time they take up.
Eventually, your budget will automatically include these activities.  Yet you
will be able to crank out features at a quicker, more stable pace, precisely
<em>because</em> you are taking the time to invest in yourself and your code.</p>

<p>You will also notice a greater sense of team cohesiveness.  These practices
encourage the team to work together, to learn together, and to help each other
grow in capacity to produce excellent software.  These practices bring out the
synergetic relationships that make team-built software qualitatively better than
software produced by individuals.</p>

<p>Sometimes, it will be difficult to get buy-in from the more business-minded
stakeholders in your company.  For this reason, make sure to couch the
conversation in terms of risk avoidance and long-term business objectives, which
honestly should be your goal, too.</p>

<h3>A Call to Action</h3>

<p>Let&rsquo;s end with a challenge, shall we?  Commit to one—just one—of these four
practices for the next two weeks.  Then let&rsquo;s hear some feedback about how you
did, and what type of impact it had on yourself, your code, and your team.</p>

<ul>
<li><a href="https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;ref_src=twsrc%5Etfw&amp;text=I%20will%20insist%20on%20meaningful%20test%20coverage%20for%20the%20next%202%20weeks.%20Make%20a%20pledge%3A&amp;tw_p=tweetbutton&amp;url=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;via=amcaplan">Commit to Testing</a></li>
<li><a href="https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;ref_src=twsrc%5Etfw&amp;text=I%20will%20make%20time%20for%20pairing%20during%20the%20next%202%20weeks.%20Make%20a%20pledge%3A&amp;tw_p=tweetbutton&amp;url=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;via=amcaplan">Commit to Pairing</a></li>
<li><a href="https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;ref_src=twsrc%5Etfw&amp;text=I%20will%20organize%20a%20regular%20knowledge%20sharing%20session%20starting%20in%20the%20next%202%20weeks.%20Make%20a%20pledge%3A&amp;tw_p=tweetbutton&amp;url=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;via=amcaplan">Commit to Knowledge Sharing</a></li>
<li><a href="https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;ref_src=twsrc%5Etfw&amp;text=I%20will%20dedicate%20time%20to%20non-work-related%20programming%20learning%20during%20the%20next%202%20weeks.%20Make%20a%20pledge%3A&amp;tw_p=tweetbutton&amp;url=http%3A%2F%2Famcaplan.ninja%2Fblog%2F2016%2F01%2F04%2Fchoose-your-constraints%2F&amp;via=amcaplan">Commit to Learning</a></li>
</ul>


<script type="text/javascript">
  (function(){
    var inputs = document.getElementById('constraints-checklist').getElementsByTagName('input');

    var selectedInputs = function() {
      checkedInputs = [];

      for (var i = 0; i < inputs.length; i++) {
        input = inputs[i]
        if (input.checked) { checkedInputs.push(input); }
      }

      return checkedInputs;
    };

    var noSelectionMade = '&lt;NO SELECTION MADE&gt;';

    var inputText = function(input){ return input.labels[0].textContent; }
    var liIfy = function(text) { return "<li>" + text + "</li>"; };

    var setResultsHTML = function(selected) {
      if (selected.length === 0) { html = noSelectionMade; }
      else {
        html = selected.map(inputText).map(liIfy).join('');
      }
      document.getElementById('constraints-results').innerHTML = html;
    };

    var interpretations = {
      "time": "Time is <strong>Time</strong>, easy enough.",
      "money": "Money is one element of <strong>Cost</strong>.",
      "legacy": "When you pay down technical debt on legacy code and projects, you encounter the <strong>Cost</strong> of a past project, except that you incur those costs now.",
      "performance-requirements": "Performance requirements are an aspect of <strong>Scope</strong>.",
      "legal": "Legal requirements are an aspect of <strong>Scope</strong>.",
      "clients": "Client requirements are an aspect of <strong>Scope</strong>.",
      "hardware": "Insufficient hardware resources reflect an upper bound on <strong>Cost</strong>.",
      "competing-projects": "Assigning developers to too many simultaneous projects reflects unwillingness to accept the true <strong>Cost</strong> of each project.",
      "skills": "When team members lack the skills to complete the task, the learning involved becomes part of the <strong>Cost</strong> of the project."
    };
    var interpretation = function(input) { return interpretations[input.name]; }

    var setInterpretationHTML = function(selected) {
      if (selected.length === 0) { html = ''; }
      else {
        html = '<ul>' +
          selected.map(interpretation).map(liIfy).join('') +
          '</ul>';
      }
      document.getElementById('constraints-interpretation').innerHTML = html;
    }

    var problems = {
      "time": "Time",
      "money": "Cost",
      "legacy": "Cost",
      "performance-requirements": "Scope",
      "legal": "Scope",
      "clients": "Scope",
      "hardware": "Cost",
      "competing-projects": "Cost",
      "skills": "Cost"
    };
    var problemList = function(selected) {
      var list = [];
      selected.forEach(function(input) {
        var problem = problems[input.name];
        if (list.indexOf(problem) === -1) { list.push(problem); }
      });
      return list.sort();
    };
    var outputProblemList = function(list) {
      switch(list.length) {
        case 0:
          return "your biggest problems are &lt;UNKNOWN - FILL IN PLEASE&gt;";
        case 1:
          return "your biggest problem is " + list[0];
        case 2:
          return "your biggest problems are " + list[0] + " and " + list[1];
        case 3:
          return "you are struggling on all 3 fronts: Cost, Scope, and Time"
      }
    };
    var updateProblemList = function(inputs) {
      document.getElementById('biggest-problems').innerHTML =
        outputProblemList(problemList(inputs));
    };

    var suggestions = {
      "time": "<strong>Time/Deadlines:</strong> Sometimes, your product's greatest feature is time - for example, it must capture the market before competitors arrive.  In other cases, time is less crucial than other factors.  So it's important to evaluate the significance of the deadline in your situation.  Often the right answer is multifaceted - for example, extending the deadline by a month along with cutting scope in certain ways.",
      "money": "<strong>Money:</strong> This question will be fundamentally different depending on the scenario.  In a small startup launching its first product, you may not have the leeway to increase Cost.  This is why startups tend to build small, streamlined products that are sold on their simplicity; they cut Scope, because money is limited, and a long time-to-market will kill the company financially.  In a large company, though, the right answer may be to build the product with full scope, but extend the Time or accept increased Cost.",
      "legacy": "<strong>Legacy Infrastructure:</strong> If you struggle with legacy code or even full applications, congratulations!  Your product has been around for a while, it's hopefully well-established, but it comes with the messiness of decisions which—as you can see using your 20/20 hindsight—have turned out for the worse.  The answer is usually to minimize Cost by paying down technical debt when possible, but accept that sometimes the value of Time will triumph.  Usually businesspeople err on the side of not paying down technical debt; your job as developer is to counter that trend, diplomatically of course.",
      "performance-requirements": "<strong>Performance:</strong> Whether you're building for desktop, mobile, tablet, or the web, performance is going to be a make-or-break for your product.  And performance has a tangible Cost in terms of developer attention and effort.  The company needs to accept that performance will require massive attention, especially over time as more and more features are added.  The right answer is usually to cut feature Scope when performance becomes a problem, and not before.  It's also important to understand how valuable performance gains are in any situation, and make sure a proportional amount of developer resources are dedicated to performance improvements.  Too little attention and performance problems will be the death of your product; too much attention and your product's feature set will go nowhere.",
      "legal": "<strong>Legal Requirements:</strong> These are generally non-negotiable.  Once we accept that, it's important to view fulfillment of legal requirements as a Scope achievement, and cut other Scope considerations as necessary.  Better 2 new features than 3 features plus a lawsuit.",
      "clients": "<strong>Client Requirements:</strong> Keep in mind, your client is the one paying your bills.  However, clients often use that position to demand more features than are healthy for your product.  It's important to be honest with clients about the limitations of your team, and explain that you want your product to grow stably in the long term.  Pushing lots of features out the door quickly will limit your product's ability to grow, and that will hurt your clients as well later on.  Negotiate your clients down to a reasonable feature set given the Time and Cost constraints of your project—and make sure to deliver.",
      "hardware": "<strong>Hardware Limitations:</strong> These cases generally fall into two categories.  One is a small company with severe financial constraints.  In that case, the answer is probably to wait on certain features until the company begins to gather more revenue.  Small companies have a tendency to try to scale too early; wait until the need arises.  (In other words, limit the Scope of your operations until the market demands more.)  Larger companies have the opposite problem; they know the scale is necessary, but may not have financial resources available now, or the process of getting appropriate hardware may take time.  The right answer is usually to shelve the project for now; there are probably many other projects deserving of attention that would provide value immediately.",
      "competing-projects": "<strong>Competing Projects</strong>: Companies are often unaware of the Cost of context switching.  To minimize Cost, a developer should work on only one project at a time.  If multiple projects need attention, every effort should be made to limit Scope or extend Time in a way that allows each developer to give their undivided attention to one project, perhaps switching back and forth at intervals of one to two weeks.  Greater flexibility will pay off in increased productivity.",
      "skills": "<strong>Team Members' Skills:</strong> Developers, contrary to popular belief, are not code-generation machines.  They are human beings who know some things and do not know other things.  Part of the Cost of a project is the need for developers to educate themselves about the necessary tools and the problem space.  This must be considered as a factor that will challenge Time and Scope."
    };

    var suggestionList = function(inputs) {
      if (inputs.length === 0) { return [noSelectionMade]; }
      return inputs.map(function(input) {
        return '<li>' + suggestions[input.name] + '</li>';
      });
    };

    var updateSuggestionList = function(inputs) {
      document.getElementById('constraints-suggestions').innerHTML =
        '<ul>' + suggestionList(inputs).join('') + '</ul>';
    };

    var uncheckIfFourth = function() {
      if (selectedInputs().length > 3) { this.checked = false; }
    };

    var updateFields = function(){
      selected = selectedInputs();
      setResultsHTML(selected);
      setInterpretationHTML(selected);
      updateProblemList(selected);
      updateSuggestionList(selected);
    }

    for (var i = 0; i < inputs.length; i++) {
      input = inputs[i];
      input.addEventListener('change', uncheckIfFourth, false);
      input.addEventListener('change', updateFields, false);
    }

    document.addEventListener('DOMContentLoaded',function(){
      updateFields();
    });
  })()
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metrics That Matter]]></title>
    <link href="http://amcaplan.ninja/blog/2015/12/02/metrics-that-matter/"/>
    <updated>2015-12-02T16:05:35+02:00</updated>
    <id>http://amcaplan.ninja/blog/2015/12/02/metrics-that-matter</id>
    <content type="html"><![CDATA[<p>Many of us are familiar with the standard tirades against the use of metrics in
judging developers.  Most of these arguments basically boil down to one of two
concerns:</p>

<ol>
<li>Metrics tend to value things which shouldn&rsquo;t be valued</li>
<li>Metrics attempt to quantify things that fundamentally elude quantification</li>
</ol>


<p>Examples of the first may be measuring lines of code (which rewards overly
verbose, unmaintainable solutions) or test coverage (which encourages test suite
bloat and doesn&rsquo;t ensure good testing practices).  The second applies to metrics
like story points completed (which attempts to quantify productivity as story
points &ndash; a bad measure of accomplishment &ndash; per time, and encourages high
estimates and rush jobs).</p>

<p>While these points are true, I would argue that there&rsquo;s a bigger issue here.
We should judge the utility of metrics by the results they incentivize.  These
metrics are meant to encourage individual performance, but from a company&rsquo;s
perspective, the goal should be total performance as a team.</p>

<!-- more -->


<h3>How Does An Ideal Team Behave?</h3>

<p>If we want to encourage teams to work together and successfully create value, we
would be well advised to consider what we actually care about in a team.</p>

<p>I consider the following team attributes to be most significant:</p>

<ol>
<li><strong>Sharing</strong> &ndash; amassing and spreading knowledge in a manner that benefits the
whole, rather than one particular team member</li>
<li><strong>Communication</strong> &ndash; both amongst developers and interacting with other interested
parties (UX, product owners/managers, QA, clients, etc.)</li>
<li><strong>Code Quality</strong> &ndash; in terms of both clarity/communicativeness of the code and
number of regressions</li>
<li><strong>Creativity</strong> &ndash; going above and beyond handed-down requirements to consider what
is really best for the product, being involved in the design process</li>
<li><strong>Efficiency</strong> &ndash; producing solutions at a pace that matches their capacity</li>
</ol>


<p>Let&rsquo;s consider metrics that best incentivize those goals.</p>

<h3>Sharing</h3>

<p>The team should be sure to avoid islands of knowledge, where only one or two
developers are capable of working on a particular area of the product.</p>

<p>One metric often discussed in this vein is the Bus Factor, a measurement of how
many developers would need to get hit by a bus to immobilize the team.  This is
useful in terms of understanding which pieces of the app represent knowledge
gaps amongst the team.</p>

<p>There is another metric I would like to introduce; I call it the Minimum
Familiarity Factor.  The question is: What is the minimum percentage of your
code with which the least experienced developer on your team is familiar?  This
metric complements the Bus Factor, by shifting the focus back to the developers
themselves.  Have any developers been siloed into one specific area of your
ecosystem?  If so, perhaps they could do their job more effectively with
exposure to more of your company&rsquo;s codebase(s).  (Note: The obvious exception
here would be new hires.  In that case, the usual questions of onboarding
methodology are more appropriate trains of thought.)</p>

<h3>Communication</h3>

<p>This one is hard to quantify, right?  Well, luckily, quantification isn&rsquo;t the
point.  What metric might we use to incentivize communication?</p>

<p>One thing we might look at is how often developers are pairing.  I don&rsquo;t think
pairing is right for every situation (and Kent Beck
<a href="https://www.quora.com/Is-pair-programming-worth-the-trade-off-in-engineering-resources/answer/Kent-Beck">agrees</a>.)  It often conflicts with another core
principle, efficiency.  But I don&rsquo;t think there is a more effective way to
ensure communication between developers than having to code together.  If the
solution is going to be complex, and/or the problem space is unfamiliar to one
or both developers, the payoff is tremendous.</p>

<p>How about communication between developers and other interested parties?  I
don&rsquo;t have a great way of measuring that it&rsquo;s happening.  But there is a point
where it becomes clear that it&rsquo;s not happening.  That point is when stories move
from an advanced stage back to development because the requirements were unclear
the first time around.  Maybe the person who wrote up the story did a terrible
job and just wrote the wrong thing.  Or maybe the requirements were
insufficiently clarified.  In the latter case, the developer should have taken
the time to clarify the situation, rather than writing code which would just
have to be rewritten.</p>

<p>Let&rsquo;s be very clear &ndash; based on the value of Creativity, I don&rsquo;t think anyone
should have exclusive authority over how a feature works.  But that&rsquo;s exactly
the point &ndash; if, as the developer is working, they come up with new, interesting
ideas, that should be shared with others, properly hashed out, and reflected in
the story writeup, not just included in a pull request and shipped without
discussion.</p>

<h3>Code Quality</h3>

<p>Ah, code quality.  Everyone seems to have come up with their own metric.  I have
personally lost all faith that it can be measured directly, although tools like
Flog (for Ruby) come pretty close.</p>

<p>I would argue that code quality is just a fancy term for changeability, and as
such, the only way to measure code quality is to see what happens when it
changes.  As time goes on, how hard does it become to add or change features?
Are there more regressions per month as the codebase grows?</p>

<p>I like these questions because they reinforce an important point: Code quality
is a developer aesthetic, not a direct business value.  The value emerges from
code quality when code needs to be changed, and maintenance costs are reduced
due to the code&rsquo;s clarity, modularity, test coverage, etc.  A zero-churn class
can have terrible, hideous code, and it does not matter at all.  Measuring later
at moments of change is a better way to assess how much the business need for
code quality is met.</p>

<p>Judging code quality on a team basis has the advantage of encouraging collective
responsibility.  Maybe we don&rsquo;t need pairing for every feature, but if everyone
is held responsible together, a proper pull request process is inevitable, and
the team will demand robust testing and continuous integration as well.  Who
wants to get stuck with misbehaving code that hurts everyone&rsquo;s productivity?</p>

<h3>Creativity</h3>

<p>Pretty cool, a metric designed to encourage developers to rebel against their PM
masters!  Well, unfortunately, this is going to be rather boring.  I can&rsquo;t give
a real metric here, per se.  It comes down to a [vague] sense of whether
developers are involved in writing stories, and whether developers feel
comfortable challenging the stated requirements.</p>

<p>Oops, that&rsquo;s not really a metric for developers, is it?  It&rsquo;s a metric for
management.  Turns out, management can set a few policies and precedents that
make it possible for developers to contribute their whole selves to the company.
Developers can be involved early in the design and planning process, weighing in
on the feasibility, difficulty, and cost of new features, and maybe even using
some good old human intuition.  Or management can treat its developers as code
monkeys who couldn&rsquo;t possibly understand anything about real people who use
technology.  Of course, the latter might be bad for recruitment, which
ultimately hurts the Code Quality metric&hellip;</p>

<h3>Efficiency</h3>

<p>This one is pretty simple.  It boils down to two questions:</p>

<ol>
<li>Does the developer spend the entire day on Facebook?</li>
<li>Are the other principles being followed?</li>
</ol>


<p>OK, yes, this is a cop-out.  But I sincerely believe that as long as developers
are spending a healthy quantity of time coding, following the principles
outlined above, we can all be adults and rely on developers to do their jobs.
Hopefully we are hiring productive, intelligent, and trustworthy people.</p>

<h3>Pulling It All Together</h3>

<p>Sorry I lied with the title here.  Admittedly, these are not all metrics.  But
if we compare developers with other creative professionals, the whole idea of
metrics starts to sound fishy.</p>

<p>Copywriters, for example, might be paid by the word when quality is not
paramount.  But who would approve of paying a poet per stanza?  The best poetry
is dense and meaningful.  We judge poems by whether or not they make you think,
or bring you to tears.  And we pay novelists and poets by how much business
value they create in the form of sold books.</p>

<p>The fundamental mistake in judging developers by code metrics is exactly this.
We don&rsquo;t want developers to write X lines or close Y tickets.  We want
developers to create business value, mostly through working, useful software.
All else is just means to that end.  What functionality would be most useful?
Let&rsquo;s ask UX.  What is our top priority right now?  Let&rsquo;s check the backlog.
But make no mistake, the developer&rsquo;s primary job is to create value.</p>

<ul>
<li><strong>Efficiency</strong> is obviously a matter of taking limited working hours (and
mental energies) and using them to create the most value for the company.</li>
<li><strong>Creativity</strong> means using technical knowledge to provide extra perspective
when driving the value-creation process.</li>
<li><strong>Code Quality</strong> ensures that the product actually works as expected, will
continue to work, and has potential to keep growing and generating more value.</li>
<li><strong>Communication</strong> recognizes that development does not exist in a vacuum.  The
most productive developer maximizes the chances that their efforts are spent on
code that will make it to production.</li>
<li><strong>Sharing</strong> acknowledges that there is more value in building the team&rsquo;s
ability to create value, long-term, than in any individual&rsquo;s value creation,
short-term.</li>
</ul>


<p>Rather than thinking too much about quantifying developer performance, I would
like to shift the conversation to assessing how developers are being good team
players, building value creation potential alongside addressing current needs.
And I would like to see us viewing our developers (and everyone who works with
them) as an actual team, where individuals working and learning together
multiply the value created individually.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formulating the Ethics of Programming]]></title>
    <link href="http://amcaplan.ninja/blog/2015/11/18/formulating-the-ethics-of-programming/"/>
    <updated>2015-11-18T15:42:16+02:00</updated>
    <id>http://amcaplan.ninja/blog/2015/11/18/formulating-the-ethics-of-programming</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Robert_Cecil_Martin">Uncle Bob</a> recently published a <a href="http://blog.cleancoder.com/uncle-bob/2015/11/18/TheProgrammersOath.html">post</a> where he
attempted to formulate the ethical principles that should guide programmers.  It
was an interesting concept, but I immediately felt it could use a rewrite.</p>

<p>Although I agree that everything in his version is a good idea, I disagree with
the formulation as an ethical guideline for programmers.  Simply put, the
principles of Agile are brilliant.  But they hardly deserve mention in a list of
ethics, and &ndash; I would contend &ndash; detract from the list.</p>

<!-- more -->


<p>There are most certainly cases where following Agile practices would be the
unethical thing to do; it all depends on the needs and policies of the client or
company.  For example, consider Principle 5:</p>

<blockquote><p>I will fearlessly and relentlessly improve the code at every opportunity. I
will never make the code worse.</p></blockquote>

<p>Sometimes, what&rsquo;s needed is a quick fix for production, followed by a more
well-thought-out solution that will take some time to produce.  Will that make
the code worse in the meantime?  You betcha.  Is it the right thing to do
anyway?  Very likely.</p>

<p>Let&rsquo;s consider Principle 7:</p>

<blockquote><p>I will continuously ensure that others can cover for me, and that I can cover
for them.</p></blockquote>

<p>Again, I totally agree.  But if there are 2 developers in a tiny, bootstrapped
startup, maybe you don&rsquo;t have enough time to share all the information all the
time.  Principle 7 is true for most business cases.  But as soon as it&rsquo;s
specific to a business case, you can tell that this is less of a moral principle
and more of a strategy for success in accomplishing something else.</p>

<p>In both cases, the principles are really ways of &ndash; in the average business case
&ndash; helping the employer/client to be more stable and able to continually improve
its product.  So when it comes to the ethical piece, these principles &ndash; in fact,
at least half of the oath &ndash; boils down to:</p>

<blockquote><p>I will be an honest employee or contract worker, making sincere effort to
produce value for those who pay the bills, in both the short and long term.</p></blockquote>

<p>That&rsquo;s a statement of ethics, and it might belong in a programmer&rsquo;s oath.</p>

<p>Thinking about it further, I came up with my own version of the programmer&rsquo;s
oath, heavily based on the <a href="https://en.wikipedia.org/w/index.php?title=Hippocratic_Oath&amp;oldid=688739951#Modern_version">version</a> of the Hippocratic
Oath currently used in many medical schools.  I was honestly surprised at how
much could be lightly edited and incorporated into a programmer&rsquo;s oath.  There
is a comforting universality to ethics.</p>

<p>Let me know your thoughts!</p>

<blockquote><p>I swear to fulfill, to the best of my ability and judgment, this covenant:</p>

<ol>
<li><p>I appreciate the work of past generations, who overcame hardware and software limitations to produce the programming environment of today, and I will collaborate with colleagues in the present to further improve the future of our trade.  I recognize that I have received instruction from those who preceded me, and I will repay in kind by sharing my knowledge with those who will follow.</p></li>
<li><p>I will strive to efficiently produce the solution which best fits the needs as best as I can perceive them.  I will not shortchange through either overengineering or underdesigning.  I will provide verification, to whatever degree is reasonable given constraints of time and finances, that the solution I have generated works as expected.</p></li>
<li><p>I will treat clients and coworkers with respect and warmth.  I will listen to their ideas, using their input to sharpen my own understanding.  When disagreement arises, I will collaborate with the other parties to reach mutual understanding and agreement.  I will never reject or insult anyone I work with.</p></li>
<li><p>I will not be afraid to say &ldquo;I don&rsquo;t know&rdquo; and I will respect others for their admission of the same.  I will not be afraid to ask questions.</p></li>
<li><p>I will never attempt to deceive those who rely on my honesty.</p></li>
<li><p>I will respect the privacy of my company and/or clients, barring unethical or illegal behavior on their part.</p></li>
<li><p>I take full and complete responsibility for the ethical implications of every line of code I write.  I will value the guidance of my own moral conscience above my company&rsquo;s or client&rsquo;s desire for profit.</p></li>
<li><p>I will remember at all times that all of my code will interact with people; it will influence the lives of human beings.</p></li>
<li><p>When the problem is people, rather than code, I will address the people problem directly, rather than incurring the technical debt of excess code.</p></li>
<li><p>I will always consider myself a regular member of society with access to extra information and power.  My skills give me no right to exert greater influence on other human beings.</p></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
</feed>
