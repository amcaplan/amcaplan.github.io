<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | AMC: Aspiring Master of Code]]></title>
  <link href="http://amcaplan.ninja/categories/blog/atom.xml" rel="self"/>
  <link href="http://amcaplan.ninja/"/>
  <updated>2015-01-18T22:01:11-05:00</updated>
  <id>http://amcaplan.ninja/</id>
  <author>
    <name><![CDATA[Ariel Caplan]]></name>
    <email><![CDATA[ariel.caplan@mail.yu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Feature Flags in Ruby, Part I: What and Why]]></title>
    <link href="http://amcaplan.ninja/blog/2015/01/18/feature-flags-in-ruby-part-i-what-and-why/"/>
    <updated>2015-01-18T16:07:26-05:00</updated>
    <id>http://amcaplan.ninja/blog/2015/01/18/feature-flags-in-ruby-part-i-what-and-why</id>
    <content type="html"><![CDATA[<p><em>Note: Part I will be more theoretical.  If you already know about feature
flags and want to learn about the <a href="https://github.com/FetLife/rollout">rollout</a> and <a href="https://github.com/jamesgolick/degrade">degrade</a>
gems, check out Part II, coming soon.</em></p>

<h2>What are Feature Flags?</h2>

<p>Glad you asked!</p>

<p>Feature flags, also known as &ldquo;feature flippers,&rdquo; &ldquo;feature toggles,&rdquo;
<a href="http://en.wikipedia.org/wiki/Feature_toggle">and more</a>, are a way to simply turn bits of code on and
off in a live, running application.</p>

<p>While we won&rsquo;t get into too many of the details in this post, here&rsquo;s a simple
way to think about it.  Let&rsquo;s say you run a bowling alley.  Most of the time,
it&rsquo;s a straightforward establishment &ndash; lanes, balls, scoring computers, shoes&hellip;
you get the idea.  However, every Tuesday night you turn over the place, and now
it&rsquo;s Cosmic Bowling night!  You&rsquo;re blasting music, shining blacklights, the
disco ball is spinning&hellip; it&rsquo;s a different world.  How are you going to carry
out this operation?</p>

<!-- more -->


<p>Theoretically, you could go around every week and change all the lightbulbs, set
up the disco ball, and hook up the speakers, and then undo it all afterwards.
But that setup is highly error-prone and labor-intensive!</p>

<p>Shockingly, programmers do this all the time.  Sometimes, real-world needs force
us to have 2 working versions of our code.  Maybe we need to be ready to respond
to 2 versions of an API &ndash; we&rsquo;ll get into examples shortly.  The way we deal with
this is often by maintaining two active branches of our code.  This means that
we end up having to make sure we&rsquo;re applying all new code and fixes to both
branches, which is a nightmare.  And what if they really diverge to the point
that patches are no longer simple?</p>

<p>What&rsquo;s worse, sometimes we need to go back and forth on code deployed to our
production servers.  Do we really want the stress of deploying code every time
we want a feature turned on or off?  Of course not!</p>

<p>Enter feature flags.</p>

<p>To implement a feature flag, you need 2 things.  First, you need a branch point
in your code where you can decide which direction your program will take.
Second, you need an external method of flipping the switch in one direction or
another.</p>

<p><a name="feature-flag-types"></a></p>

<h2>Types of Feature Flags</h2>

<p>I haven&rsquo;t seen it described this way anywhere, but I&rsquo;ve come up with the idea
that there are two major types of feature flags, which I&rsquo;ve named as follows:</p>

<ol>
<li><strong>On/Off</strong> &ndash; decide whether a feature should be active or inactive</li>
<li><strong>This/That</strong> &ndash; direct executing code down one of two paths</li>
</ol>


<p>Although they are implemented in nearly the same way, these two types differ
conceptually, and we will refer to them often as we continue our discussion.</p>

<h2>Why Feature Flags?</h2>

<p>Let&rsquo;s jump into some real-world scenarios to understand how feature flags might
be helpful.  I will list 5 types of situations, but there are certainly others,
and you may discover them in your own development work.</p>

<h3>Experimental Code</h3>

<p>Maybe you, or someone ordering you around, had a great idea about how to improve
your web app.  But not everyone is convinced that it&rsquo;s such a good idea, or
perhaps someone thinks it might break everything.  You&rsquo;d like to turn it on for
a bit and see what happens, with a low cost to deactivate the new code if
anything goes wrong.</p>

<p>Using feature flags, you can insert a branch point to decide whether to run the
old code or jump into your new feature.  Then, when the app is live in
production, you can turn on the feature, see what happens, and be able to
quickly deactivate the new code.</p>

<p>A/B testing also falls under this paradigm.  If you are considering a change to
your app and want some evidence about the user impact, you can turn it on,
gather evidence, and then turn it off again while you evaluate.  Or, using a
This/That feature flag, you can test two different implementations and decide
which is better.</p>

<h3>Syncing Apps in an SOA Ecosystem</h3>

<p>Your company has jumped on the SOA bandwagon, and your app is now broken up into
multiple services that talk to each other.  Now, you want to change the public
API of one service, which will impact the downstream clients that consume it.
Using feature flags, you can seamlessly transition from one API to the other.</p>

<p>The service being changed has to keep the old code and the new code, and use a
This/That feature flag to control which API version to expose.  The client, in
the meantime, also uses a feature flag to decide which API to consume.  When the
time comes, flip those two switches together, and your apps can communicate
using the new API.  (If you set up your architecture right, you can actually
have both switches really be one switch, which enforces change in unison.)</p>

<h3>Consuming Internal Services (Built by Other Teams)</h3>

<p>Although conceptually similar to the previous case, there is an enormous
practical difference.  Your company may have its product split up into services
maintained by separate teams.  In this case, you cannot control exactly when the
other team will change its service.</p>

<p>So let&rsquo;s say you depend on Service X.  Team X tells you they are switching to a
new API in one month&rsquo;s time.  You want to start building against the new API,
to be ready for its deployment, but your code also has to be maintained in the
meantime.  Also, who says they will truly update their API in one month?  Maybe
things will be delayed, and it will be 6 months, during which time your
development progress is stymied by the fact that you can&rsquo;t deploy anything,
since you&rsquo;ve built in support for the new API and thereby lost support for the
old!</p>

<p>Feature flags provide a convenient way to handle this issue.  You can build into
your code the ability to access the new API, but keep it inactive using a
feature flag.  Once the new API is in place, flip the switch!</p>

<h3>External Services</h3>

<p>Sometimes websites get DoS'ed.  Or DDoS'ed.  Or just a developer did something
dumb and crashed the app for 10 minutes.  Lots of things can happen, and if you
depend on an external service, their downtime can be yours as well.</p>

<p>Luckily, there is a way out.  You can establish a strategy for what to do when
the external service is inaccessible.  Normally, that strategy is kept inactive
using a feature flag.  If the service experiences downtime, toggle the flag and
you can activate your strategy for circumventing the service.  Even better, you
don&rsquo;t have to do it yourself; the next post will show you how to activate this
strategy programmatically.</p>

<p>Less downtime means happier customers means fun and profit!</p>

<h3>Debugging Tools</h3>

<p>At <a href="http://vitals.com">Vitals</a>, we have a number of tools we use to log extra information
about the state of our application and the data it processes, for debugging
purposes.  However, these tools come at a price: they add a small amount of
extra latency to each request.  We only want to activate these debugging tools
as necessary for debugging, and the simplest way to do that is to associate them
with feature flags.  Feature flag on&mdash;do extra work.  Feature flag off&mdash;speed
up the request.</p>

<p>Additionally, depending on the situation, debugging tools may occasionally yield
output in the HTTP responses sent to the client.  This may be necessary to
invoke on occasion, but certainly should not be active as a default.  It might
expose too much information to users, and certainly should not be active by
default.  Perhaps you want to have this information available as a matter of
course in your QA/UAT/staging environment, and in case of emergency in
production.  In any of these cases, feature flags provide convenient,
finely-tuned control over these sensitive parts of your application.</p>

<h2>Wrapping Up</h2>

<p>At this point, we have a better understanding of what feature flags are, and why
we might want them in our application.  In Part II, we will give practical
examples of how to set up feature flags, and where to place them in our code.</p>

<hr />

<p><em>Recently I gave a <a href="/talks/2015/01/14/flag-your-features-with-rollout-and-degrade">talk</a> at <a href="http://www.meetup.com/NYC-rb/">NYC.rb</a> about
<a href="http://jamesgolick.com">James Golick</a>&rsquo;s <code>rollout</code> and <code>degrade</code> gems.  These posts are a
rehash and expansion of the material delivered there.</em></p>

<p><em>To learn more about James&rsquo;s life and the circumstances surrounding his untimely
passing, see the links below the <a href="https://speakerdeck.com/amcaplan/flag-your-features-with-rollout-and-degrade">SpeakerDeck</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flag Your Features with Rollout and Degrade]]></title>
    <link href="http://amcaplan.ninja/blog/2015/01/13/flag-your-features-with-rollout-and-degrade/"/>
    <updated>2015-01-13T19:29:40-05:00</updated>
    <id>http://amcaplan.ninja/blog/2015/01/13/flag-your-features-with-rollout-and-degrade</id>
    <content type="html"><![CDATA[<p>[This post has been moved to the new <a href="/talks">Talks</a> section.]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closures and Callbacks: Running Arbitrary Task Sets Synchronously in JavaScript]]></title>
    <link href="http://amcaplan.ninja/blog/2014/08/24/closures-and-callbacks-running-arbitrary-task-sets-synchronously-in-javascript/"/>
    <updated>2014-08-24T16:25:29-04:00</updated>
    <id>http://amcaplan.ninja/blog/2014/08/24/closures-and-callbacks-running-arbitrary-task-sets-synchronously-in-javascript</id>
    <content type="html"><![CDATA[<p>On the Vitals Choice team, we have divided our product into a number of apps.
Each of those apps has one running instance per environment , and we have
several environments.  So as you might imagine, making sure updated code
gets propagated through all those places at the right time can be quite
the task.  Luckily, we have a Hubot instance which does most of the heavy
lifting, but even issuing all the Hubot commands for every single app makes you
wonder: shouldn&rsquo;t there be a way to automate this better?</p>

<p>Well, it turns out that an attempt had been made in the past, but we ran into
a problem: JavaScript&rsquo;s asynchronicity.  The server hosting Hubot was suddenly
told to update all the apps for a particular environment, and the simultaneous
processes overwhelmed the CPU and memory.</p>

<p>Considering the problem, I realized that callbacks were the way to go.  Hubot
comes with an evented system, which we could utilize to force Hubot to only
launch one app at a time.  Here&rsquo;s what I came up with, and what I learned along
the way.</p>

<!-- more -->


<p><em>[Note: code examples have been simplified for readability, and proprietary
secrets have been removed.]</em></p>

<h3>Step 1: Implement callbacks for the deploy script</h3>

<p>Initially, groundwork needed to be laid for post-deploy callbacks.  This was
relatively simple to implement (all examples in CoffeeScript):
``` coffeescript
deploy = (app, env, callback) &ndash;>
  # code to deploy the app, including spawning a Shell script, abstracted
  # in JavaScript by an object held in the variable &lsquo;script&rsquo;</p>

<p>  script.on &lsquo;close&rsquo;, &ndash;></p>

<pre><code>callback()
</code></pre>

<p>```</p>

<h3>Step 2: Create a function for each app</h3>

<p>After quickly setting up a <code>robot.respond</code> function (which is how Hubot
responds to a particular chat command), calling a <code>deployAll</code> function, I
turned to the hard problem of setting up a series of functions to deploy all
apps, one after the other.  I had a variable accessible as
<code>robot.brain.PROJECTS</code>, which was a collection of all the app names, so I
thought to iterate through all the apps, each time capturing the previous
function as a callback of the new function.  This would effectively create
a stack of functions that would be executed one by one, exactly as I described.</p>

<p>``` coffeescript
deployAll = (env, msg)&ndash;>
  callback = &ndash;></p>

<pre><code>msg.send "Finished deploying all the apps!"
</code></pre>

<p>  for app in robot.brain.PROJECTS</p>

<pre><code># Reassign `callback` to a new function...
callback = -&gt;
  # which passes the current `callback` as a callback to `deploy`
  deploy(app, env, callback)
</code></pre>

<p>  callback() # Start the chain!
```</p>

<p>It all seemed to make sense, until I actually tested it.  For some reason,
it just tried to deploy the last app again and again.  What gives?</p>

<h3>Step 2.5: Grokking Scope and Lazy Function Evaluation</h3>

<p>It turns out that in the loop, when I redefined <code>callback</code>, it associated the
<code>callback</code> variable with a new function, but within the function, it didn&rsquo;t
yet do anything with the line <code>deploy(app, env, callback)</code>.  This is because
functions exist within a particular closure; they will be evaluated as though
they were run in the place where they were defined, with access to all local
variables, but those variables are accessed when the function is actually run,
NOT when the function is defined.</p>

<p>Here&rsquo;s a simpler example:</p>

<p><code>coffeescript
i = 0
logger = -&gt;
  i++
  console.log(i)
logger() # =&gt; 1
logger() # =&gt; 2
console.log(i) =&gt; 2
</code></p>

<p>We can see that <code>i</code> is defined in the outer scope, modified in the inner scope,
and that change persists in the outer scope.</p>

<p>Let&rsquo;s now look at an example closer to our situation:</p>

<p><code>coffeescript
i = 0
logger = -&gt;
  console.log(i)
i = 7
logger() # =&gt; 7
</code></p>

<p>As we can see, the <code>i</code> inside the function is not fixed, but rather depends on
what happens in its closure at any point before the function is actually
called.</p>

<p>Here&rsquo;s one last example, with a nested function like we had:</p>

<p>``` coffeescript
callbackRunner = (callback) &ndash;>
  callback()
onePrinter = &ndash;>
  console.log(1)
callbackRunner(onePrinter) # => 1</p>

<p>cbRoP = &ndash;>
  callbackRunner(onePrinter)
cbRoP() # => 1</p>

<p>onePrinter = &ndash;>
  console.log(&ldquo;one&rdquo;)
cbRoP() # => &ldquo;one&rdquo;
```</p>

<p>By redefining <code>onePrinter</code> in the outer scope, we changed what <code>cbRoP</code> does.
This is because inside <code>cbRoP</code>, where <code>onePrinter</code> is referenced, that variable
is evaluated only when <code>cbRoP</code> is actually called.  The first time, <code>onePrinter</code>
prints out 1, but the second time, it prints out &ldquo;one&rdquo;.  Even within <code>cbRoP</code>,
<code>onePrinter</code> has been redefined.</p>

<h3>Step 3: Create a Custom Scope</h3>

<p>The solution to our problem was to create a scope where the callback wouldn&rsquo;t
change.  Here&rsquo;s the code:</p>

<p>``` coffeescript
deployAll = (env, msg)&ndash;>
  callback = &ndash;></p>

<pre><code>msg.send "Finished deploying all the apps!"
</code></pre>

<p>  deployFunctionFactory = (app, callback) &ndash;></p>

<pre><code>-&gt;
  deploy(app, env, callback)
</code></pre>

<p>  for app in robot.brain.PROJECTS</p>

<pre><code>callback = deployFunctionFactory(app, callback)
</code></pre>

<p>  callback()
```</p>

<p>This is a bit of a mind-bender, so let&rsquo;s explain piece by piece.</p>

<ul>
<li><p><code>deployFunctionFactory</code> takes in a reference to an app and a function to
use as a callback.  It returns a function which, when called, will deploy
the app passed in, and use the callback that is passed in.  Since <code>callback</code>
is one of <code>deployFunctionFactory</code>&rsquo;s arguments, it has been captured in the
scope of the function, and nothing outside can change it in the future.</p></li>
<li><p>The <code>for</code> loop reassigns <code>callback</code> each time to a new function which is
produced on the spot by <code>deployFunctionFactory</code>.  The right side of the equals
sign is evaluated immediately, so <code>callback</code> is passed into
<code>deployFunctionFactory</code>, a new function is returned, and that new function is
assigned to <code>callback</code>.</p></li>
<li><p>The cycle repeats for each app, ultimately generating what is effectively
a stack of functions to be called, one after the other.</p></li>
<li><p>When the stack of functions is resolved on the last line, it starts by
running the anonymous function returned by <code>deployFunctionFactory</code> for the last
app in <code>robot.brain.PROJECTS</code>, since that&rsquo;s the last function that has been
added to the virtual stack.  That function calls <code>deploy</code> with the second-to-last
function (which deploys the second-to-last app) as a callback.  When the first
app deployed is done deploying, this callback is run, deploying the next app
in line.</p></li>
</ul>


<p>The logic is pretty complex, so here&rsquo;s a visual representation of what all this
code is accomplishing.  We will consider a case of 3 apps to keep it simple.
First, we build the function inside out:</p>

<p>``` coffeescript
1.  callback = &ndash;></p>

<pre><code>  msg.send "Finished deploying all the apps!"
</code></pre>

<ol>
<li><p>callback = &ndash;>
  deploy &ldquo;app1&rdquo;, env, &ndash;>
    msg.send &ldquo;Finished deploying all the apps!&rdquo;</p></li>
<li><p>callback = &ndash;>
  deploy &ldquo;app2&rdquo;, env, &ndash;>
    deploy &ldquo;app1&rdquo;, env, &ndash;>
      msg.send &ldquo;Finished deploying all the apps!&rdquo;</p></li>
<li><p>callback = &ndash;>
  deploy &ldquo;app3&rdquo;, env, &ndash;>
    deploy &ldquo;app2&rdquo;, env, &ndash;>
      deploy &ldquo;app1&rdquo;, env, &ndash;>
        msg.send &ldquo;Finished deploying all the apps!&rdquo;
```</p></li>
</ol>


<p>Now, when we call <code>callback</code>, the functions will be run outside in.  First,
app3 will be deployed.  When that&rsquo;s done, our <code>deploy</code> function knows to call
the callback, i.e. the next function, deploying app2.  When app2 finishes being
deployed, app1 will be deployed.  At the end, a message will be sent letting
you know all the apps have been deployed.</p>

<h3>Concluding Thoughts</h3>

<p>Using closures and callbacks properly can be a mentally exhausting endeavor.
However, when these factors are properly considered and utilized, you can
accomplish some pretty powerful stuff.</p>

<p>I personally had to try a few iterations before I came up with a workable
solution in this case, but the results were quite satisfying, and it got the
job done.  In the future, if we add apps to <code>robot.brain.PROJECTS</code>, the
<code>deployAll</code> function won&rsquo;t have to be changed; it will just add more layers
to the nested function we&rsquo;ve built.</p>

<p>Using closures and callbacks, we&rsquo;ve managed to build a function that will run
an arbitrary number of tasks synchronously.  Sweet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous JavaScript - Without Failing Capybara Tests]]></title>
    <link href="http://amcaplan.ninja/blog/2014/07/17/asynchronous-javascript-without-failing-capybara-tests/"/>
    <updated>2014-07-17T13:04:57-04:00</updated>
    <id>http://amcaplan.ninja/blog/2014/07/17/asynchronous-javascript-without-failing-capybara-tests</id>
    <content type="html"><![CDATA[<p>Recently at work, I spent over a day trying to get one failing test to pass.  I tried everything in the code, but no dice.  Finally, I realized that the problem wasn&rsquo;t with my code &ndash; it was with the way Capybara works.  I want to save you the time I lost, so let&rsquo;s get to it.</p>

<p>Capybara, to quote its creator <a href="https://github.com/jnicklas">Jonas Nicklas</a>, &ldquo;is ridiculously good at waiting for content.&rdquo;  It knows that when it&rsquo;s told to find something on the page, or click a link, and it&rsquo;s not there, don&rsquo;t sweat it &ndash; just keep trying until a default timeout (<code>Capybara.default_wait_time</code>) is hit.  When, and only when, that timeout is hit, Capybara will give you an <code>ElementNotFound</code> error.</p>

<p>This works great for most use cases.  However, sometimes it just isn&rsquo;t enough.  Let&rsquo;s illustrate with a real-world example.</p>

<!-- More -->


<h3>The Case</h3>

<p>In my situation, we were working with <a href="https://github.com/bernat/best_in_place">the <code>best_in_place</code> gem</a>, a jQuery library which allows in-place editing of a model&rsquo;s attributes.  We were providing users with an Edit button which would turn the text into a textarea, and a Save button to save changes.</p>

<p>So we wrote a test where the text is edited once, saved, and then edited again.  The first time, no problems.  The second time, though, Capybara failed every time with an <code>ElementNotFound</code> error.  The textarea just wasn&rsquo;t there.  After lots of code changes, fancy debugging techniques, etc., the problem wasn&rsquo;t presenting itself.</p>

<p>Here&rsquo;s the issue, when we finally figured it out: We were replacing the element on the page after the AJAX call to update the model on the server successfully completed.  It turns out that <code>best_in_place</code> has a <code>data-activator</code> attribute, defining a DOM selector for the activator element (in this case, the Edit Button), which is used only once, when <code>$(editableElement).best_in_place()</code> is called.  This adds an event listener for a click on the activator.</p>

<p>When the element is replaced, then, we need to call <code>$(editableElement).best_in_place()</code> again to activate the activator (since the editable element, and the activator itself, have been replaced).  Failing to do so would mean that the item could be edited once, and never edited again!  There&rsquo;s our problem!</p>

<p>But wait &ndash; we <em>were</em> calling <code>$(editableElement).best_in_place()</code> again, and spinning up a Rails server showed that when I tried it in the browser, it all worked!  So what gives?</p>

<p>TL;DR (on the last few paragraphs) &ndash; everything was being done right, and Capybara was still failing.</p>

<h3>The Explanation</h3>

<p>It turns out that Capybara is really good at waiting for an element to appear, but doesn&rsquo;t wait for elements to change.  So while <code>$(editableElement).best_in_place()</code> was still running, Capybara already clicked the element and moved on.  Not surprisingly, the element hadn&rsquo;t had the click handler bound to it yet, so the textarea never appeared.</p>

<p>The fix was a method introduced in Capybara 2 called <code>#synchronize</code>.  It&rsquo;s documented <a href="http://rubydoc.info/github/jnicklas/capybara/Capybara/Node/Base:synchronize">here</a>.  This is how I used it:
<code>ruby
page.document.synchronize do
  element.find("a.edit-link").click
  textarea = element.find "textarea"
end
</code>
The call to <code>#synchronize</code> tells Capybara to run the block but catch certain errors, including an <code>ElementNotFound</code> error.  If there is an error, it will run the block again from the top.  So in this case when it fails to find the textarea, it will click the link again and see if the textarea appears this time.  This cycle will continue until the block completes without errors, or the global Capybara timeout is reached.</p>

<p>When I added the block, the test passed.  Presto!</p>

<h3>A Word of Caution</h3>

<p>Before you go out and start using <code>#synchronize</code> all over your code, however, a warning is in order.  Capybara is really good at waiting for elements to appear, and waiting for AJAX has better solutions than <code>#synchronize</code>.  (See <a href="https://github.com/jnicklas/capybara#asynchronous-javascript-ajax-and-friends">the official Capybara documentation</a> for built-in functionality, and <a href="http://robots.thoughtbot.com/automatically-wait-for-ajax-with-capybara">this helpful Thoughtbot post</a> for how to avoid race conditions.)  So <code>#synchronize</code> is really for situations like this, where you have an element on the page which Capybara can find, but it takes a moment for it to gain the functionality you need &ndash; and, since Capybara browses way faster than you can, it interacts with that element just a bit too early.</p>

<p>The downside to <code>#synchronize</code> is that it introduces another point where Capybara tests can stall before failing, and it can mask a bad UX where JS that enables elements takes too long to work.  I&rsquo;d generally recommend avoiding the use of <code>#synchronize</code> until you hit a wall and the existing Capybara magic doesn&rsquo;t quite cut it.  And if you do use <code>#synchronize</code>, open up the browser, and make sure the real-life UX is fast enough that your users don&rsquo;t hit some kind of unexpected behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Stay Classy With Ruby Variables]]></title>
    <link href="http://amcaplan.ninja/blog/2014/05/29/how-to-stay-classy-with-ruby-variables/"/>
    <updated>2014-05-29T18:09:56-04:00</updated>
    <id>http://amcaplan.ninja/blog/2014/05/29/how-to-stay-classy-with-ruby-variables</id>
    <content type="html"><![CDATA[<p>Ruby provides a number of options for non-instance-specific variables &ndash; class variables (of the form: <code>@@var</code>), constants (in all caps: <code>VAR</code>), and class instance variables (<code>@var</code>).  Which one to use depends on the use case, and to some degree on personal preference.  Let&rsquo;s explore this a bit.</p>

<p>Constants are meant to be &ndash; well, constant.  This is not technically enforced in Ruby; if you redefine a constant during program execution, it will display a warning, but not actually raise an error.  However, the semantic idea of a constant is that it should be defined once and not touched again. Variables, on the other hand, are variable.  They record a particular state that is likely to be redefined at some future point in time.</p>

<p>Now let's examine some use cases and see where things start to get tricky.  To make things fun, let&rsquo;s go to the zoo!</p>

<!-- more -->


<p>In this case, I have an <code>Animal</code> class, which will be at the top of the hierarchy and have animal classes that descend from it.  Here are my requirements:</p>

<p>1) Since most of my animals are quadrupeds, I decide it makes sense for the class&rsquo;s instances to default to 4 legs, and any subclass (let&rsquo;s say <code>Octopus</code>) with a difference number of legs should change the default.</p>

<p>2) Both the <code>Animal</code> class and the individual animal-type classes should keep track of how many of each type of animal exists, so I can check <code>Animal.all</code> or <code>Octopus.all</code>.</p>

<p>Let&rsquo;s get to work.  Following Sandi Metz&rsquo;s recommendation, we&rsquo;re going to build an <code>Animal</code> parent class with a post-initialization hook.  Hence, the <code>Animal</code> class&rsquo;s initialize method will append the new item to an animals array, and then call an <code>after_initialize</code> method which will be accessible to the child classes.  We&rsquo;ll start with just 2 animal types, octopus and llama:</p>

<p>``` ruby
class Animal
  @@animals = []
  @@legs = 4</p>

<p>  def initialize(args={})</p>

<pre><code>@@animals &lt;&lt; self
after_initialize(args)
</code></pre>

<p>  end</p>

<p>  def after_initialize(args)
  end</p>

<p>  def legs</p>

<pre><code>@@legs
</code></pre>

<p>  end</p>

<p>  def self.all</p>

<pre><code>@@animals
</code></pre>

<p>  end
end</p>

<p>class Octopus &lt; Animal
  @@octopi = []
  @@legs = 8</p>

<p>  def after_initialize(args={})</p>

<pre><code>@@octopi &lt;&lt; self
</code></pre>

<p>  end</p>

<p>  def self.all</p>

<pre><code>@@octopi
</code></pre>

<p>  end
end</p>

<p>class Llama &lt; Animal
  @@llamas = []</p>

<p>  def after_initialize(args={})</p>

<pre><code>@@llamas &lt;&lt; self
</code></pre>

<p>  end</p>

<p>  def self.all</p>

<pre><code>@@llamas
</code></pre>

<p>  end
end</p>

<p>Llama.new.legs # => 8
```</p>

<p>Hmmmmmm, not exactly what we wanted.  How did we end up with an 8-legged llama?</p>

<p><a href="https://amcaplan.files.wordpress.com/2014/05/8legllamab.jpg"><img src="http://amcaplan.files.wordpress.com/2014/05/8legllamab.jpg?w=245" alt="8-legged llama" /></a></p>

<p>Well, it turns out that Ruby class variables don&rsquo;t play very nicely with inheritance.  Essentially, they are shared by any class in an inheritance chain.  So when we defined <code>@@legs</code> in <code>Octopus</code>, it changed <code>@@legs</code> in <code>Animal</code> and, by extension, <code>@@legs</code> in <code>Llama</code>.  (Technically, if <code>Animal</code> doesn&rsquo;t define a class variable, <code>Llama</code> and <code>Octopus</code> won&rsquo;t share that variable.  But going down that path is just begging for trouble, because you never know when someone down the road will add <code>@@legs</code> to Animal and open up a huge can of worms.)  I have heard this described as &ldquo;leaky inheritance,&rdquo; though I have yet to see it in writing.</p>

<p>Class variables, it seems, are really best for situations when you want to have each member of an inheritance hierarchy to be able to access the same variable.  That might be useful for configuration.  For example, let&rsquo;s say each animal has a speak method which it defines, and it can speak verbosely or concisely (for a <code>Dog</code>, &ldquo;WOOF!  WOOF WOOF WOOF!&rdquo; vs &ldquo;WOOF!&rdquo;).  Perhaps we want to change one setting in <code>Animal</code> and have that apply to all animals.  In that case, we would do something like this (irrelevant code removed for now):</p>

<p>``` ruby
class Animal
  @@config = {}</p>

<p>  def self.config</p>

<pre><code>@@config
</code></pre>

<p>  end</p>

<p>  def speak</p>

<pre><code>if self.class.config[:verbose] == true
  verbose_speech
else
  brief_speech
end
</code></pre>

<p>  end</p>

<p>  def verbose_speech</p>

<pre><code>''
</code></pre>

<p>  end</p>

<p>  def brief_speech</p>

<pre><code>''
</code></pre>

<p>  end
end</p>

<p>class Dog &lt; Animal
  def verbose_speech</p>

<pre><code>"WOOF! WOOF WOOF WOOF!"
</code></pre>

<p>  end</p>

<p>  def brief_speech</p>

<pre><code>"WOOF!"
</code></pre>

<p>  end
end</p>

<p>Dog.new.speak # => &ldquo;WOOF!&rdquo;
Animal.config[:verbose] = true
Dog.new.speak # => &ldquo;WOOF! WOOF WOOF WOOF!&rdquo;
```</p>

<p>So that works great.  But we need to do something about <code>@@legs</code>.  So here&rsquo;s the next option, which works well.  Let&rsquo;s change <code>@@legs</code> to a constant, <code>LEGS</code>:</p>

<p>``` ruby</p>

<h1>IRRELEVANT CODE FOR THIS EXAMPLE HAS BEEN REMOVED</h1>

<p>class Animal
  LEGS = 4</p>

<p>  def legs</p>

<pre><code>self.class::LEGS
</code></pre>

<p>  end
end</p>

<p>class Octopus &lt; Animal
  LEGS = 8
end</p>

<p>class Llama &lt; Animal
end</p>

<p>Octopus.new.legs # => 8
Llama.new.legs # => 4
```</p>

<p><em>Note how we now access <code>LEGS</code> as <code>self.class::LEGS</code>.  This is critical.  If we accessed it as <code>LEGS</code> without adding <code>self.class::</code>, we would be referencing the <code>LEGS</code> variable in the scope where the method was defined, i.e. <code>Animal</code>.  Instead, we tell the method to reference <code>LEGS</code> as it is defined within the scope of the current class.</em></p>

<p>Alright, we&rsquo;ve taken care of legs, but let&rsquo;s consider another issue.  What about our tallying object?  Right now, <code>Animal</code> has an <code>@@animals</code> variable which contains all the animals in our zoo.  This presents 2 problems:</p>

<p>1) What if a later programmer decides to call the container <code>@@animals</code> in the <code>Elephant</code> class?  Suddenly we&rsquo;ve entered a world of hurt.</p>

<p>2) On a more fundamental level &ndash; does it make sense for <code>Octopus</code> to have access to <code>@@animals</code>, even theoretically?  It should be blissfully unaware of the <code>Lion</code>s and <code>Tiger</code>s and <code>Bear</code>s throughout the zoo, and just know about the 8-legged ocean critters.  How can we make this happen?</p>

<p>We can solve problem 1 by simply replacing the array <code>@@animals</code> with a constant, <code>ANIMALS</code>.  Hence, subclasses that define their own array of animals won&rsquo;t generate a conflict.  However, despite seeing others advocate for it, I don&rsquo;t like that solution either, for 3 reasons:</p>

<p>1) Now we have a different problem.  If the designer of the <code>Elephant</code> class neglects to define an <code>ANIMALS</code> constant but still adds to the <code>ANIMALS</code> array, the parent class&rsquo;s array will be affected.  This may be difficult to debug.</p>

<p>2) It&rsquo;s true that Ruby doesn&rsquo;t complain about changing the contents of a constant array, because the object hasn&rsquo;t been fundamentally redefined.  That doesn&rsquo;t mean it&rsquo;s the right thing to do.  Others will disagree (and in fact Rails apparently does this all the time), but I maintain that constants should be constant and predictable.</p>

<p>3) Constants are easily accessible from outside the class.  Now, I know that everything in Ruby, even private methods, is accessible, but there&rsquo;s a semantic point here.  Where in the Ruby core classes do you find constants?  My first thought is in the <code>Math</code> module, which contains the constants <code>PI</code> and <code>E</code>.  In other words, constants are meant to be values which are definitional to the class and/or should never change once defined.  <code>PI</code> and <code>E</code> are not going anywhere.  Similarly, it makes sense to say that <code>Llama::LEGS</code> is 4 and <code>Octopus::LEGS</code> is 8, since those are attributes that should apply in all but the most exceptional cases.  (My apologies to Larry the 3-legged llama.)</p>

<p>The animals array, on the other hand, is not at all fundamental.  It&rsquo;s a variable that is changed frequently, and should be associated with the class, but not easily accessible from outside, and not shared with subclasses.</p>

<p>So what&rsquo;s the right answer?  Well, let&rsquo;s remind ourselves for a moment that everything in Ruby is an object.  It turns out that even classes are objects &ndash; instances of the <code>Class</code> class.  (Sidebar: if you want to really warp your brain, enter <code>Class.class</code> into IRB.  Yep, <code>Class</code> is an instance of itself!  Mind blown.)  So if classes are instances, surely they have instance variables, right?  Yes, they do.  And we can use them to implement a safe working version of our animals array!</p>

<p>``` ruby</p>

<h1>IRRELEVANT CODE EXCISED</h1>

<p>class Animal
  @animals = []
  def self.animals</p>

<pre><code>@animals
</code></pre>

<p>  end</p>

<p>  def initialize(args={})</p>

<pre><code>Animal.animals &lt;&lt; self
after_initialize(args)
</code></pre>

<p>  end</p>

<p>  def after_initialize(args)
  end</p>

<p>  def self.all</p>

<pre><code>self.animals
</code></pre>

<p>  end
end</p>

<p>class Lion &lt; Animal
  @animals = []</p>

<p>  def after_initialize(args)</p>

<pre><code>self.class.animals &lt;&lt; self
</code></pre>

<p>  end
end</p>

<p>Lion.new
Animal.all # => [#&lt;Lion:0x0000010187de60>]
Animal.all.object_id # => 2160486800
Lion.all # [#&lt;Lion:0x0000010187de60>]
Lion.all.object_id # => 2160342160
```</p>

<p>Note that this was a bit tricky.  We had to define a getter method for the animals array.  If we have a number of such variables, we would probably be best off using <code>attr_accessor</code>, but the call to <code>attr_accessor</code> has to be within the context of a <code>class &lt;&lt; self ... end</code> (singleton class) block.</p>

<p>On the other hand, we&rsquo;ve essentially established the animal-tracking system in the parent class, and we can take advantage of it in children by giving each its own <code>@animals</code> array as a class instance variable.</p>

<p>Alright, dear readers.  The time has come to leave you with the final, comprehensive version of our zoo.  Just don&rsquo;t feed the animals!</p>

<p>``` ruby
class Animal
  @animals = []
  LEGS = 4</p>

<p>  class &lt;&lt; self</p>

<pre><code>attr_reader :animals
alias :all :animals
</code></pre>

<p>  end</p>

<p>  def initialize(args={})</p>

<pre><code>Animal.animals &lt;&lt; self
after_initialize(args)
</code></pre>

<p>  end</p>

<p>  def after_initialize(args)
  end</p>

<p>  def legs</p>

<pre><code>self.class::LEGS
</code></pre>

<p>  end
end</p>

<p>class Octopus &lt; Animal
  @animals = []
  LEGS = 8</p>

<p>  def after_initialize(args={})</p>

<pre><code>self.class.animals &lt;&lt; self
</code></pre>

<p>  end
end</p>

<p>class Llama &lt; Animal
  @animals = []</p>

<p>  def after_initialize(args={})</p>

<pre><code>self.class.animals &lt;&lt; self
</code></pre>

<p>  end
end</p>

<p>Octopus.new.legs # => 8
Llama.new.legs # => 4
Animal.all # => [#&lt;Octopus:0x000001010ef220>,#&lt;Llama:0x000001010a6868>]
Octopus.all # => [#&lt;Octopus:0x000001010ef220>]
Llama.all # => [#&lt;Llama:0x000001010a6868>]
```</p>

<p>As always, comments and thoughts are most welcome.  Stay classy, Rubyists!</p>
]]></content>
  </entry>
  
</feed>
